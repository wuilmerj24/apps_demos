
declare class AttestationInfo extends NSObject {

	static alloc(): AttestationInfo; // inherited from NSObject

	static new(): AttestationInfo; // inherited from NSObject

	certificationDeclaration: NSData;

	challenge: NSData;

	dac: NSData;

	elements: NSData;

	elementsSignature: NSData;

	firmwareInfo: NSData;

	nonce: NSData;

	pai: NSData;

	constructor(o: { challenge: NSData; nonce: NSData; elements: NSData; elementsSignature: NSData; dac: NSData; pai: NSData; certificationDeclaration: NSData; firmwareInfo: NSData; });

	initWithChallengeNonceElementsElementsSignatureDacPaiCertificationDeclarationFirmwareInfo(challenge: NSData, nonce: NSData, elements: NSData, elementsSignature: NSData, dac: NSData, pai: NSData, certificationDeclaration: NSData, firmwareInfo: NSData): this;
}

declare class CSRInfo extends NSObject {

	static alloc(): CSRInfo; // inherited from NSObject

	static new(): CSRInfo; // inherited from NSObject

	csr: NSData;

	elements: NSData;

	elementsSignature: NSData;

	nonce: NSData;

	constructor(o: { nonce: NSData; elements: NSData; elementsSignature: NSData; csr: NSData; });

	initWithNonceElementsElementsSignatureCsr(nonce: NSData, elements: NSData, elementsSignature: NSData, csr: NSData): this;
}

declare const enum MTRAccessControlAuthMode {

	PASE = 1,

	CASE = 2,

	Group = 3
}

declare const enum MTRAccessControlChangeType {

	Changed = 0,

	Added = 1,

	Removed = 2
}

declare class MTRAccessControlClusterAccessControlEntry extends NSObject implements NSCopying {

	static alloc(): MTRAccessControlClusterAccessControlEntry; // inherited from NSObject

	static new(): MTRAccessControlClusterAccessControlEntry; // inherited from NSObject

	authMode: number;

	fabricIndex: number;

	privilege: number;

	subjects: NSArray<any>;

	targets: NSArray<any>;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRAccessControlClusterAccessControlEntryChangedEvent extends NSObject implements NSCopying {

	static alloc(): MTRAccessControlClusterAccessControlEntryChangedEvent; // inherited from NSObject

	static new(): MTRAccessControlClusterAccessControlEntryChangedEvent; // inherited from NSObject

	adminNodeID: number;

	adminPasscodeID: number;

	changeType: number;

	fabricIndex: number;

	latestValue: MTRAccessControlClusterAccessControlEntry;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRAccessControlClusterAccessControlExtensionChangedEvent extends NSObject implements NSCopying {

	static alloc(): MTRAccessControlClusterAccessControlExtensionChangedEvent; // inherited from NSObject

	static new(): MTRAccessControlClusterAccessControlExtensionChangedEvent; // inherited from NSObject

	adminNodeID: number;

	adminPasscodeID: number;

	changeType: number;

	fabricIndex: number;

	latestValue: MTRAccessControlClusterExtensionEntry;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRAccessControlClusterExtensionEntry extends NSObject implements NSCopying {

	static alloc(): MTRAccessControlClusterExtensionEntry; // inherited from NSObject

	static new(): MTRAccessControlClusterExtensionEntry; // inherited from NSObject

	data: NSData;

	fabricIndex: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRAccessControlClusterTarget extends NSObject implements NSCopying {

	static alloc(): MTRAccessControlClusterTarget; // inherited from NSObject

	static new(): MTRAccessControlClusterTarget; // inherited from NSObject

	cluster: number;

	deviceType: number;

	endpoint: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare const enum MTRAccessControlPrivilege {

	View = 1,

	ProxyView = 2,

	Operate = 3,

	Manage = 4,

	Administer = 5
}

declare class MTRAccountLoginClusterGetSetupPINParams extends NSObject implements NSCopying {

	static alloc(): MTRAccountLoginClusterGetSetupPINParams; // inherited from NSObject

	static new(): MTRAccountLoginClusterGetSetupPINParams; // inherited from NSObject

	tempAccountIdentifier: string;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRAccountLoginClusterGetSetupPINResponseParams extends NSObject implements NSCopying {

	static alloc(): MTRAccountLoginClusterGetSetupPINResponseParams; // inherited from NSObject

	static new(): MTRAccountLoginClusterGetSetupPINResponseParams; // inherited from NSObject

	setupPIN: string;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRAccountLoginClusterLoginParams extends NSObject implements NSCopying {

	static alloc(): MTRAccountLoginClusterLoginParams; // inherited from NSObject

	static new(): MTRAccountLoginClusterLoginParams; // inherited from NSObject

	setupPIN: string;

	tempAccountIdentifier: string;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRAccountLoginClusterLogoutParams extends NSObject implements NSCopying {

	static alloc(): MTRAccountLoginClusterLogoutParams; // inherited from NSObject

	static new(): MTRAccountLoginClusterLogoutParams; // inherited from NSObject

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare const enum MTRActionsActionError {

	Unknown = 0,

	Interrupted = 1
}

declare const enum MTRActionsActionState {

	Inactive = 0,

	Active = 1,

	Paused = 2,

	Disabled = 3
}

declare const enum MTRActionsActionType {

	Other = 0,

	Scene = 1,

	Sequence = 2,

	Automation = 3,

	Exception = 4,

	Notification = 5,

	Alarm = 6
}

declare class MTRActionsClusterActionFailedEvent extends NSObject implements NSCopying {

	static alloc(): MTRActionsClusterActionFailedEvent; // inherited from NSObject

	static new(): MTRActionsClusterActionFailedEvent; // inherited from NSObject

	actionID: number;

	error: number;

	invokeID: number;

	newState: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRActionsClusterActionStruct extends NSObject implements NSCopying {

	static alloc(): MTRActionsClusterActionStruct; // inherited from NSObject

	static new(): MTRActionsClusterActionStruct; // inherited from NSObject

	actionID: number;

	endpointListID: number;

	name: string;

	state: number;

	supportedCommands: number;

	type: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRActionsClusterDisableActionParams extends NSObject implements NSCopying {

	static alloc(): MTRActionsClusterDisableActionParams; // inherited from NSObject

	static new(): MTRActionsClusterDisableActionParams; // inherited from NSObject

	actionID: number;

	invokeID: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRActionsClusterDisableActionWithDurationParams extends NSObject implements NSCopying {

	static alloc(): MTRActionsClusterDisableActionWithDurationParams; // inherited from NSObject

	static new(): MTRActionsClusterDisableActionWithDurationParams; // inherited from NSObject

	actionID: number;

	duration: number;

	invokeID: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRActionsClusterEnableActionParams extends NSObject implements NSCopying {

	static alloc(): MTRActionsClusterEnableActionParams; // inherited from NSObject

	static new(): MTRActionsClusterEnableActionParams; // inherited from NSObject

	actionID: number;

	invokeID: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRActionsClusterEnableActionWithDurationParams extends NSObject implements NSCopying {

	static alloc(): MTRActionsClusterEnableActionWithDurationParams; // inherited from NSObject

	static new(): MTRActionsClusterEnableActionWithDurationParams; // inherited from NSObject

	actionID: number;

	duration: number;

	invokeID: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRActionsClusterEndpointListStruct extends NSObject implements NSCopying {

	static alloc(): MTRActionsClusterEndpointListStruct; // inherited from NSObject

	static new(): MTRActionsClusterEndpointListStruct; // inherited from NSObject

	endpointListID: number;

	endpoints: NSArray<any>;

	name: string;

	type: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRActionsClusterInstantActionParams extends NSObject implements NSCopying {

	static alloc(): MTRActionsClusterInstantActionParams; // inherited from NSObject

	static new(): MTRActionsClusterInstantActionParams; // inherited from NSObject

	actionID: number;

	invokeID: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRActionsClusterInstantActionWithTransitionParams extends NSObject implements NSCopying {

	static alloc(): MTRActionsClusterInstantActionWithTransitionParams; // inherited from NSObject

	static new(): MTRActionsClusterInstantActionWithTransitionParams; // inherited from NSObject

	actionID: number;

	invokeID: number;

	timedInvokeTimeoutMs: number;

	transitionTime: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRActionsClusterPauseActionParams extends NSObject implements NSCopying {

	static alloc(): MTRActionsClusterPauseActionParams; // inherited from NSObject

	static new(): MTRActionsClusterPauseActionParams; // inherited from NSObject

	actionID: number;

	invokeID: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRActionsClusterPauseActionWithDurationParams extends NSObject implements NSCopying {

	static alloc(): MTRActionsClusterPauseActionWithDurationParams; // inherited from NSObject

	static new(): MTRActionsClusterPauseActionWithDurationParams; // inherited from NSObject

	actionID: number;

	duration: number;

	invokeID: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRActionsClusterResumeActionParams extends NSObject implements NSCopying {

	static alloc(): MTRActionsClusterResumeActionParams; // inherited from NSObject

	static new(): MTRActionsClusterResumeActionParams; // inherited from NSObject

	actionID: number;

	invokeID: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRActionsClusterStartActionParams extends NSObject implements NSCopying {

	static alloc(): MTRActionsClusterStartActionParams; // inherited from NSObject

	static new(): MTRActionsClusterStartActionParams; // inherited from NSObject

	actionID: number;

	invokeID: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRActionsClusterStartActionWithDurationParams extends NSObject implements NSCopying {

	static alloc(): MTRActionsClusterStartActionWithDurationParams; // inherited from NSObject

	static new(): MTRActionsClusterStartActionWithDurationParams; // inherited from NSObject

	actionID: number;

	duration: number;

	invokeID: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRActionsClusterStateChangedEvent extends NSObject implements NSCopying {

	static alloc(): MTRActionsClusterStateChangedEvent; // inherited from NSObject

	static new(): MTRActionsClusterStateChangedEvent; // inherited from NSObject

	actionID: number;

	invokeID: number;

	newState: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRActionsClusterStopActionParams extends NSObject implements NSCopying {

	static alloc(): MTRActionsClusterStopActionParams; // inherited from NSObject

	static new(): MTRActionsClusterStopActionParams; // inherited from NSObject

	actionID: number;

	invokeID: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare const enum MTRActionsCommandBits {

	InstantAction = 1,

	InstantActionWithTransition = 2,

	StartAction = 4,

	StartActionWithDuration = 8,

	StopAction = 16,

	PauseAction = 32,

	PauseActionWithDuration = 64,

	ResumeAction = 128,

	EnableAction = 256,

	EnableActionWithDuration = 512,

	DisableAction = 1024,

	DisableActionWithDuration = 2048
}

declare const enum MTRActionsEndpointListType {

	Other = 0,

	Room = 1,

	Zone = 2
}

declare class MTRAdministratorCommissioningClusterOpenBasicCommissioningWindowParams extends NSObject implements NSCopying {

	static alloc(): MTRAdministratorCommissioningClusterOpenBasicCommissioningWindowParams; // inherited from NSObject

	static new(): MTRAdministratorCommissioningClusterOpenBasicCommissioningWindowParams; // inherited from NSObject

	commissioningTimeout: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRAdministratorCommissioningClusterOpenCommissioningWindowParams extends NSObject implements NSCopying {

	static alloc(): MTRAdministratorCommissioningClusterOpenCommissioningWindowParams; // inherited from NSObject

	static new(): MTRAdministratorCommissioningClusterOpenCommissioningWindowParams; // inherited from NSObject

	commissioningTimeout: number;

	discriminator: number;

	iterations: number;

	pakeVerifier: NSData;

	salt: NSData;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRAdministratorCommissioningClusterRevokeCommissioningParams extends NSObject implements NSCopying {

	static alloc(): MTRAdministratorCommissioningClusterRevokeCommissioningParams; // inherited from NSObject

	static new(): MTRAdministratorCommissioningClusterRevokeCommissioningParams; // inherited from NSObject

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare const enum MTRAdministratorCommissioningCommissioningWindowStatus {

	WindowNotOpen = 0,

	EnhancedWindowOpen = 1,

	BasicWindowOpen = 2
}

declare const enum MTRAdministratorCommissioningStatusCode {

	Busy = 2,

	PAKEParameterError = 3,

	WindowNotOpen = 4
}

declare const enum MTRApplicationBasicApplicationStatus {

	Stopped = 0,

	ActiveVisibleFocus = 1,

	ActiveHidden = 2,

	ActiveVisibleNotFocus = 3
}

declare class MTRApplicationBasicClusterApplicationBasicApplication extends NSObject implements NSCopying {

	static alloc(): MTRApplicationBasicClusterApplicationBasicApplication; // inherited from NSObject

	static new(): MTRApplicationBasicClusterApplicationBasicApplication; // inherited from NSObject

	applicationId: string;

	catalogVendorId: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRApplicationLauncherClusterApplication extends NSObject implements NSCopying {

	static alloc(): MTRApplicationLauncherClusterApplication; // inherited from NSObject

	static new(): MTRApplicationLauncherClusterApplication; // inherited from NSObject

	applicationId: string;

	catalogVendorId: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRApplicationLauncherClusterApplicationEP extends NSObject implements NSCopying {

	static alloc(): MTRApplicationLauncherClusterApplicationEP; // inherited from NSObject

	static new(): MTRApplicationLauncherClusterApplicationEP; // inherited from NSObject

	application: MTRApplicationLauncherClusterApplication;

	endpoint: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRApplicationLauncherClusterHideAppParams extends NSObject implements NSCopying {

	static alloc(): MTRApplicationLauncherClusterHideAppParams; // inherited from NSObject

	static new(): MTRApplicationLauncherClusterHideAppParams; // inherited from NSObject

	application: MTRApplicationLauncherClusterApplication;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRApplicationLauncherClusterLaunchAppParams extends NSObject implements NSCopying {

	static alloc(): MTRApplicationLauncherClusterLaunchAppParams; // inherited from NSObject

	static new(): MTRApplicationLauncherClusterLaunchAppParams; // inherited from NSObject

	application: MTRApplicationLauncherClusterApplication;

	data: NSData;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRApplicationLauncherClusterLauncherResponseParams extends NSObject implements NSCopying {

	static alloc(): MTRApplicationLauncherClusterLauncherResponseParams; // inherited from NSObject

	static new(): MTRApplicationLauncherClusterLauncherResponseParams; // inherited from NSObject

	data: NSData;

	status: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRApplicationLauncherClusterStopAppParams extends NSObject implements NSCopying {

	static alloc(): MTRApplicationLauncherClusterStopAppParams; // inherited from NSObject

	static new(): MTRApplicationLauncherClusterStopAppParams; // inherited from NSObject

	application: MTRApplicationLauncherClusterApplication;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare const enum MTRApplicationLauncherFeature {

	ApplicationPlatform = 1
}

declare const enum MTRApplicationLauncherStatus {

	Success = 0,

	AppNotAvailable = 1,

	SystemBusy = 2
}

declare var MTRArrayValueType: string;

declare class MTRAsyncCallbackQueueWorkItem extends NSObject {

	static alloc(): MTRAsyncCallbackQueueWorkItem; // inherited from NSObject

	static new(): MTRAsyncCallbackQueueWorkItem; // inherited from NSObject

	cancelHandler: () => void;

	readyHandler: (p1: any, p2: number) => void;

	constructor(o: { queue: NSObject; });

	endWork(): void;

	initWithQueue(queue: NSObject): this;

	retryWork(): void;
}

declare class MTRAsyncCallbackWorkQueue extends NSObject {

	static alloc(): MTRAsyncCallbackWorkQueue; // inherited from NSObject

	static new(): MTRAsyncCallbackWorkQueue; // inherited from NSObject

	constructor(o: { context: any; queue: NSObject; });

	enqueueWorkItem(item: MTRAsyncCallbackQueueWorkItem): void;

	initWithContextQueue(context: any, queue: NSObject): this;

	invalidate(): void;
}

declare class MTRAttributeCacheContainer extends NSObject {

	static alloc(): MTRAttributeCacheContainer; // inherited from NSObject

	static new(): MTRAttributeCacheContainer; // inherited from NSObject

	readAttributeWithEndpointIdClusterIdAttributeIdClientQueueCompletion(endpointId: number, clusterId: number, attributeId: number, clientQueue: NSObject, completion: (p1: NSArray<NSDictionary<string, any>>, p2: NSError) => void): void;
}

declare class MTRAttributePath extends NSObject implements NSCopying {

	static alloc(): MTRAttributePath; // inherited from NSObject

	static attributePathWithEndpointIdClusterIdAttributeId(endpoint: number, clusterId: number, attributeId: number): MTRAttributePath;

	static new(): MTRAttributePath; // inherited from NSObject

	readonly attribute: number;

	readonly cluster: number;

	readonly endpoint: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare var MTRAttributePathKey: string;

declare class MTRAttributeReport extends NSObject {

	static alloc(): MTRAttributeReport; // inherited from NSObject

	static new(): MTRAttributeReport; // inherited from NSObject

	readonly error: NSError;

	readonly path: MTRAttributePath;

	readonly value: any;
}

declare class MTRAudioOutputClusterOutputInfo extends NSObject implements NSCopying {

	static alloc(): MTRAudioOutputClusterOutputInfo; // inherited from NSObject

	static new(): MTRAudioOutputClusterOutputInfo; // inherited from NSObject

	index: number;

	name: string;

	outputType: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRAudioOutputClusterRenameOutputParams extends NSObject implements NSCopying {

	static alloc(): MTRAudioOutputClusterRenameOutputParams; // inherited from NSObject

	static new(): MTRAudioOutputClusterRenameOutputParams; // inherited from NSObject

	index: number;

	name: string;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRAudioOutputClusterSelectOutputParams extends NSObject implements NSCopying {

	static alloc(): MTRAudioOutputClusterSelectOutputParams; // inherited from NSObject

	static new(): MTRAudioOutputClusterSelectOutputParams; // inherited from NSObject

	index: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare const enum MTRAudioOutputFeature {

	NameUpdates = 1
}

declare const enum MTRAudioOutputOutputType {

	Hdmi = 0,

	Bt = 1,

	Optical = 2,

	Headphone = 3,

	Internal = 4,

	Other = 5
}

declare class MTRBarrierControlClusterBarrierControlGoToPercentParams extends NSObject implements NSCopying {

	static alloc(): MTRBarrierControlClusterBarrierControlGoToPercentParams; // inherited from NSObject

	static new(): MTRBarrierControlClusterBarrierControlGoToPercentParams; // inherited from NSObject

	percentOpen: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRBarrierControlClusterBarrierControlStopParams extends NSObject implements NSCopying {

	static alloc(): MTRBarrierControlClusterBarrierControlStopParams; // inherited from NSObject

	static new(): MTRBarrierControlClusterBarrierControlStopParams; // inherited from NSObject

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRBaseClusterAccessControl extends MTRCluster {

	static alloc(): MTRBaseClusterAccessControl; // inherited from NSObject

	static new(): MTRBaseClusterAccessControl; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAccessControlEntriesPerFabricWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeAclWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeExtensionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeSubjectsPerAccessControlEntryWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeTargetsPerAccessControlEntryWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAccessControlEntriesPerFabricWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeAclWithParamsCompletionHandler(params: MTRReadParams, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeExtensionWithParamsCompletionHandler(params: MTRReadParams, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeSubjectsPerAccessControlEntryWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeTargetsPerAccessControlEntryWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAccessControlEntriesPerFabricWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAclWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeExtensionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeSubjectsPerAccessControlEntryWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeTargetsPerAccessControlEntryWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	writeAttributeAclWithValueCompletionHandler(value: NSArray<any> | any[], completionHandler: (p1: NSError) => void): void;

	writeAttributeAclWithValueParamsCompletionHandler(value: NSArray<any> | any[], params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeExtensionWithValueCompletionHandler(value: NSArray<any> | any[], completionHandler: (p1: NSError) => void): void;

	writeAttributeExtensionWithValueParamsCompletionHandler(value: NSArray<any> | any[], params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;
}

declare class MTRBaseClusterAccountLogin extends MTRCluster {

	static alloc(): MTRBaseClusterAccountLogin; // inherited from NSObject

	static new(): MTRBaseClusterAccountLogin; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	getSetupPINWithParamsCompletionHandler(params: MTRAccountLoginClusterGetSetupPINParams, completionHandler: (p1: MTRAccountLoginClusterGetSetupPINResponseParams, p2: NSError) => void): void;

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	loginWithParamsCompletionHandler(params: MTRAccountLoginClusterLoginParams, completionHandler: (p1: NSError) => void): void;

	logoutWithCompletionHandler(completionHandler: (p1: NSError) => void): void;

	logoutWithParamsCompletionHandler(params: MTRAccountLoginClusterLogoutParams, completionHandler: (p1: NSError) => void): void;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;
}

declare class MTRBaseClusterActions extends MTRCluster {

	static alloc(): MTRBaseClusterActions; // inherited from NSObject

	static new(): MTRBaseClusterActions; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeActionListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeEndpointListsWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeSetupURLWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: string, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	disableActionWithDurationWithParamsCompletionHandler(params: MTRActionsClusterDisableActionWithDurationParams, completionHandler: (p1: NSError) => void): void;

	disableActionWithParamsCompletionHandler(params: MTRActionsClusterDisableActionParams, completionHandler: (p1: NSError) => void): void;

	enableActionWithDurationWithParamsCompletionHandler(params: MTRActionsClusterEnableActionWithDurationParams, completionHandler: (p1: NSError) => void): void;

	enableActionWithParamsCompletionHandler(params: MTRActionsClusterEnableActionParams, completionHandler: (p1: NSError) => void): void;

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	instantActionWithParamsCompletionHandler(params: MTRActionsClusterInstantActionParams, completionHandler: (p1: NSError) => void): void;

	instantActionWithTransitionWithParamsCompletionHandler(params: MTRActionsClusterInstantActionWithTransitionParams, completionHandler: (p1: NSError) => void): void;

	pauseActionWithDurationWithParamsCompletionHandler(params: MTRActionsClusterPauseActionWithDurationParams, completionHandler: (p1: NSError) => void): void;

	pauseActionWithParamsCompletionHandler(params: MTRActionsClusterPauseActionParams, completionHandler: (p1: NSError) => void): void;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeActionListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeEndpointListsWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeSetupURLWithCompletionHandler(completionHandler: (p1: string, p2: NSError) => void): void;

	resumeActionWithParamsCompletionHandler(params: MTRActionsClusterResumeActionParams, completionHandler: (p1: NSError) => void): void;

	startActionWithDurationWithParamsCompletionHandler(params: MTRActionsClusterStartActionWithDurationParams, completionHandler: (p1: NSError) => void): void;

	startActionWithParamsCompletionHandler(params: MTRActionsClusterStartActionParams, completionHandler: (p1: NSError) => void): void;

	stopActionWithParamsCompletionHandler(params: MTRActionsClusterStopActionParams, completionHandler: (p1: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeActionListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeEndpointListsWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeSetupURLWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: string, p2: NSError) => void): void;
}

declare class MTRBaseClusterAdministratorCommissioning extends MTRCluster {

	static alloc(): MTRBaseClusterAdministratorCommissioning; // inherited from NSObject

	static new(): MTRBaseClusterAdministratorCommissioning; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAdminFabricIndexWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeAdminVendorIdWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeWindowStatusWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	openBasicCommissioningWindowWithParamsCompletionHandler(params: MTRAdministratorCommissioningClusterOpenBasicCommissioningWindowParams, completionHandler: (p1: NSError) => void): void;

	openCommissioningWindowWithParamsCompletionHandler(params: MTRAdministratorCommissioningClusterOpenCommissioningWindowParams, completionHandler: (p1: NSError) => void): void;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAdminFabricIndexWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeAdminVendorIdWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeWindowStatusWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	revokeCommissioningWithCompletionHandler(completionHandler: (p1: NSError) => void): void;

	revokeCommissioningWithParamsCompletionHandler(params: MTRAdministratorCommissioningClusterRevokeCommissioningParams, completionHandler: (p1: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAdminFabricIndexWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAdminVendorIdWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeWindowStatusWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;
}

declare class MTRBaseClusterApplicationBasic extends MTRCluster {

	static alloc(): MTRBaseClusterApplicationBasic; // inherited from NSObject

	static new(): MTRBaseClusterApplicationBasic; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAllowedVendorListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeApplicationNameWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: string, p2: NSError) => void): void;

	static readAttributeApplicationVersionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: string, p2: NSError) => void): void;

	static readAttributeApplicationWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: MTRApplicationBasicClusterApplicationBasicApplication, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeProductIDWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeStatusWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeVendorIDWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeVendorNameWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: string, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAllowedVendorListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeApplicationNameWithCompletionHandler(completionHandler: (p1: string, p2: NSError) => void): void;

	readAttributeApplicationVersionWithCompletionHandler(completionHandler: (p1: string, p2: NSError) => void): void;

	readAttributeApplicationWithCompletionHandler(completionHandler: (p1: MTRApplicationBasicClusterApplicationBasicApplication, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeProductIDWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeStatusWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeVendorIDWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeVendorNameWithCompletionHandler(completionHandler: (p1: string, p2: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAllowedVendorListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeApplicationNameWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: string, p2: NSError) => void): void;

	subscribeAttributeApplicationVersionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: string, p2: NSError) => void): void;

	subscribeAttributeApplicationWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: MTRApplicationBasicClusterApplicationBasicApplication, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeProductIDWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeStatusWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeVendorIDWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeVendorNameWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: string, p2: NSError) => void): void;
}

declare class MTRBaseClusterApplicationLauncher extends MTRCluster {

	static alloc(): MTRBaseClusterApplicationLauncher; // inherited from NSObject

	static new(): MTRBaseClusterApplicationLauncher; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeCatalogListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeCurrentAppWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: MTRApplicationLauncherClusterApplicationEP, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	hideAppWithParamsCompletionHandler(params: MTRApplicationLauncherClusterHideAppParams, completionHandler: (p1: MTRApplicationLauncherClusterLauncherResponseParams, p2: NSError) => void): void;

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	launchAppWithParamsCompletionHandler(params: MTRApplicationLauncherClusterLaunchAppParams, completionHandler: (p1: MTRApplicationLauncherClusterLauncherResponseParams, p2: NSError) => void): void;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeCatalogListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeCurrentAppWithCompletionHandler(completionHandler: (p1: MTRApplicationLauncherClusterApplicationEP, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	stopAppWithParamsCompletionHandler(params: MTRApplicationLauncherClusterStopAppParams, completionHandler: (p1: MTRApplicationLauncherClusterLauncherResponseParams, p2: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeCatalogListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeCurrentAppWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: MTRApplicationLauncherClusterApplicationEP, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	writeAttributeCurrentAppWithValueCompletionHandler(value: MTRApplicationLauncherClusterApplicationEP, completionHandler: (p1: NSError) => void): void;

	writeAttributeCurrentAppWithValueParamsCompletionHandler(value: MTRApplicationLauncherClusterApplicationEP, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;
}

declare class MTRBaseClusterAudioOutput extends MTRCluster {

	static alloc(): MTRBaseClusterAudioOutput; // inherited from NSObject

	static new(): MTRBaseClusterAudioOutput; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeCurrentOutputWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeOutputListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeCurrentOutputWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeOutputListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	renameOutputWithParamsCompletionHandler(params: MTRAudioOutputClusterRenameOutputParams, completionHandler: (p1: NSError) => void): void;

	selectOutputWithParamsCompletionHandler(params: MTRAudioOutputClusterSelectOutputParams, completionHandler: (p1: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeCurrentOutputWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeOutputListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;
}

declare class MTRBaseClusterBallastConfiguration extends MTRCluster {

	static alloc(): MTRBaseClusterBallastConfiguration; // inherited from NSObject

	static new(): MTRBaseClusterBallastConfiguration; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeBallastFactorAdjustmentWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeBallastStatusWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeIntrinsicBalanceFactorWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeLampAlarmModeWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeLampBurnHoursTripPointWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeLampBurnHoursWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeLampManufacturerWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: string, p2: NSError) => void): void;

	static readAttributeLampQuantityWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeLampRatedHoursWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeLampTypeWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: string, p2: NSError) => void): void;

	static readAttributeMaxLevelWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeMinLevelWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributePhysicalMaxLevelWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributePhysicalMinLevelWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeBallastFactorAdjustmentWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeBallastStatusWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeIntrinsicBalanceFactorWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeLampAlarmModeWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeLampBurnHoursTripPointWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeLampBurnHoursWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeLampManufacturerWithCompletionHandler(completionHandler: (p1: string, p2: NSError) => void): void;

	readAttributeLampQuantityWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeLampRatedHoursWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeLampTypeWithCompletionHandler(completionHandler: (p1: string, p2: NSError) => void): void;

	readAttributeMaxLevelWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeMinLevelWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributePhysicalMaxLevelWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributePhysicalMinLevelWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeBallastFactorAdjustmentWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeBallastStatusWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeIntrinsicBalanceFactorWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeLampAlarmModeWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeLampBurnHoursTripPointWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeLampBurnHoursWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeLampManufacturerWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: string, p2: NSError) => void): void;

	subscribeAttributeLampQuantityWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeLampRatedHoursWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeLampTypeWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: string, p2: NSError) => void): void;

	subscribeAttributeMaxLevelWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeMinLevelWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributePhysicalMaxLevelWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributePhysicalMinLevelWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	writeAttributeBallastFactorAdjustmentWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeBallastFactorAdjustmentWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeIntrinsicBalanceFactorWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeIntrinsicBalanceFactorWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeLampAlarmModeWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeLampAlarmModeWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeLampBurnHoursTripPointWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeLampBurnHoursTripPointWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeLampBurnHoursWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeLampBurnHoursWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeLampManufacturerWithValueCompletionHandler(value: string, completionHandler: (p1: NSError) => void): void;

	writeAttributeLampManufacturerWithValueParamsCompletionHandler(value: string, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeLampRatedHoursWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeLampRatedHoursWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeLampTypeWithValueCompletionHandler(value: string, completionHandler: (p1: NSError) => void): void;

	writeAttributeLampTypeWithValueParamsCompletionHandler(value: string, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeMaxLevelWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeMaxLevelWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeMinLevelWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeMinLevelWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;
}

declare class MTRBaseClusterBarrierControl extends MTRCluster {

	static alloc(): MTRBaseClusterBarrierControl; // inherited from NSObject

	static new(): MTRBaseClusterBarrierControl; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeBarrierCapabilitiesWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeBarrierCloseEventsWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeBarrierClosePeriodWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeBarrierCommandCloseEventsWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeBarrierCommandOpenEventsWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeBarrierMovingStateWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeBarrierOpenEventsWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeBarrierOpenPeriodWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeBarrierPositionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeBarrierSafetyStatusWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	barrierControlGoToPercentWithParamsCompletionHandler(params: MTRBarrierControlClusterBarrierControlGoToPercentParams, completionHandler: (p1: NSError) => void): void;

	barrierControlStopWithCompletionHandler(completionHandler: (p1: NSError) => void): void;

	barrierControlStopWithParamsCompletionHandler(params: MTRBarrierControlClusterBarrierControlStopParams, completionHandler: (p1: NSError) => void): void;

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeBarrierCapabilitiesWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeBarrierCloseEventsWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeBarrierClosePeriodWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeBarrierCommandCloseEventsWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeBarrierCommandOpenEventsWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeBarrierMovingStateWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeBarrierOpenEventsWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeBarrierOpenPeriodWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeBarrierPositionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeBarrierSafetyStatusWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeBarrierCapabilitiesWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeBarrierCloseEventsWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeBarrierClosePeriodWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeBarrierCommandCloseEventsWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeBarrierCommandOpenEventsWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeBarrierMovingStateWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeBarrierOpenEventsWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeBarrierOpenPeriodWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeBarrierPositionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeBarrierSafetyStatusWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	writeAttributeBarrierCloseEventsWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeBarrierCloseEventsWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeBarrierClosePeriodWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeBarrierClosePeriodWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeBarrierCommandCloseEventsWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeBarrierCommandCloseEventsWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeBarrierCommandOpenEventsWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeBarrierCommandOpenEventsWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeBarrierOpenEventsWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeBarrierOpenEventsWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeBarrierOpenPeriodWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeBarrierOpenPeriodWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;
}

declare class MTRBaseClusterBasic extends MTRCluster {

	static alloc(): MTRBaseClusterBasic; // inherited from NSObject

	static new(): MTRBaseClusterBasic; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeCapabilityMinimaWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: MTRBasicClusterCapabilityMinimaStruct, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeDataModelRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeHardwareVersionStringWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: string, p2: NSError) => void): void;

	static readAttributeHardwareVersionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeLocalConfigDisabledWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeLocationWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: string, p2: NSError) => void): void;

	static readAttributeManufacturingDateWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: string, p2: NSError) => void): void;

	static readAttributeNodeLabelWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: string, p2: NSError) => void): void;

	static readAttributePartNumberWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: string, p2: NSError) => void): void;

	static readAttributeProductIDWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeProductLabelWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: string, p2: NSError) => void): void;

	static readAttributeProductNameWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: string, p2: NSError) => void): void;

	static readAttributeProductURLWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: string, p2: NSError) => void): void;

	static readAttributeReachableWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeSerialNumberWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: string, p2: NSError) => void): void;

	static readAttributeSoftwareVersionStringWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: string, p2: NSError) => void): void;

	static readAttributeSoftwareVersionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeUniqueIDWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: string, p2: NSError) => void): void;

	static readAttributeVendorIDWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeVendorNameWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: string, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	mfgSpecificPingWithCompletionHandler(completionHandler: (p1: NSError) => void): void;

	mfgSpecificPingWithParamsCompletionHandler(params: MTRBasicClusterMfgSpecificPingParams, completionHandler: (p1: NSError) => void): void;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeCapabilityMinimaWithCompletionHandler(completionHandler: (p1: MTRBasicClusterCapabilityMinimaStruct, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeDataModelRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeHardwareVersionStringWithCompletionHandler(completionHandler: (p1: string, p2: NSError) => void): void;

	readAttributeHardwareVersionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeLocalConfigDisabledWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeLocationWithCompletionHandler(completionHandler: (p1: string, p2: NSError) => void): void;

	readAttributeManufacturingDateWithCompletionHandler(completionHandler: (p1: string, p2: NSError) => void): void;

	readAttributeNodeLabelWithCompletionHandler(completionHandler: (p1: string, p2: NSError) => void): void;

	readAttributePartNumberWithCompletionHandler(completionHandler: (p1: string, p2: NSError) => void): void;

	readAttributeProductIDWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeProductLabelWithCompletionHandler(completionHandler: (p1: string, p2: NSError) => void): void;

	readAttributeProductNameWithCompletionHandler(completionHandler: (p1: string, p2: NSError) => void): void;

	readAttributeProductURLWithCompletionHandler(completionHandler: (p1: string, p2: NSError) => void): void;

	readAttributeReachableWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeSerialNumberWithCompletionHandler(completionHandler: (p1: string, p2: NSError) => void): void;

	readAttributeSoftwareVersionStringWithCompletionHandler(completionHandler: (p1: string, p2: NSError) => void): void;

	readAttributeSoftwareVersionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeUniqueIDWithCompletionHandler(completionHandler: (p1: string, p2: NSError) => void): void;

	readAttributeVendorIDWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeVendorNameWithCompletionHandler(completionHandler: (p1: string, p2: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeCapabilityMinimaWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: MTRBasicClusterCapabilityMinimaStruct, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeDataModelRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeHardwareVersionStringWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: string, p2: NSError) => void): void;

	subscribeAttributeHardwareVersionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeLocalConfigDisabledWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeLocationWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: string, p2: NSError) => void): void;

	subscribeAttributeManufacturingDateWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: string, p2: NSError) => void): void;

	subscribeAttributeNodeLabelWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: string, p2: NSError) => void): void;

	subscribeAttributePartNumberWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: string, p2: NSError) => void): void;

	subscribeAttributeProductIDWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeProductLabelWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: string, p2: NSError) => void): void;

	subscribeAttributeProductNameWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: string, p2: NSError) => void): void;

	subscribeAttributeProductURLWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: string, p2: NSError) => void): void;

	subscribeAttributeReachableWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeSerialNumberWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: string, p2: NSError) => void): void;

	subscribeAttributeSoftwareVersionStringWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: string, p2: NSError) => void): void;

	subscribeAttributeSoftwareVersionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeUniqueIDWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: string, p2: NSError) => void): void;

	subscribeAttributeVendorIDWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeVendorNameWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: string, p2: NSError) => void): void;

	writeAttributeLocalConfigDisabledWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeLocalConfigDisabledWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeLocationWithValueCompletionHandler(value: string, completionHandler: (p1: NSError) => void): void;

	writeAttributeLocationWithValueParamsCompletionHandler(value: string, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeNodeLabelWithValueCompletionHandler(value: string, completionHandler: (p1: NSError) => void): void;

	writeAttributeNodeLabelWithValueParamsCompletionHandler(value: string, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;
}

declare class MTRBaseClusterBinaryInputBasic extends MTRCluster {

	static alloc(): MTRBaseClusterBinaryInputBasic; // inherited from NSObject

	static new(): MTRBaseClusterBinaryInputBasic; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeActiveTextWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: string, p2: NSError) => void): void;

	static readAttributeApplicationTypeWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeDescriptionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: string, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeInactiveTextWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: string, p2: NSError) => void): void;

	static readAttributeOutOfServiceWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributePolarityWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributePresentValueWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeReliabilityWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeStatusFlagsWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeActiveTextWithCompletionHandler(completionHandler: (p1: string, p2: NSError) => void): void;

	readAttributeApplicationTypeWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeDescriptionWithCompletionHandler(completionHandler: (p1: string, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeInactiveTextWithCompletionHandler(completionHandler: (p1: string, p2: NSError) => void): void;

	readAttributeOutOfServiceWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributePolarityWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributePresentValueWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeReliabilityWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeStatusFlagsWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeActiveTextWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: string, p2: NSError) => void): void;

	subscribeAttributeApplicationTypeWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeDescriptionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: string, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeInactiveTextWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: string, p2: NSError) => void): void;

	subscribeAttributeOutOfServiceWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributePolarityWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributePresentValueWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeReliabilityWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeStatusFlagsWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	writeAttributeActiveTextWithValueCompletionHandler(value: string, completionHandler: (p1: NSError) => void): void;

	writeAttributeActiveTextWithValueParamsCompletionHandler(value: string, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeDescriptionWithValueCompletionHandler(value: string, completionHandler: (p1: NSError) => void): void;

	writeAttributeDescriptionWithValueParamsCompletionHandler(value: string, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeInactiveTextWithValueCompletionHandler(value: string, completionHandler: (p1: NSError) => void): void;

	writeAttributeInactiveTextWithValueParamsCompletionHandler(value: string, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeOutOfServiceWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeOutOfServiceWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributePresentValueWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributePresentValueWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeReliabilityWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeReliabilityWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;
}

declare class MTRBaseClusterBinding extends MTRCluster {

	static alloc(): MTRBaseClusterBinding; // inherited from NSObject

	static new(): MTRBaseClusterBinding; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeBindingWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeBindingWithParamsCompletionHandler(params: MTRReadParams, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeBindingWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	writeAttributeBindingWithValueCompletionHandler(value: NSArray<any> | any[], completionHandler: (p1: NSError) => void): void;

	writeAttributeBindingWithValueParamsCompletionHandler(value: NSArray<any> | any[], params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;
}

declare class MTRBaseClusterBooleanState extends MTRCluster {

	static alloc(): MTRBaseClusterBooleanState; // inherited from NSObject

	static new(): MTRBaseClusterBooleanState; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeStateValueWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeStateValueWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeStateValueWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;
}

declare class MTRBaseClusterBridgedDeviceBasic extends MTRCluster {

	static alloc(): MTRBaseClusterBridgedDeviceBasic; // inherited from NSObject

	static new(): MTRBaseClusterBridgedDeviceBasic; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeHardwareVersionStringWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: string, p2: NSError) => void): void;

	static readAttributeHardwareVersionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeManufacturingDateWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: string, p2: NSError) => void): void;

	static readAttributeNodeLabelWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: string, p2: NSError) => void): void;

	static readAttributePartNumberWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: string, p2: NSError) => void): void;

	static readAttributeProductLabelWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: string, p2: NSError) => void): void;

	static readAttributeProductNameWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: string, p2: NSError) => void): void;

	static readAttributeProductURLWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: string, p2: NSError) => void): void;

	static readAttributeReachableWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeSerialNumberWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: string, p2: NSError) => void): void;

	static readAttributeSoftwareVersionStringWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: string, p2: NSError) => void): void;

	static readAttributeSoftwareVersionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeUniqueIDWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: string, p2: NSError) => void): void;

	static readAttributeVendorIDWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeVendorNameWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: string, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeHardwareVersionStringWithCompletionHandler(completionHandler: (p1: string, p2: NSError) => void): void;

	readAttributeHardwareVersionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeManufacturingDateWithCompletionHandler(completionHandler: (p1: string, p2: NSError) => void): void;

	readAttributeNodeLabelWithCompletionHandler(completionHandler: (p1: string, p2: NSError) => void): void;

	readAttributePartNumberWithCompletionHandler(completionHandler: (p1: string, p2: NSError) => void): void;

	readAttributeProductLabelWithCompletionHandler(completionHandler: (p1: string, p2: NSError) => void): void;

	readAttributeProductNameWithCompletionHandler(completionHandler: (p1: string, p2: NSError) => void): void;

	readAttributeProductURLWithCompletionHandler(completionHandler: (p1: string, p2: NSError) => void): void;

	readAttributeReachableWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeSerialNumberWithCompletionHandler(completionHandler: (p1: string, p2: NSError) => void): void;

	readAttributeSoftwareVersionStringWithCompletionHandler(completionHandler: (p1: string, p2: NSError) => void): void;

	readAttributeSoftwareVersionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeUniqueIDWithCompletionHandler(completionHandler: (p1: string, p2: NSError) => void): void;

	readAttributeVendorIDWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeVendorNameWithCompletionHandler(completionHandler: (p1: string, p2: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeHardwareVersionStringWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: string, p2: NSError) => void): void;

	subscribeAttributeHardwareVersionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeManufacturingDateWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: string, p2: NSError) => void): void;

	subscribeAttributeNodeLabelWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: string, p2: NSError) => void): void;

	subscribeAttributePartNumberWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: string, p2: NSError) => void): void;

	subscribeAttributeProductLabelWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: string, p2: NSError) => void): void;

	subscribeAttributeProductNameWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: string, p2: NSError) => void): void;

	subscribeAttributeProductURLWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: string, p2: NSError) => void): void;

	subscribeAttributeReachableWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeSerialNumberWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: string, p2: NSError) => void): void;

	subscribeAttributeSoftwareVersionStringWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: string, p2: NSError) => void): void;

	subscribeAttributeSoftwareVersionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeUniqueIDWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: string, p2: NSError) => void): void;

	subscribeAttributeVendorIDWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeVendorNameWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: string, p2: NSError) => void): void;

	writeAttributeNodeLabelWithValueCompletionHandler(value: string, completionHandler: (p1: NSError) => void): void;

	writeAttributeNodeLabelWithValueParamsCompletionHandler(value: string, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;
}

declare class MTRBaseClusterChannel extends MTRCluster {

	static alloc(): MTRBaseClusterChannel; // inherited from NSObject

	static new(): MTRBaseClusterChannel; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeChannelListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeCurrentChannelWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: MTRChannelClusterChannelInfo, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeLineupWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: MTRChannelClusterLineupInfo, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	changeChannelByNumberWithParamsCompletionHandler(params: MTRChannelClusterChangeChannelByNumberParams, completionHandler: (p1: NSError) => void): void;

	changeChannelWithParamsCompletionHandler(params: MTRChannelClusterChangeChannelParams, completionHandler: (p1: MTRChannelClusterChangeChannelResponseParams, p2: NSError) => void): void;

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeChannelListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeCurrentChannelWithCompletionHandler(completionHandler: (p1: MTRChannelClusterChannelInfo, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeLineupWithCompletionHandler(completionHandler: (p1: MTRChannelClusterLineupInfo, p2: NSError) => void): void;

	skipChannelWithParamsCompletionHandler(params: MTRChannelClusterSkipChannelParams, completionHandler: (p1: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeChannelListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeCurrentChannelWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: MTRChannelClusterChannelInfo, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeLineupWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: MTRChannelClusterLineupInfo, p2: NSError) => void): void;
}

declare class MTRBaseClusterColorControl extends MTRCluster {

	static alloc(): MTRBaseClusterColorControl; // inherited from NSObject

	static new(): MTRBaseClusterColorControl; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeColorCapabilitiesWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeColorLoopActiveWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeColorLoopDirectionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeColorLoopStartEnhancedHueWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeColorLoopStoredEnhancedHueWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeColorLoopTimeWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeColorModeWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeColorPointBIntensityWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeColorPointBXWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeColorPointBYWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeColorPointGIntensityWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeColorPointGXWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeColorPointGYWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeColorPointRIntensityWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeColorPointRXWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeColorPointRYWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeColorTempPhysicalMaxMiredsWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeColorTempPhysicalMinMiredsWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeColorTemperatureMiredsWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeCompensationTextWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: string, p2: NSError) => void): void;

	static readAttributeCoupleColorTempToLevelMinMiredsWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeCurrentHueWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeCurrentSaturationWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeCurrentXWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeCurrentYWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeDriftCompensationWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeEnhancedColorModeWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeEnhancedCurrentHueWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeNumberOfPrimariesWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeOptionsWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributePrimary1IntensityWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributePrimary1XWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributePrimary1YWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributePrimary2IntensityWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributePrimary2XWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributePrimary2YWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributePrimary3IntensityWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributePrimary3XWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributePrimary3YWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributePrimary4IntensityWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributePrimary4XWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributePrimary4YWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributePrimary5IntensityWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributePrimary5XWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributePrimary5YWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributePrimary6IntensityWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributePrimary6XWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributePrimary6YWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRemainingTimeWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeStartUpColorTemperatureMiredsWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeWhitePointXWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeWhitePointYWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	colorLoopSetWithParamsCompletionHandler(params: MTRColorControlClusterColorLoopSetParams, completionHandler: (p1: NSError) => void): void;

	enhancedMoveHueWithParamsCompletionHandler(params: MTRColorControlClusterEnhancedMoveHueParams, completionHandler: (p1: NSError) => void): void;

	enhancedMoveToHueAndSaturationWithParamsCompletionHandler(params: MTRColorControlClusterEnhancedMoveToHueAndSaturationParams, completionHandler: (p1: NSError) => void): void;

	enhancedMoveToHueWithParamsCompletionHandler(params: MTRColorControlClusterEnhancedMoveToHueParams, completionHandler: (p1: NSError) => void): void;

	enhancedStepHueWithParamsCompletionHandler(params: MTRColorControlClusterEnhancedStepHueParams, completionHandler: (p1: NSError) => void): void;

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	moveColorTemperatureWithParamsCompletionHandler(params: MTRColorControlClusterMoveColorTemperatureParams, completionHandler: (p1: NSError) => void): void;

	moveColorWithParamsCompletionHandler(params: MTRColorControlClusterMoveColorParams, completionHandler: (p1: NSError) => void): void;

	moveHueWithParamsCompletionHandler(params: MTRColorControlClusterMoveHueParams, completionHandler: (p1: NSError) => void): void;

	moveSaturationWithParamsCompletionHandler(params: MTRColorControlClusterMoveSaturationParams, completionHandler: (p1: NSError) => void): void;

	moveToColorTemperatureWithParamsCompletionHandler(params: MTRColorControlClusterMoveToColorTemperatureParams, completionHandler: (p1: NSError) => void): void;

	moveToColorWithParamsCompletionHandler(params: MTRColorControlClusterMoveToColorParams, completionHandler: (p1: NSError) => void): void;

	moveToHueAndSaturationWithParamsCompletionHandler(params: MTRColorControlClusterMoveToHueAndSaturationParams, completionHandler: (p1: NSError) => void): void;

	moveToHueWithParamsCompletionHandler(params: MTRColorControlClusterMoveToHueParams, completionHandler: (p1: NSError) => void): void;

	moveToSaturationWithParamsCompletionHandler(params: MTRColorControlClusterMoveToSaturationParams, completionHandler: (p1: NSError) => void): void;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeColorCapabilitiesWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeColorLoopActiveWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeColorLoopDirectionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeColorLoopStartEnhancedHueWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeColorLoopStoredEnhancedHueWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeColorLoopTimeWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeColorModeWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeColorPointBIntensityWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeColorPointBXWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeColorPointBYWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeColorPointGIntensityWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeColorPointGXWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeColorPointGYWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeColorPointRIntensityWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeColorPointRXWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeColorPointRYWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeColorTempPhysicalMaxMiredsWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeColorTempPhysicalMinMiredsWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeColorTemperatureMiredsWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeCompensationTextWithCompletionHandler(completionHandler: (p1: string, p2: NSError) => void): void;

	readAttributeCoupleColorTempToLevelMinMiredsWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeCurrentHueWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeCurrentSaturationWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeCurrentXWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeCurrentYWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeDriftCompensationWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeEnhancedColorModeWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeEnhancedCurrentHueWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeNumberOfPrimariesWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeOptionsWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributePrimary1IntensityWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributePrimary1XWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributePrimary1YWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributePrimary2IntensityWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributePrimary2XWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributePrimary2YWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributePrimary3IntensityWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributePrimary3XWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributePrimary3YWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributePrimary4IntensityWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributePrimary4XWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributePrimary4YWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributePrimary5IntensityWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributePrimary5XWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributePrimary5YWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributePrimary6IntensityWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributePrimary6XWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributePrimary6YWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRemainingTimeWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeStartUpColorTemperatureMiredsWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeWhitePointXWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeWhitePointYWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	stepColorTemperatureWithParamsCompletionHandler(params: MTRColorControlClusterStepColorTemperatureParams, completionHandler: (p1: NSError) => void): void;

	stepColorWithParamsCompletionHandler(params: MTRColorControlClusterStepColorParams, completionHandler: (p1: NSError) => void): void;

	stepHueWithParamsCompletionHandler(params: MTRColorControlClusterStepHueParams, completionHandler: (p1: NSError) => void): void;

	stepSaturationWithParamsCompletionHandler(params: MTRColorControlClusterStepSaturationParams, completionHandler: (p1: NSError) => void): void;

	stopMoveStepWithParamsCompletionHandler(params: MTRColorControlClusterStopMoveStepParams, completionHandler: (p1: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeColorCapabilitiesWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeColorLoopActiveWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeColorLoopDirectionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeColorLoopStartEnhancedHueWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeColorLoopStoredEnhancedHueWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeColorLoopTimeWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeColorModeWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeColorPointBIntensityWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeColorPointBXWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeColorPointBYWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeColorPointGIntensityWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeColorPointGXWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeColorPointGYWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeColorPointRIntensityWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeColorPointRXWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeColorPointRYWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeColorTempPhysicalMaxMiredsWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeColorTempPhysicalMinMiredsWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeColorTemperatureMiredsWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeCompensationTextWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: string, p2: NSError) => void): void;

	subscribeAttributeCoupleColorTempToLevelMinMiredsWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeCurrentHueWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeCurrentSaturationWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeCurrentXWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeCurrentYWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeDriftCompensationWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeEnhancedColorModeWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeEnhancedCurrentHueWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeNumberOfPrimariesWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeOptionsWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributePrimary1IntensityWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributePrimary1XWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributePrimary1YWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributePrimary2IntensityWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributePrimary2XWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributePrimary2YWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributePrimary3IntensityWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributePrimary3XWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributePrimary3YWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributePrimary4IntensityWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributePrimary4XWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributePrimary4YWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributePrimary5IntensityWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributePrimary5XWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributePrimary5YWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributePrimary6IntensityWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributePrimary6XWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributePrimary6YWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRemainingTimeWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeStartUpColorTemperatureMiredsWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeWhitePointXWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeWhitePointYWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	writeAttributeColorPointBIntensityWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeColorPointBIntensityWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeColorPointBXWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeColorPointBXWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeColorPointBYWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeColorPointBYWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeColorPointGIntensityWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeColorPointGIntensityWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeColorPointGXWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeColorPointGXWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeColorPointGYWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeColorPointGYWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeColorPointRIntensityWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeColorPointRIntensityWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeColorPointRXWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeColorPointRXWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeColorPointRYWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeColorPointRYWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeOptionsWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeOptionsWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeStartUpColorTemperatureMiredsWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeStartUpColorTemperatureMiredsWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeWhitePointXWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeWhitePointXWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeWhitePointYWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeWhitePointYWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;
}

declare class MTRBaseClusterContentLauncher extends MTRCluster {

	static alloc(): MTRBaseClusterContentLauncher; // inherited from NSObject

	static new(): MTRBaseClusterContentLauncher; // inherited from NSObject

	static readAttributeAcceptHeaderWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeSupportedStreamingProtocolsWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	launchContentWithParamsCompletionHandler(params: MTRContentLauncherClusterLaunchContentParams, completionHandler: (p1: MTRContentLauncherClusterLaunchResponseParams, p2: NSError) => void): void;

	launchURLWithParamsCompletionHandler(params: MTRContentLauncherClusterLaunchURLParams, completionHandler: (p1: MTRContentLauncherClusterLaunchResponseParams, p2: NSError) => void): void;

	readAttributeAcceptHeaderWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeSupportedStreamingProtocolsWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAcceptHeaderWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeSupportedStreamingProtocolsWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	writeAttributeSupportedStreamingProtocolsWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeSupportedStreamingProtocolsWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;
}

declare class MTRBaseClusterDescriptor extends MTRCluster {

	static alloc(): MTRBaseClusterDescriptor; // inherited from NSObject

	static new(): MTRBaseClusterDescriptor; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeClientListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeDeviceListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributePartsListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeServerListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeClientListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeDeviceListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributePartsListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeServerListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeClientListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeDeviceListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributePartsListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeServerListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;
}

declare class MTRBaseClusterDiagnosticLogs extends MTRCluster {

	static alloc(): MTRBaseClusterDiagnosticLogs; // inherited from NSObject

	static new(): MTRBaseClusterDiagnosticLogs; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	retrieveLogsRequestWithParamsCompletionHandler(params: MTRDiagnosticLogsClusterRetrieveLogsRequestParams, completionHandler: (p1: MTRDiagnosticLogsClusterRetrieveLogsResponseParams, p2: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;
}

declare class MTRBaseClusterDoorLock extends MTRCluster {

	static alloc(): MTRBaseClusterDoorLock; // inherited from NSObject

	static new(): MTRBaseClusterDoorLock; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeActuatorEnabledWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAutoRelockTimeWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeCredentialRulesSupportWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeDefaultConfigurationRegisterWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeDoorClosedEventsWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeDoorOpenEventsWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeDoorStateWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeEnableInsideStatusLEDWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeEnableLocalProgrammingWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeEnableOneTouchLockingWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeEnablePrivacyModeButtonWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeExpiringUserTimeoutWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeLEDSettingsWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeLanguageWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: string, p2: NSError) => void): void;

	static readAttributeLocalProgrammingFeaturesWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeLockStateWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeLockTypeWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeMaxPINCodeLengthWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeMaxRFIDCodeLengthWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeMinPINCodeLengthWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeMinRFIDCodeLengthWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeNumberOfCredentialsSupportedPerUserWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeNumberOfHolidaySchedulesSupportedWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeNumberOfPINUsersSupportedWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeNumberOfRFIDUsersSupportedWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeNumberOfTotalUsersSupportedWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeNumberOfWeekDaySchedulesSupportedPerUserWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeNumberOfYearDaySchedulesSupportedPerUserWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeOpenPeriodWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeOperatingModeWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRequirePINforRemoteOperationWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeSendPINOverTheAirWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeSoundVolumeWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeSupportedOperatingModesWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeUserCodeTemporaryDisableTimeWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeWrongCodeEntryLimitWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	clearCredentialWithParamsCompletionHandler(params: MTRDoorLockClusterClearCredentialParams, completionHandler: (p1: NSError) => void): void;

	clearHolidayScheduleWithParamsCompletionHandler(params: MTRDoorLockClusterClearHolidayScheduleParams, completionHandler: (p1: NSError) => void): void;

	clearUserWithParamsCompletionHandler(params: MTRDoorLockClusterClearUserParams, completionHandler: (p1: NSError) => void): void;

	clearWeekDayScheduleWithParamsCompletionHandler(params: MTRDoorLockClusterClearWeekDayScheduleParams, completionHandler: (p1: NSError) => void): void;

	clearYearDayScheduleWithParamsCompletionHandler(params: MTRDoorLockClusterClearYearDayScheduleParams, completionHandler: (p1: NSError) => void): void;

	getCredentialStatusWithParamsCompletionHandler(params: MTRDoorLockClusterGetCredentialStatusParams, completionHandler: (p1: MTRDoorLockClusterGetCredentialStatusResponseParams, p2: NSError) => void): void;

	getHolidayScheduleWithParamsCompletionHandler(params: MTRDoorLockClusterGetHolidayScheduleParams, completionHandler: (p1: MTRDoorLockClusterGetHolidayScheduleResponseParams, p2: NSError) => void): void;

	getUserWithParamsCompletionHandler(params: MTRDoorLockClusterGetUserParams, completionHandler: (p1: MTRDoorLockClusterGetUserResponseParams, p2: NSError) => void): void;

	getWeekDayScheduleWithParamsCompletionHandler(params: MTRDoorLockClusterGetWeekDayScheduleParams, completionHandler: (p1: MTRDoorLockClusterGetWeekDayScheduleResponseParams, p2: NSError) => void): void;

	getYearDayScheduleWithParamsCompletionHandler(params: MTRDoorLockClusterGetYearDayScheduleParams, completionHandler: (p1: MTRDoorLockClusterGetYearDayScheduleResponseParams, p2: NSError) => void): void;

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	lockDoorWithParamsCompletionHandler(params: MTRDoorLockClusterLockDoorParams, completionHandler: (p1: NSError) => void): void;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeActuatorEnabledWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAutoRelockTimeWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeCredentialRulesSupportWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeDefaultConfigurationRegisterWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeDoorClosedEventsWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeDoorOpenEventsWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeDoorStateWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeEnableInsideStatusLEDWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeEnableLocalProgrammingWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeEnableOneTouchLockingWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeEnablePrivacyModeButtonWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeExpiringUserTimeoutWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeLEDSettingsWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeLanguageWithCompletionHandler(completionHandler: (p1: string, p2: NSError) => void): void;

	readAttributeLocalProgrammingFeaturesWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeLockStateWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeLockTypeWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeMaxPINCodeLengthWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeMaxRFIDCodeLengthWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeMinPINCodeLengthWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeMinRFIDCodeLengthWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeNumberOfCredentialsSupportedPerUserWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeNumberOfHolidaySchedulesSupportedWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeNumberOfPINUsersSupportedWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeNumberOfRFIDUsersSupportedWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeNumberOfTotalUsersSupportedWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeNumberOfWeekDaySchedulesSupportedPerUserWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeNumberOfYearDaySchedulesSupportedPerUserWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeOpenPeriodWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeOperatingModeWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRequirePINforRemoteOperationWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeSendPINOverTheAirWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeSoundVolumeWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeSupportedOperatingModesWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeUserCodeTemporaryDisableTimeWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeWrongCodeEntryLimitWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	setCredentialWithParamsCompletionHandler(params: MTRDoorLockClusterSetCredentialParams, completionHandler: (p1: MTRDoorLockClusterSetCredentialResponseParams, p2: NSError) => void): void;

	setHolidayScheduleWithParamsCompletionHandler(params: MTRDoorLockClusterSetHolidayScheduleParams, completionHandler: (p1: NSError) => void): void;

	setUserWithParamsCompletionHandler(params: MTRDoorLockClusterSetUserParams, completionHandler: (p1: NSError) => void): void;

	setWeekDayScheduleWithParamsCompletionHandler(params: MTRDoorLockClusterSetWeekDayScheduleParams, completionHandler: (p1: NSError) => void): void;

	setYearDayScheduleWithParamsCompletionHandler(params: MTRDoorLockClusterSetYearDayScheduleParams, completionHandler: (p1: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeActuatorEnabledWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAutoRelockTimeWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeCredentialRulesSupportWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeDefaultConfigurationRegisterWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeDoorClosedEventsWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeDoorOpenEventsWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeDoorStateWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeEnableInsideStatusLEDWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeEnableLocalProgrammingWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeEnableOneTouchLockingWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeEnablePrivacyModeButtonWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeExpiringUserTimeoutWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeLEDSettingsWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeLanguageWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: string, p2: NSError) => void): void;

	subscribeAttributeLocalProgrammingFeaturesWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeLockStateWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeLockTypeWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeMaxPINCodeLengthWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeMaxRFIDCodeLengthWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeMinPINCodeLengthWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeMinRFIDCodeLengthWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeNumberOfCredentialsSupportedPerUserWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeNumberOfHolidaySchedulesSupportedWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeNumberOfPINUsersSupportedWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeNumberOfRFIDUsersSupportedWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeNumberOfTotalUsersSupportedWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeNumberOfWeekDaySchedulesSupportedPerUserWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeNumberOfYearDaySchedulesSupportedPerUserWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeOpenPeriodWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeOperatingModeWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRequirePINforRemoteOperationWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeSendPINOverTheAirWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeSoundVolumeWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeSupportedOperatingModesWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeUserCodeTemporaryDisableTimeWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeWrongCodeEntryLimitWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	unlockDoorWithParamsCompletionHandler(params: MTRDoorLockClusterUnlockDoorParams, completionHandler: (p1: NSError) => void): void;

	unlockWithTimeoutWithParamsCompletionHandler(params: MTRDoorLockClusterUnlockWithTimeoutParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeAutoRelockTimeWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeAutoRelockTimeWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeDoorClosedEventsWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeDoorClosedEventsWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeDoorOpenEventsWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeDoorOpenEventsWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeEnableInsideStatusLEDWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeEnableInsideStatusLEDWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeEnableLocalProgrammingWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeEnableLocalProgrammingWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeEnableOneTouchLockingWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeEnableOneTouchLockingWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeEnablePrivacyModeButtonWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeEnablePrivacyModeButtonWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeExpiringUserTimeoutWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeExpiringUserTimeoutWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeLEDSettingsWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeLEDSettingsWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeLanguageWithValueCompletionHandler(value: string, completionHandler: (p1: NSError) => void): void;

	writeAttributeLanguageWithValueParamsCompletionHandler(value: string, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeLocalProgrammingFeaturesWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeLocalProgrammingFeaturesWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeOpenPeriodWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeOpenPeriodWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeOperatingModeWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeOperatingModeWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeRequirePINforRemoteOperationWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeRequirePINforRemoteOperationWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeSendPINOverTheAirWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeSendPINOverTheAirWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeSoundVolumeWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeSoundVolumeWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeUserCodeTemporaryDisableTimeWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeUserCodeTemporaryDisableTimeWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeWrongCodeEntryLimitWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeWrongCodeEntryLimitWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;
}

declare class MTRBaseClusterElectricalMeasurement extends MTRCluster {

	static alloc(): MTRBaseClusterElectricalMeasurement; // inherited from NSObject

	static new(): MTRBaseClusterElectricalMeasurement; // inherited from NSObject

	static readAttributeAcActivePowerOverloadWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeAcCurrentDivisorWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeAcCurrentMultiplierWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeAcCurrentOverloadWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeAcFrequencyDivisorWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeAcFrequencyMaxWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeAcFrequencyMinWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeAcFrequencyMultiplierWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeAcFrequencyWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeAcOverloadAlarmsMaskWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeAcPowerDivisorWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeAcPowerMultiplierWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeAcReactivePowerOverloadWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeAcVoltageDivisorWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeAcVoltageMultiplierWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeAcVoltageOverloadWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeActiveCurrentPhaseBWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeActiveCurrentPhaseCWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeActivePowerMaxPhaseBWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeActivePowerMaxPhaseCWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeActivePowerMaxWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeActivePowerMinPhaseBWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeActivePowerMinPhaseCWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeActivePowerMinWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeActivePowerPhaseBWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeActivePowerPhaseCWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeActivePowerWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeApparentPowerPhaseBWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeApparentPowerPhaseCWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeApparentPowerWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAverageRmsOverVoltageCounterPhaseBWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeAverageRmsOverVoltageCounterPhaseCWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeAverageRmsOverVoltageWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeAverageRmsUnderVoltageCounterPhaseBWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeAverageRmsUnderVoltageCounterPhaseCWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeAverageRmsUnderVoltageCounterWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeAverageRmsUnderVoltageWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeAverageRmsVoltageMeasurementPeriodPhaseBWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeAverageRmsVoltageMeasurementPeriodPhaseCWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeAverageRmsVoltageMeasurementPeriodWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeCurrentOverloadWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeDcCurrentDivisorWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeDcCurrentMaxWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeDcCurrentMinWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeDcCurrentMultiplierWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeDcCurrentWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeDcPowerDivisorWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeDcPowerMaxWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeDcPowerMinWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeDcPowerMultiplierWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeDcPowerWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeDcVoltageDivisorWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeDcVoltageMaxWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeDcVoltageMinWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeDcVoltageMultiplierWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeDcVoltageWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeHarmonicCurrentMultiplierWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeInstantaneousActiveCurrentWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeInstantaneousLineCurrentWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeInstantaneousPowerWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeInstantaneousReactiveCurrentWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeInstantaneousVoltageWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeLineCurrentPhaseBWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeLineCurrentPhaseCWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeMeasured11thHarmonicCurrentWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeMeasured1stHarmonicCurrentWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeMeasured3rdHarmonicCurrentWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeMeasured5thHarmonicCurrentWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeMeasured7thHarmonicCurrentWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeMeasured9thHarmonicCurrentWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeMeasuredPhase11thHarmonicCurrentWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeMeasuredPhase1stHarmonicCurrentWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeMeasuredPhase3rdHarmonicCurrentWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeMeasuredPhase5thHarmonicCurrentWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeMeasuredPhase7thHarmonicCurrentWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeMeasuredPhase9thHarmonicCurrentWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeMeasurementTypeWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeNeutralCurrentWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeOverloadAlarmsMaskWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributePhaseHarmonicCurrentMultiplierWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributePowerDivisorWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributePowerFactorPhaseBWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributePowerFactorPhaseCWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributePowerFactorWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributePowerMultiplierWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeReactiveCurrentPhaseBWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeReactiveCurrentPhaseCWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeReactivePowerPhaseBWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeReactivePowerPhaseCWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeReactivePowerWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRmsCurrentMaxPhaseBWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRmsCurrentMaxPhaseCWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRmsCurrentMaxWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRmsCurrentMinPhaseBWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRmsCurrentMinPhaseCWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRmsCurrentMinWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRmsCurrentPhaseBWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRmsCurrentPhaseCWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRmsCurrentWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRmsExtremeOverVoltagePeriodPhaseBWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRmsExtremeOverVoltagePeriodPhaseCWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRmsExtremeOverVoltagePeriodWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRmsExtremeOverVoltageWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRmsExtremeUnderVoltagePeriodPhaseBWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRmsExtremeUnderVoltagePeriodPhaseCWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRmsExtremeUnderVoltagePeriodWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRmsExtremeUnderVoltageWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRmsVoltageMaxPhaseBWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRmsVoltageMaxPhaseCWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRmsVoltageMaxWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRmsVoltageMinPhaseBWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRmsVoltageMinPhaseCWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRmsVoltageMinWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRmsVoltagePhaseBWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRmsVoltagePhaseCWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRmsVoltageSagPeriodPhaseBWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRmsVoltageSagPeriodPhaseCWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRmsVoltageSagPeriodWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRmsVoltageSagWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRmsVoltageSwellPeriodPhaseBWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRmsVoltageSwellPeriodPhaseCWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRmsVoltageSwellPeriodWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRmsVoltageSwellWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRmsVoltageWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeTotalActivePowerWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeTotalApparentPowerWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeTotalReactivePowerWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeVoltageOverloadWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	getMeasurementProfileCommandWithParamsCompletionHandler(params: MTRElectricalMeasurementClusterGetMeasurementProfileCommandParams, completionHandler: (p1: NSError) => void): void;

	getProfileInfoCommandWithCompletionHandler(completionHandler: (p1: NSError) => void): void;

	getProfileInfoCommandWithParamsCompletionHandler(params: MTRElectricalMeasurementClusterGetProfileInfoCommandParams, completionHandler: (p1: NSError) => void): void;

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcActivePowerOverloadWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeAcCurrentDivisorWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeAcCurrentMultiplierWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeAcCurrentOverloadWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeAcFrequencyDivisorWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeAcFrequencyMaxWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeAcFrequencyMinWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeAcFrequencyMultiplierWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeAcFrequencyWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeAcOverloadAlarmsMaskWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeAcPowerDivisorWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeAcPowerMultiplierWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeAcReactivePowerOverloadWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeAcVoltageDivisorWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeAcVoltageMultiplierWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeAcVoltageOverloadWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeActiveCurrentPhaseBWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeActiveCurrentPhaseCWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeActivePowerMaxPhaseBWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeActivePowerMaxPhaseCWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeActivePowerMaxWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeActivePowerMinPhaseBWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeActivePowerMinPhaseCWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeActivePowerMinWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeActivePowerPhaseBWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeActivePowerPhaseCWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeActivePowerWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeApparentPowerPhaseBWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeApparentPowerPhaseCWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeApparentPowerWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAverageRmsOverVoltageCounterPhaseBWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeAverageRmsOverVoltageCounterPhaseCWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeAverageRmsOverVoltageWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeAverageRmsUnderVoltageCounterPhaseBWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeAverageRmsUnderVoltageCounterPhaseCWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeAverageRmsUnderVoltageCounterWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeAverageRmsUnderVoltageWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeAverageRmsVoltageMeasurementPeriodPhaseBWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeAverageRmsVoltageMeasurementPeriodPhaseCWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeAverageRmsVoltageMeasurementPeriodWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeCurrentOverloadWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeDcCurrentDivisorWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeDcCurrentMaxWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeDcCurrentMinWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeDcCurrentMultiplierWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeDcCurrentWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeDcPowerDivisorWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeDcPowerMaxWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeDcPowerMinWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeDcPowerMultiplierWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeDcPowerWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeDcVoltageDivisorWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeDcVoltageMaxWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeDcVoltageMinWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeDcVoltageMultiplierWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeDcVoltageWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeHarmonicCurrentMultiplierWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeInstantaneousActiveCurrentWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeInstantaneousLineCurrentWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeInstantaneousPowerWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeInstantaneousReactiveCurrentWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeInstantaneousVoltageWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeLineCurrentPhaseBWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeLineCurrentPhaseCWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeMeasured11thHarmonicCurrentWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeMeasured1stHarmonicCurrentWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeMeasured3rdHarmonicCurrentWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeMeasured5thHarmonicCurrentWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeMeasured7thHarmonicCurrentWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeMeasured9thHarmonicCurrentWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeMeasuredPhase11thHarmonicCurrentWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeMeasuredPhase1stHarmonicCurrentWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeMeasuredPhase3rdHarmonicCurrentWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeMeasuredPhase5thHarmonicCurrentWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeMeasuredPhase7thHarmonicCurrentWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeMeasuredPhase9thHarmonicCurrentWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeMeasurementTypeWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeNeutralCurrentWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeOverloadAlarmsMaskWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributePhaseHarmonicCurrentMultiplierWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributePowerDivisorWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributePowerFactorPhaseBWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributePowerFactorPhaseCWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributePowerFactorWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributePowerMultiplierWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeReactiveCurrentPhaseBWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeReactiveCurrentPhaseCWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeReactivePowerPhaseBWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeReactivePowerPhaseCWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeReactivePowerWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRmsCurrentMaxPhaseBWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRmsCurrentMaxPhaseCWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRmsCurrentMaxWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRmsCurrentMinPhaseBWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRmsCurrentMinPhaseCWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRmsCurrentMinWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRmsCurrentPhaseBWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRmsCurrentPhaseCWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRmsCurrentWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRmsExtremeOverVoltagePeriodPhaseBWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRmsExtremeOverVoltagePeriodPhaseCWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRmsExtremeOverVoltagePeriodWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRmsExtremeOverVoltageWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRmsExtremeUnderVoltagePeriodPhaseBWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRmsExtremeUnderVoltagePeriodPhaseCWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRmsExtremeUnderVoltagePeriodWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRmsExtremeUnderVoltageWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRmsVoltageMaxPhaseBWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRmsVoltageMaxPhaseCWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRmsVoltageMaxWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRmsVoltageMinPhaseBWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRmsVoltageMinPhaseCWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRmsVoltageMinWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRmsVoltagePhaseBWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRmsVoltagePhaseCWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRmsVoltageSagPeriodPhaseBWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRmsVoltageSagPeriodPhaseCWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRmsVoltageSagPeriodWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRmsVoltageSagWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRmsVoltageSwellPeriodPhaseBWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRmsVoltageSwellPeriodPhaseCWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRmsVoltageSwellPeriodWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRmsVoltageSwellWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRmsVoltageWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeTotalActivePowerWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeTotalApparentPowerWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeTotalReactivePowerWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeVoltageOverloadWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAcActivePowerOverloadWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAcCurrentDivisorWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAcCurrentMultiplierWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAcCurrentOverloadWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAcFrequencyDivisorWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAcFrequencyMaxWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAcFrequencyMinWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAcFrequencyMultiplierWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAcFrequencyWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAcOverloadAlarmsMaskWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAcPowerDivisorWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAcPowerMultiplierWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAcReactivePowerOverloadWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAcVoltageDivisorWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAcVoltageMultiplierWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAcVoltageOverloadWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeActiveCurrentPhaseBWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeActiveCurrentPhaseCWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeActivePowerMaxPhaseBWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeActivePowerMaxPhaseCWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeActivePowerMaxWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeActivePowerMinPhaseBWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeActivePowerMinPhaseCWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeActivePowerMinWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeActivePowerPhaseBWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeActivePowerPhaseCWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeActivePowerWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeApparentPowerPhaseBWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeApparentPowerPhaseCWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeApparentPowerWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAverageRmsOverVoltageCounterPhaseBWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAverageRmsOverVoltageCounterPhaseCWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAverageRmsOverVoltageWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAverageRmsUnderVoltageCounterPhaseBWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAverageRmsUnderVoltageCounterPhaseCWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAverageRmsUnderVoltageCounterWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAverageRmsUnderVoltageWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAverageRmsVoltageMeasurementPeriodPhaseBWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAverageRmsVoltageMeasurementPeriodPhaseCWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAverageRmsVoltageMeasurementPeriodWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeCurrentOverloadWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeDcCurrentDivisorWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeDcCurrentMaxWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeDcCurrentMinWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeDcCurrentMultiplierWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeDcCurrentWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeDcPowerDivisorWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeDcPowerMaxWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeDcPowerMinWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeDcPowerMultiplierWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeDcPowerWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeDcVoltageDivisorWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeDcVoltageMaxWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeDcVoltageMinWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeDcVoltageMultiplierWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeDcVoltageWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeHarmonicCurrentMultiplierWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeInstantaneousActiveCurrentWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeInstantaneousLineCurrentWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeInstantaneousPowerWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeInstantaneousReactiveCurrentWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeInstantaneousVoltageWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeLineCurrentPhaseBWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeLineCurrentPhaseCWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeMeasured11thHarmonicCurrentWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeMeasured1stHarmonicCurrentWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeMeasured3rdHarmonicCurrentWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeMeasured5thHarmonicCurrentWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeMeasured7thHarmonicCurrentWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeMeasured9thHarmonicCurrentWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeMeasuredPhase11thHarmonicCurrentWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeMeasuredPhase1stHarmonicCurrentWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeMeasuredPhase3rdHarmonicCurrentWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeMeasuredPhase5thHarmonicCurrentWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeMeasuredPhase7thHarmonicCurrentWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeMeasuredPhase9thHarmonicCurrentWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeMeasurementTypeWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeNeutralCurrentWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeOverloadAlarmsMaskWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributePhaseHarmonicCurrentMultiplierWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributePowerDivisorWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributePowerFactorPhaseBWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributePowerFactorPhaseCWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributePowerFactorWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributePowerMultiplierWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeReactiveCurrentPhaseBWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeReactiveCurrentPhaseCWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeReactivePowerPhaseBWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeReactivePowerPhaseCWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeReactivePowerWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRmsCurrentMaxPhaseBWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRmsCurrentMaxPhaseCWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRmsCurrentMaxWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRmsCurrentMinPhaseBWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRmsCurrentMinPhaseCWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRmsCurrentMinWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRmsCurrentPhaseBWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRmsCurrentPhaseCWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRmsCurrentWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRmsExtremeOverVoltagePeriodPhaseBWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRmsExtremeOverVoltagePeriodPhaseCWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRmsExtremeOverVoltagePeriodWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRmsExtremeOverVoltageWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRmsExtremeUnderVoltagePeriodPhaseBWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRmsExtremeUnderVoltagePeriodPhaseCWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRmsExtremeUnderVoltagePeriodWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRmsExtremeUnderVoltageWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRmsVoltageMaxPhaseBWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRmsVoltageMaxPhaseCWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRmsVoltageMaxWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRmsVoltageMinPhaseBWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRmsVoltageMinPhaseCWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRmsVoltageMinWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRmsVoltagePhaseBWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRmsVoltagePhaseCWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRmsVoltageSagPeriodPhaseBWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRmsVoltageSagPeriodPhaseCWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRmsVoltageSagPeriodWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRmsVoltageSagWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRmsVoltageSwellPeriodPhaseBWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRmsVoltageSwellPeriodPhaseCWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRmsVoltageSwellPeriodWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRmsVoltageSwellWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRmsVoltageWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeTotalActivePowerWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeTotalApparentPowerWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeTotalReactivePowerWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeVoltageOverloadWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	writeAttributeAcOverloadAlarmsMaskWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeAcOverloadAlarmsMaskWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeAverageRmsUnderVoltageCounterWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeAverageRmsUnderVoltageCounterWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeAverageRmsVoltageMeasurementPeriodWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeAverageRmsVoltageMeasurementPeriodWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeOverloadAlarmsMaskWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeOverloadAlarmsMaskWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeRmsExtremeOverVoltagePeriodWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeRmsExtremeOverVoltagePeriodWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeRmsExtremeUnderVoltagePeriodWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeRmsExtremeUnderVoltagePeriodWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeRmsVoltageSagPeriodWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeRmsVoltageSagPeriodWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeRmsVoltageSwellPeriodWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeRmsVoltageSwellPeriodWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;
}

declare class MTRBaseClusterEthernetNetworkDiagnostics extends MTRCluster {

	static alloc(): MTRBaseClusterEthernetNetworkDiagnostics; // inherited from NSObject

	static new(): MTRBaseClusterEthernetNetworkDiagnostics; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeCarrierDetectWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeCollisionCountWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFullDuplexWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeOverrunCountWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributePHYRateWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributePacketRxCountWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributePacketTxCountWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeTimeSinceResetWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeTxErrCountWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeCarrierDetectWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeCollisionCountWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFullDuplexWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeOverrunCountWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributePHYRateWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributePacketRxCountWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributePacketTxCountWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeTimeSinceResetWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeTxErrCountWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	resetCountsWithCompletionHandler(completionHandler: (p1: NSError) => void): void;

	resetCountsWithParamsCompletionHandler(params: MTREthernetNetworkDiagnosticsClusterResetCountsParams, completionHandler: (p1: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeCarrierDetectWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeCollisionCountWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFullDuplexWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeOverrunCountWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributePHYRateWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributePacketRxCountWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributePacketTxCountWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeTimeSinceResetWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeTxErrCountWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;
}

declare class MTRBaseClusterFanControl extends MTRCluster {

	static alloc(): MTRBaseClusterFanControl; // inherited from NSObject

	static new(): MTRBaseClusterFanControl; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFanModeSequenceWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFanModeWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributePercentCurrentWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributePercentSettingWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRockSettingWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRockSupportWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeSpeedCurrentWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeSpeedMaxWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeSpeedSettingWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeWindSettingWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeWindSupportWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFanModeSequenceWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFanModeWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributePercentCurrentWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributePercentSettingWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRockSettingWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRockSupportWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeSpeedCurrentWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeSpeedMaxWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeSpeedSettingWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeWindSettingWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeWindSupportWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFanModeSequenceWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFanModeWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributePercentCurrentWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributePercentSettingWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRockSettingWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRockSupportWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeSpeedCurrentWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeSpeedMaxWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeSpeedSettingWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeWindSettingWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeWindSupportWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	writeAttributeFanModeSequenceWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeFanModeSequenceWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeFanModeWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeFanModeWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributePercentSettingWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributePercentSettingWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeRockSettingWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeRockSettingWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeSpeedSettingWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeSpeedSettingWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeWindSettingWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeWindSettingWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;
}

declare class MTRBaseClusterFixedLabel extends MTRCluster {

	static alloc(): MTRBaseClusterFixedLabel; // inherited from NSObject

	static new(): MTRBaseClusterFixedLabel; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeLabelListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeLabelListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeLabelListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;
}

declare class MTRBaseClusterFlowMeasurement extends MTRCluster {

	static alloc(): MTRBaseClusterFlowMeasurement; // inherited from NSObject

	static new(): MTRBaseClusterFlowMeasurement; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeMaxMeasuredValueWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeMeasuredValueWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeMinMeasuredValueWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeToleranceWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeMaxMeasuredValueWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeMeasuredValueWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeMinMeasuredValueWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeToleranceWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeMaxMeasuredValueWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeMeasuredValueWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeMinMeasuredValueWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeToleranceWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;
}

declare class MTRBaseClusterGeneralCommissioning extends MTRCluster {

	static alloc(): MTRBaseClusterGeneralCommissioning; // inherited from NSObject

	static new(): MTRBaseClusterGeneralCommissioning; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeBasicCommissioningInfoWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: MTRGeneralCommissioningClusterBasicCommissioningInfo, p2: NSError) => void): void;

	static readAttributeBreadcrumbWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeLocationCapabilityWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRegulatoryConfigWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeSupportsConcurrentConnectionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	armFailSafeWithParamsCompletionHandler(params: MTRGeneralCommissioningClusterArmFailSafeParams, completionHandler: (p1: MTRGeneralCommissioningClusterArmFailSafeResponseParams, p2: NSError) => void): void;

	commissioningCompleteWithCompletionHandler(completionHandler: (p1: MTRGeneralCommissioningClusterCommissioningCompleteResponseParams, p2: NSError) => void): void;

	commissioningCompleteWithParamsCompletionHandler(params: MTRGeneralCommissioningClusterCommissioningCompleteParams, completionHandler: (p1: MTRGeneralCommissioningClusterCommissioningCompleteResponseParams, p2: NSError) => void): void;

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeBasicCommissioningInfoWithCompletionHandler(completionHandler: (p1: MTRGeneralCommissioningClusterBasicCommissioningInfo, p2: NSError) => void): void;

	readAttributeBreadcrumbWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeLocationCapabilityWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRegulatoryConfigWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeSupportsConcurrentConnectionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	setRegulatoryConfigWithParamsCompletionHandler(params: MTRGeneralCommissioningClusterSetRegulatoryConfigParams, completionHandler: (p1: MTRGeneralCommissioningClusterSetRegulatoryConfigResponseParams, p2: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeBasicCommissioningInfoWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: MTRGeneralCommissioningClusterBasicCommissioningInfo, p2: NSError) => void): void;

	subscribeAttributeBreadcrumbWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeLocationCapabilityWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRegulatoryConfigWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeSupportsConcurrentConnectionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	writeAttributeBreadcrumbWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeBreadcrumbWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;
}

declare class MTRBaseClusterGeneralDiagnostics extends MTRCluster {

	static alloc(): MTRBaseClusterGeneralDiagnostics; // inherited from NSObject

	static new(): MTRBaseClusterGeneralDiagnostics; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeActiveHardwareFaultsWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeActiveNetworkFaultsWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeActiveRadioFaultsWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeBootReasonsWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeNetworkInterfacesWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeRebootCountWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeTestEventTriggersEnabledWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeTotalOperationalHoursWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeUpTimeWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeActiveHardwareFaultsWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeActiveNetworkFaultsWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeActiveRadioFaultsWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeBootReasonsWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeNetworkInterfacesWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeRebootCountWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeTestEventTriggersEnabledWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeTotalOperationalHoursWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeUpTimeWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeActiveHardwareFaultsWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeActiveNetworkFaultsWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeActiveRadioFaultsWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeBootReasonsWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeNetworkInterfacesWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeRebootCountWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeTestEventTriggersEnabledWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeTotalOperationalHoursWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeUpTimeWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	testEventTriggerWithParamsCompletionHandler(params: MTRGeneralDiagnosticsClusterTestEventTriggerParams, completionHandler: (p1: NSError) => void): void;
}

declare class MTRBaseClusterGroupKeyManagement extends MTRCluster {

	static alloc(): MTRBaseClusterGroupKeyManagement; // inherited from NSObject

	static new(): MTRBaseClusterGroupKeyManagement; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeGroupKeyMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeGroupTableWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeMaxGroupKeysPerFabricWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeMaxGroupsPerFabricWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	keySetReadAllIndicesWithParamsCompletionHandler(params: MTRGroupKeyManagementClusterKeySetReadAllIndicesParams, completionHandler: (p1: MTRGroupKeyManagementClusterKeySetReadAllIndicesResponseParams, p2: NSError) => void): void;

	keySetReadWithParamsCompletionHandler(params: MTRGroupKeyManagementClusterKeySetReadParams, completionHandler: (p1: MTRGroupKeyManagementClusterKeySetReadResponseParams, p2: NSError) => void): void;

	keySetRemoveWithParamsCompletionHandler(params: MTRGroupKeyManagementClusterKeySetRemoveParams, completionHandler: (p1: NSError) => void): void;

	keySetWriteWithParamsCompletionHandler(params: MTRGroupKeyManagementClusterKeySetWriteParams, completionHandler: (p1: NSError) => void): void;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeGroupKeyMapWithParamsCompletionHandler(params: MTRReadParams, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeGroupTableWithParamsCompletionHandler(params: MTRReadParams, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeMaxGroupKeysPerFabricWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeMaxGroupsPerFabricWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeGroupKeyMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeGroupTableWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeMaxGroupKeysPerFabricWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeMaxGroupsPerFabricWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	writeAttributeGroupKeyMapWithValueCompletionHandler(value: NSArray<any> | any[], completionHandler: (p1: NSError) => void): void;

	writeAttributeGroupKeyMapWithValueParamsCompletionHandler(value: NSArray<any> | any[], params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;
}

declare class MTRBaseClusterGroups extends MTRCluster {

	static alloc(): MTRBaseClusterGroups; // inherited from NSObject

	static new(): MTRBaseClusterGroups; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeNameSupportWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	addGroupIfIdentifyingWithParamsCompletionHandler(params: MTRGroupsClusterAddGroupIfIdentifyingParams, completionHandler: (p1: NSError) => void): void;

	addGroupWithParamsCompletionHandler(params: MTRGroupsClusterAddGroupParams, completionHandler: (p1: MTRGroupsClusterAddGroupResponseParams, p2: NSError) => void): void;

	getGroupMembershipWithParamsCompletionHandler(params: MTRGroupsClusterGetGroupMembershipParams, completionHandler: (p1: MTRGroupsClusterGetGroupMembershipResponseParams, p2: NSError) => void): void;

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeNameSupportWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	removeAllGroupsWithCompletionHandler(completionHandler: (p1: NSError) => void): void;

	removeAllGroupsWithParamsCompletionHandler(params: MTRGroupsClusterRemoveAllGroupsParams, completionHandler: (p1: NSError) => void): void;

	removeGroupWithParamsCompletionHandler(params: MTRGroupsClusterRemoveGroupParams, completionHandler: (p1: MTRGroupsClusterRemoveGroupResponseParams, p2: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeNameSupportWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	viewGroupWithParamsCompletionHandler(params: MTRGroupsClusterViewGroupParams, completionHandler: (p1: MTRGroupsClusterViewGroupResponseParams, p2: NSError) => void): void;
}

declare class MTRBaseClusterIdentify extends MTRCluster {

	static alloc(): MTRBaseClusterIdentify; // inherited from NSObject

	static new(): MTRBaseClusterIdentify; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeIdentifyTimeWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeIdentifyTypeWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	identifyWithParamsCompletionHandler(params: MTRIdentifyClusterIdentifyParams, completionHandler: (p1: NSError) => void): void;

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeIdentifyTimeWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeIdentifyTypeWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeIdentifyTimeWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeIdentifyTypeWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	triggerEffectWithParamsCompletionHandler(params: MTRIdentifyClusterTriggerEffectParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeIdentifyTimeWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeIdentifyTimeWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;
}

declare class MTRBaseClusterIlluminanceMeasurement extends MTRCluster {

	static alloc(): MTRBaseClusterIlluminanceMeasurement; // inherited from NSObject

	static new(): MTRBaseClusterIlluminanceMeasurement; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeLightSensorTypeWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeMaxMeasuredValueWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeMeasuredValueWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeMinMeasuredValueWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeToleranceWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeLightSensorTypeWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeMaxMeasuredValueWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeMeasuredValueWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeMinMeasuredValueWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeToleranceWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeLightSensorTypeWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeMaxMeasuredValueWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeMeasuredValueWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeMinMeasuredValueWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeToleranceWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;
}

declare class MTRBaseClusterKeypadInput extends MTRCluster {

	static alloc(): MTRBaseClusterKeypadInput; // inherited from NSObject

	static new(): MTRBaseClusterKeypadInput; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	sendKeyWithParamsCompletionHandler(params: MTRKeypadInputClusterSendKeyParams, completionHandler: (p1: MTRKeypadInputClusterSendKeyResponseParams, p2: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;
}

declare class MTRBaseClusterLevelControl extends MTRCluster {

	static alloc(): MTRBaseClusterLevelControl; // inherited from NSObject

	static new(): MTRBaseClusterLevelControl; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeCurrentFrequencyWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeCurrentLevelWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeDefaultMoveRateWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeMaxFrequencyWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeMaxLevelWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeMinFrequencyWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeMinLevelWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeOffTransitionTimeWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeOnLevelWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeOnOffTransitionTimeWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeOnTransitionTimeWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeOptionsWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRemainingTimeWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeStartUpCurrentLevelWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	moveToClosestFrequencyWithParamsCompletionHandler(params: MTRLevelControlClusterMoveToClosestFrequencyParams, completionHandler: (p1: NSError) => void): void;

	moveToLevelWithOnOffWithParamsCompletionHandler(params: MTRLevelControlClusterMoveToLevelWithOnOffParams, completionHandler: (p1: NSError) => void): void;

	moveToLevelWithParamsCompletionHandler(params: MTRLevelControlClusterMoveToLevelParams, completionHandler: (p1: NSError) => void): void;

	moveWithOnOffWithParamsCompletionHandler(params: MTRLevelControlClusterMoveWithOnOffParams, completionHandler: (p1: NSError) => void): void;

	moveWithParamsCompletionHandler(params: MTRLevelControlClusterMoveParams, completionHandler: (p1: NSError) => void): void;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeCurrentFrequencyWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeCurrentLevelWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeDefaultMoveRateWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeMaxFrequencyWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeMaxLevelWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeMinFrequencyWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeMinLevelWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeOffTransitionTimeWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeOnLevelWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeOnOffTransitionTimeWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeOnTransitionTimeWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeOptionsWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRemainingTimeWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeStartUpCurrentLevelWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	stepWithOnOffWithParamsCompletionHandler(params: MTRLevelControlClusterStepWithOnOffParams, completionHandler: (p1: NSError) => void): void;

	stepWithParamsCompletionHandler(params: MTRLevelControlClusterStepParams, completionHandler: (p1: NSError) => void): void;

	stopWithOnOffWithParamsCompletionHandler(params: MTRLevelControlClusterStopWithOnOffParams, completionHandler: (p1: NSError) => void): void;

	stopWithParamsCompletionHandler(params: MTRLevelControlClusterStopParams, completionHandler: (p1: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeCurrentFrequencyWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeCurrentLevelWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeDefaultMoveRateWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeMaxFrequencyWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeMaxLevelWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeMinFrequencyWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeMinLevelWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeOffTransitionTimeWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeOnLevelWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeOnOffTransitionTimeWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeOnTransitionTimeWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeOptionsWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRemainingTimeWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeStartUpCurrentLevelWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	writeAttributeDefaultMoveRateWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeDefaultMoveRateWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeOffTransitionTimeWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeOffTransitionTimeWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeOnLevelWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeOnLevelWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeOnOffTransitionTimeWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeOnOffTransitionTimeWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeOnTransitionTimeWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeOnTransitionTimeWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeOptionsWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeOptionsWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeStartUpCurrentLevelWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeStartUpCurrentLevelWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;
}

declare class MTRBaseClusterLocalizationConfiguration extends MTRCluster {

	static alloc(): MTRBaseClusterLocalizationConfiguration; // inherited from NSObject

	static new(): MTRBaseClusterLocalizationConfiguration; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeActiveLocaleWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: string, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeSupportedLocalesWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeActiveLocaleWithCompletionHandler(completionHandler: (p1: string, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeSupportedLocalesWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeActiveLocaleWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: string, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeSupportedLocalesWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	writeAttributeActiveLocaleWithValueCompletionHandler(value: string, completionHandler: (p1: NSError) => void): void;

	writeAttributeActiveLocaleWithValueParamsCompletionHandler(value: string, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;
}

declare class MTRBaseClusterLowPower extends MTRCluster {

	static alloc(): MTRBaseClusterLowPower; // inherited from NSObject

	static new(): MTRBaseClusterLowPower; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	sleepWithCompletionHandler(completionHandler: (p1: NSError) => void): void;

	sleepWithParamsCompletionHandler(params: MTRLowPowerClusterSleepParams, completionHandler: (p1: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;
}

declare class MTRBaseClusterMediaInput extends MTRCluster {

	static alloc(): MTRBaseClusterMediaInput; // inherited from NSObject

	static new(): MTRBaseClusterMediaInput; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeCurrentInputWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeInputListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	hideInputStatusWithCompletionHandler(completionHandler: (p1: NSError) => void): void;

	hideInputStatusWithParamsCompletionHandler(params: MTRMediaInputClusterHideInputStatusParams, completionHandler: (p1: NSError) => void): void;

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeCurrentInputWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeInputListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	renameInputWithParamsCompletionHandler(params: MTRMediaInputClusterRenameInputParams, completionHandler: (p1: NSError) => void): void;

	selectInputWithParamsCompletionHandler(params: MTRMediaInputClusterSelectInputParams, completionHandler: (p1: NSError) => void): void;

	showInputStatusWithCompletionHandler(completionHandler: (p1: NSError) => void): void;

	showInputStatusWithParamsCompletionHandler(params: MTRMediaInputClusterShowInputStatusParams, completionHandler: (p1: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeCurrentInputWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeInputListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;
}

declare class MTRBaseClusterMediaPlayback extends MTRCluster {

	static alloc(): MTRBaseClusterMediaPlayback; // inherited from NSObject

	static new(): MTRBaseClusterMediaPlayback; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeCurrentStateWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeDurationWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributePlaybackSpeedWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeSampledPositionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: MTRMediaPlaybackClusterPlaybackPosition, p2: NSError) => void): void;

	static readAttributeSeekRangeEndWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeSeekRangeStartWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeStartTimeWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	fastForwardWithCompletionHandler(completionHandler: (p1: MTRMediaPlaybackClusterPlaybackResponseParams, p2: NSError) => void): void;

	fastForwardWithParamsCompletionHandler(params: MTRMediaPlaybackClusterFastForwardParams, completionHandler: (p1: MTRMediaPlaybackClusterPlaybackResponseParams, p2: NSError) => void): void;

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	nextWithCompletionHandler(completionHandler: (p1: MTRMediaPlaybackClusterPlaybackResponseParams, p2: NSError) => void): void;

	nextWithParamsCompletionHandler(params: MTRMediaPlaybackClusterNextParams, completionHandler: (p1: MTRMediaPlaybackClusterPlaybackResponseParams, p2: NSError) => void): void;

	pauseWithCompletionHandler(completionHandler: (p1: MTRMediaPlaybackClusterPlaybackResponseParams, p2: NSError) => void): void;

	pauseWithParamsCompletionHandler(params: MTRMediaPlaybackClusterPauseParams, completionHandler: (p1: MTRMediaPlaybackClusterPlaybackResponseParams, p2: NSError) => void): void;

	playWithCompletionHandler(completionHandler: (p1: MTRMediaPlaybackClusterPlaybackResponseParams, p2: NSError) => void): void;

	playWithParamsCompletionHandler(params: MTRMediaPlaybackClusterPlayParams, completionHandler: (p1: MTRMediaPlaybackClusterPlaybackResponseParams, p2: NSError) => void): void;

	previousWithCompletionHandler(completionHandler: (p1: MTRMediaPlaybackClusterPlaybackResponseParams, p2: NSError) => void): void;

	previousWithParamsCompletionHandler(params: MTRMediaPlaybackClusterPreviousParams, completionHandler: (p1: MTRMediaPlaybackClusterPlaybackResponseParams, p2: NSError) => void): void;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeCurrentStateWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeDurationWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributePlaybackSpeedWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeSampledPositionWithCompletionHandler(completionHandler: (p1: MTRMediaPlaybackClusterPlaybackPosition, p2: NSError) => void): void;

	readAttributeSeekRangeEndWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeSeekRangeStartWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeStartTimeWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	rewindWithCompletionHandler(completionHandler: (p1: MTRMediaPlaybackClusterPlaybackResponseParams, p2: NSError) => void): void;

	rewindWithParamsCompletionHandler(params: MTRMediaPlaybackClusterRewindParams, completionHandler: (p1: MTRMediaPlaybackClusterPlaybackResponseParams, p2: NSError) => void): void;

	seekWithParamsCompletionHandler(params: MTRMediaPlaybackClusterSeekParams, completionHandler: (p1: MTRMediaPlaybackClusterPlaybackResponseParams, p2: NSError) => void): void;

	skipBackwardWithParamsCompletionHandler(params: MTRMediaPlaybackClusterSkipBackwardParams, completionHandler: (p1: MTRMediaPlaybackClusterPlaybackResponseParams, p2: NSError) => void): void;

	skipForwardWithParamsCompletionHandler(params: MTRMediaPlaybackClusterSkipForwardParams, completionHandler: (p1: MTRMediaPlaybackClusterPlaybackResponseParams, p2: NSError) => void): void;

	startOverWithCompletionHandler(completionHandler: (p1: MTRMediaPlaybackClusterPlaybackResponseParams, p2: NSError) => void): void;

	startOverWithParamsCompletionHandler(params: MTRMediaPlaybackClusterStartOverParams, completionHandler: (p1: MTRMediaPlaybackClusterPlaybackResponseParams, p2: NSError) => void): void;

	stopPlaybackWithCompletionHandler(completionHandler: (p1: MTRMediaPlaybackClusterPlaybackResponseParams, p2: NSError) => void): void;

	stopPlaybackWithParamsCompletionHandler(params: MTRMediaPlaybackClusterStopPlaybackParams, completionHandler: (p1: MTRMediaPlaybackClusterPlaybackResponseParams, p2: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeCurrentStateWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeDurationWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributePlaybackSpeedWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeSampledPositionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: MTRMediaPlaybackClusterPlaybackPosition, p2: NSError) => void): void;

	subscribeAttributeSeekRangeEndWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeSeekRangeStartWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeStartTimeWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;
}

declare class MTRBaseClusterModeSelect extends MTRCluster {

	static alloc(): MTRBaseClusterModeSelect; // inherited from NSObject

	static new(): MTRBaseClusterModeSelect; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeCurrentModeWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeDescriptionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: string, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeOnModeWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeStandardNamespaceWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeStartUpModeWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeSupportedModesWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	changeToModeWithParamsCompletionHandler(params: MTRModeSelectClusterChangeToModeParams, completionHandler: (p1: NSError) => void): void;

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeCurrentModeWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeDescriptionWithCompletionHandler(completionHandler: (p1: string, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeOnModeWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeStandardNamespaceWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeStartUpModeWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeSupportedModesWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeCurrentModeWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeDescriptionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: string, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeOnModeWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeStandardNamespaceWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeStartUpModeWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeSupportedModesWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	writeAttributeOnModeWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeOnModeWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeStartUpModeWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeStartUpModeWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;
}

declare class MTRBaseClusterNetworkCommissioning extends MTRCluster {

	static alloc(): MTRBaseClusterNetworkCommissioning; // inherited from NSObject

	static new(): MTRBaseClusterNetworkCommissioning; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeConnectMaxTimeSecondsWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeInterfaceEnabledWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeLastConnectErrorValueWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeLastNetworkIDWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSData, p2: NSError) => void): void;

	static readAttributeLastNetworkingStatusWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeMaxNetworksWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeNetworksWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeScanMaxTimeSecondsWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	addOrUpdateThreadNetworkWithParamsCompletionHandler(params: MTRNetworkCommissioningClusterAddOrUpdateThreadNetworkParams, completionHandler: (p1: MTRNetworkCommissioningClusterNetworkConfigResponseParams, p2: NSError) => void): void;

	addOrUpdateWiFiNetworkWithParamsCompletionHandler(params: MTRNetworkCommissioningClusterAddOrUpdateWiFiNetworkParams, completionHandler: (p1: MTRNetworkCommissioningClusterNetworkConfigResponseParams, p2: NSError) => void): void;

	connectNetworkWithParamsCompletionHandler(params: MTRNetworkCommissioningClusterConnectNetworkParams, completionHandler: (p1: MTRNetworkCommissioningClusterConnectNetworkResponseParams, p2: NSError) => void): void;

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeConnectMaxTimeSecondsWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeInterfaceEnabledWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeLastConnectErrorValueWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeLastNetworkIDWithCompletionHandler(completionHandler: (p1: NSData, p2: NSError) => void): void;

	readAttributeLastNetworkingStatusWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeMaxNetworksWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeNetworksWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeScanMaxTimeSecondsWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	removeNetworkWithParamsCompletionHandler(params: MTRNetworkCommissioningClusterRemoveNetworkParams, completionHandler: (p1: MTRNetworkCommissioningClusterNetworkConfigResponseParams, p2: NSError) => void): void;

	reorderNetworkWithParamsCompletionHandler(params: MTRNetworkCommissioningClusterReorderNetworkParams, completionHandler: (p1: MTRNetworkCommissioningClusterNetworkConfigResponseParams, p2: NSError) => void): void;

	scanNetworksWithParamsCompletionHandler(params: MTRNetworkCommissioningClusterScanNetworksParams, completionHandler: (p1: MTRNetworkCommissioningClusterScanNetworksResponseParams, p2: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeConnectMaxTimeSecondsWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeInterfaceEnabledWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeLastConnectErrorValueWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeLastNetworkIDWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSData, p2: NSError) => void): void;

	subscribeAttributeLastNetworkingStatusWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeMaxNetworksWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeNetworksWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeScanMaxTimeSecondsWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	writeAttributeInterfaceEnabledWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeInterfaceEnabledWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;
}

declare class MTRBaseClusterOccupancySensing extends MTRCluster {

	static alloc(): MTRBaseClusterOccupancySensing; // inherited from NSObject

	static new(): MTRBaseClusterOccupancySensing; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeOccupancySensorTypeBitmapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeOccupancySensorTypeWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeOccupancyWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributePhysicalContactOccupiedToUnoccupiedDelayWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributePhysicalContactUnoccupiedToOccupiedDelayWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributePhysicalContactUnoccupiedToOccupiedThresholdWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributePirOccupiedToUnoccupiedDelayWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributePirUnoccupiedToOccupiedDelayWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributePirUnoccupiedToOccupiedThresholdWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeUltrasonicOccupiedToUnoccupiedDelayWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeUltrasonicUnoccupiedToOccupiedDelayWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeUltrasonicUnoccupiedToOccupiedThresholdWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeOccupancySensorTypeBitmapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeOccupancySensorTypeWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeOccupancyWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributePhysicalContactOccupiedToUnoccupiedDelayWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributePhysicalContactUnoccupiedToOccupiedDelayWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributePhysicalContactUnoccupiedToOccupiedThresholdWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributePirOccupiedToUnoccupiedDelayWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributePirUnoccupiedToOccupiedDelayWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributePirUnoccupiedToOccupiedThresholdWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeUltrasonicOccupiedToUnoccupiedDelayWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeUltrasonicUnoccupiedToOccupiedDelayWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeUltrasonicUnoccupiedToOccupiedThresholdWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeOccupancySensorTypeBitmapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeOccupancySensorTypeWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeOccupancyWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributePhysicalContactOccupiedToUnoccupiedDelayWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributePhysicalContactUnoccupiedToOccupiedDelayWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributePhysicalContactUnoccupiedToOccupiedThresholdWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributePirOccupiedToUnoccupiedDelayWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributePirUnoccupiedToOccupiedDelayWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributePirUnoccupiedToOccupiedThresholdWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeUltrasonicOccupiedToUnoccupiedDelayWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeUltrasonicUnoccupiedToOccupiedDelayWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeUltrasonicUnoccupiedToOccupiedThresholdWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	writeAttributePhysicalContactOccupiedToUnoccupiedDelayWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributePhysicalContactOccupiedToUnoccupiedDelayWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributePhysicalContactUnoccupiedToOccupiedDelayWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributePhysicalContactUnoccupiedToOccupiedDelayWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributePhysicalContactUnoccupiedToOccupiedThresholdWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributePhysicalContactUnoccupiedToOccupiedThresholdWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributePirOccupiedToUnoccupiedDelayWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributePirOccupiedToUnoccupiedDelayWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributePirUnoccupiedToOccupiedDelayWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributePirUnoccupiedToOccupiedDelayWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributePirUnoccupiedToOccupiedThresholdWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributePirUnoccupiedToOccupiedThresholdWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeUltrasonicOccupiedToUnoccupiedDelayWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeUltrasonicOccupiedToUnoccupiedDelayWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeUltrasonicUnoccupiedToOccupiedDelayWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeUltrasonicUnoccupiedToOccupiedDelayWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeUltrasonicUnoccupiedToOccupiedThresholdWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeUltrasonicUnoccupiedToOccupiedThresholdWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;
}

declare class MTRBaseClusterOnOff extends MTRCluster {

	static alloc(): MTRBaseClusterOnOff; // inherited from NSObject

	static new(): MTRBaseClusterOnOff; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeGlobalSceneControlWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeOffWaitTimeWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeOnOffWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeOnTimeWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeStartUpOnOffWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	offWithCompletionHandler(completionHandler: (p1: NSError) => void): void;

	offWithEffectWithParamsCompletionHandler(params: MTROnOffClusterOffWithEffectParams, completionHandler: (p1: NSError) => void): void;

	offWithParamsCompletionHandler(params: MTROnOffClusterOffParams, completionHandler: (p1: NSError) => void): void;

	onWithCompletionHandler(completionHandler: (p1: NSError) => void): void;

	onWithParamsCompletionHandler(params: MTROnOffClusterOnParams, completionHandler: (p1: NSError) => void): void;

	onWithRecallGlobalSceneWithCompletionHandler(completionHandler: (p1: NSError) => void): void;

	onWithRecallGlobalSceneWithParamsCompletionHandler(params: MTROnOffClusterOnWithRecallGlobalSceneParams, completionHandler: (p1: NSError) => void): void;

	onWithTimedOffWithParamsCompletionHandler(params: MTROnOffClusterOnWithTimedOffParams, completionHandler: (p1: NSError) => void): void;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeGlobalSceneControlWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeOffWaitTimeWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeOnOffWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeOnTimeWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeStartUpOnOffWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeGlobalSceneControlWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeOffWaitTimeWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeOnOffWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeOnTimeWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeStartUpOnOffWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	toggleWithCompletionHandler(completionHandler: (p1: NSError) => void): void;

	toggleWithParamsCompletionHandler(params: MTROnOffClusterToggleParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeOffWaitTimeWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeOffWaitTimeWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeOnTimeWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeOnTimeWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeStartUpOnOffWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeStartUpOnOffWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;
}

declare class MTRBaseClusterOnOffSwitchConfiguration extends MTRCluster {

	static alloc(): MTRBaseClusterOnOffSwitchConfiguration; // inherited from NSObject

	static new(): MTRBaseClusterOnOffSwitchConfiguration; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeSwitchActionsWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeSwitchTypeWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeSwitchActionsWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeSwitchTypeWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeSwitchActionsWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeSwitchTypeWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	writeAttributeSwitchActionsWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeSwitchActionsWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;
}

declare class MTRBaseClusterOperationalCredentials extends MTRCluster {

	static alloc(): MTRBaseClusterOperationalCredentials; // inherited from NSObject

	static new(): MTRBaseClusterOperationalCredentials; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeCommissionedFabricsWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeCurrentFabricIndexWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFabricsWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeNOCsWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeSupportedFabricsWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeTrustedRootCertificatesWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	CSRRequestWithParamsCompletionHandler(params: MTROperationalCredentialsClusterCSRRequestParams, completionHandler: (p1: MTROperationalCredentialsClusterCSRResponseParams, p2: NSError) => void): void;

	addNOCWithParamsCompletionHandler(params: MTROperationalCredentialsClusterAddNOCParams, completionHandler: (p1: MTROperationalCredentialsClusterNOCResponseParams, p2: NSError) => void): void;

	addTrustedRootCertificateWithParamsCompletionHandler(params: MTROperationalCredentialsClusterAddTrustedRootCertificateParams, completionHandler: (p1: NSError) => void): void;

	attestationRequestWithParamsCompletionHandler(params: MTROperationalCredentialsClusterAttestationRequestParams, completionHandler: (p1: MTROperationalCredentialsClusterAttestationResponseParams, p2: NSError) => void): void;

	certificateChainRequestWithParamsCompletionHandler(params: MTROperationalCredentialsClusterCertificateChainRequestParams, completionHandler: (p1: MTROperationalCredentialsClusterCertificateChainResponseParams, p2: NSError) => void): void;

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeCommissionedFabricsWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeCurrentFabricIndexWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFabricsWithParamsCompletionHandler(params: MTRReadParams, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeNOCsWithParamsCompletionHandler(params: MTRReadParams, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeSupportedFabricsWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeTrustedRootCertificatesWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	removeFabricWithParamsCompletionHandler(params: MTROperationalCredentialsClusterRemoveFabricParams, completionHandler: (p1: MTROperationalCredentialsClusterNOCResponseParams, p2: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeCommissionedFabricsWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeCurrentFabricIndexWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFabricsWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeNOCsWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeSupportedFabricsWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeTrustedRootCertificatesWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	updateFabricLabelWithParamsCompletionHandler(params: MTROperationalCredentialsClusterUpdateFabricLabelParams, completionHandler: (p1: MTROperationalCredentialsClusterNOCResponseParams, p2: NSError) => void): void;

	updateNOCWithParamsCompletionHandler(params: MTROperationalCredentialsClusterUpdateNOCParams, completionHandler: (p1: MTROperationalCredentialsClusterNOCResponseParams, p2: NSError) => void): void;
}

declare class MTRBaseClusterOtaSoftwareUpdateProvider extends MTRCluster {

	static alloc(): MTRBaseClusterOtaSoftwareUpdateProvider; // inherited from NSObject

	static new(): MTRBaseClusterOtaSoftwareUpdateProvider; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	applyUpdateRequestWithParamsCompletionHandler(params: MTROtaSoftwareUpdateProviderClusterApplyUpdateRequestParams, completionHandler: (p1: MTROtaSoftwareUpdateProviderClusterApplyUpdateResponseParams, p2: NSError) => void): void;

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	notifyUpdateAppliedWithParamsCompletionHandler(params: MTROtaSoftwareUpdateProviderClusterNotifyUpdateAppliedParams, completionHandler: (p1: NSError) => void): void;

	queryImageWithParamsCompletionHandler(params: MTROtaSoftwareUpdateProviderClusterQueryImageParams, completionHandler: (p1: MTROtaSoftwareUpdateProviderClusterQueryImageResponseParams, p2: NSError) => void): void;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;
}

declare class MTRBaseClusterOtaSoftwareUpdateRequestor extends MTRCluster {

	static alloc(): MTRBaseClusterOtaSoftwareUpdateRequestor; // inherited from NSObject

	static new(): MTRBaseClusterOtaSoftwareUpdateRequestor; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeDefaultOtaProvidersWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeUpdatePossibleWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeUpdateStateProgressWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeUpdateStateWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	announceOtaProviderWithParamsCompletionHandler(params: MTROtaSoftwareUpdateRequestorClusterAnnounceOtaProviderParams, completionHandler: (p1: NSError) => void): void;

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeDefaultOtaProvidersWithParamsCompletionHandler(params: MTRReadParams, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeUpdatePossibleWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeUpdateStateProgressWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeUpdateStateWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeDefaultOtaProvidersWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeUpdatePossibleWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeUpdateStateProgressWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeUpdateStateWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	writeAttributeDefaultOtaProvidersWithValueCompletionHandler(value: NSArray<any> | any[], completionHandler: (p1: NSError) => void): void;

	writeAttributeDefaultOtaProvidersWithValueParamsCompletionHandler(value: NSArray<any> | any[], params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;
}

declare class MTRBaseClusterPowerSource extends MTRCluster {

	static alloc(): MTRBaseClusterPowerSource; // inherited from NSObject

	static new(): MTRBaseClusterPowerSource; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeActiveBatChargeFaultsWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeActiveBatFaultsWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeActiveWiredFaultsWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeBatANSIDesignationWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: string, p2: NSError) => void): void;

	static readAttributeBatApprovedChemistryWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeBatCapacityWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeBatChargeLevelWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeBatChargeStateWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeBatChargingCurrentWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeBatCommonDesignationWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeBatFunctionalWhileChargingWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeBatIECDesignationWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: string, p2: NSError) => void): void;

	static readAttributeBatPercentRemainingWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeBatPresentWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeBatQuantityWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeBatReplaceabilityWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeBatReplacementDescriptionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: string, p2: NSError) => void): void;

	static readAttributeBatReplacementNeededWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeBatTimeRemainingWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeBatTimeToFullChargeWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeBatVoltageWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeDescriptionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: string, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeOrderWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeStatusWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeWiredAssessedCurrentWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeWiredAssessedInputFrequencyWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeWiredAssessedInputVoltageWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeWiredCurrentTypeWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeWiredMaximumCurrentWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeWiredNominalVoltageWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeWiredPresentWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeActiveBatChargeFaultsWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeActiveBatFaultsWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeActiveWiredFaultsWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeBatANSIDesignationWithCompletionHandler(completionHandler: (p1: string, p2: NSError) => void): void;

	readAttributeBatApprovedChemistryWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeBatCapacityWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeBatChargeLevelWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeBatChargeStateWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeBatChargingCurrentWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeBatCommonDesignationWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeBatFunctionalWhileChargingWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeBatIECDesignationWithCompletionHandler(completionHandler: (p1: string, p2: NSError) => void): void;

	readAttributeBatPercentRemainingWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeBatPresentWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeBatQuantityWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeBatReplaceabilityWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeBatReplacementDescriptionWithCompletionHandler(completionHandler: (p1: string, p2: NSError) => void): void;

	readAttributeBatReplacementNeededWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeBatTimeRemainingWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeBatTimeToFullChargeWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeBatVoltageWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeDescriptionWithCompletionHandler(completionHandler: (p1: string, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeOrderWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeStatusWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeWiredAssessedCurrentWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeWiredAssessedInputFrequencyWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeWiredAssessedInputVoltageWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeWiredCurrentTypeWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeWiredMaximumCurrentWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeWiredNominalVoltageWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeWiredPresentWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeActiveBatChargeFaultsWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeActiveBatFaultsWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeActiveWiredFaultsWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeBatANSIDesignationWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: string, p2: NSError) => void): void;

	subscribeAttributeBatApprovedChemistryWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeBatCapacityWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeBatChargeLevelWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeBatChargeStateWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeBatChargingCurrentWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeBatCommonDesignationWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeBatFunctionalWhileChargingWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeBatIECDesignationWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: string, p2: NSError) => void): void;

	subscribeAttributeBatPercentRemainingWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeBatPresentWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeBatQuantityWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeBatReplaceabilityWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeBatReplacementDescriptionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: string, p2: NSError) => void): void;

	subscribeAttributeBatReplacementNeededWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeBatTimeRemainingWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeBatTimeToFullChargeWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeBatVoltageWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeDescriptionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: string, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeOrderWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeStatusWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeWiredAssessedCurrentWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeWiredAssessedInputFrequencyWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeWiredAssessedInputVoltageWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeWiredCurrentTypeWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeWiredMaximumCurrentWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeWiredNominalVoltageWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeWiredPresentWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;
}

declare class MTRBaseClusterPowerSourceConfiguration extends MTRCluster {

	static alloc(): MTRBaseClusterPowerSourceConfiguration; // inherited from NSObject

	static new(): MTRBaseClusterPowerSourceConfiguration; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeSourcesWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeSourcesWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeSourcesWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;
}

declare class MTRBaseClusterPressureMeasurement extends MTRCluster {

	static alloc(): MTRBaseClusterPressureMeasurement; // inherited from NSObject

	static new(): MTRBaseClusterPressureMeasurement; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeMaxMeasuredValueWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeMaxScaledValueWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeMeasuredValueWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeMinMeasuredValueWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeMinScaledValueWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeScaleWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeScaledToleranceWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeScaledValueWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeToleranceWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeMaxMeasuredValueWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeMaxScaledValueWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeMeasuredValueWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeMinMeasuredValueWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeMinScaledValueWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeScaleWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeScaledToleranceWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeScaledValueWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeToleranceWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeMaxMeasuredValueWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeMaxScaledValueWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeMeasuredValueWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeMinMeasuredValueWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeMinScaledValueWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeScaleWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeScaledToleranceWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeScaledValueWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeToleranceWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;
}

declare class MTRBaseClusterPumpConfigurationAndControl extends MTRCluster {

	static alloc(): MTRBaseClusterPumpConfigurationAndControl; // inherited from NSObject

	static new(): MTRBaseClusterPumpConfigurationAndControl; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeCapacityWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeControlModeWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeEffectiveControlModeWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeEffectiveOperationModeWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeLifetimeEnergyConsumedWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeLifetimeRunningHoursWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeMaxCompPressureWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeMaxConstFlowWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeMaxConstPressureWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeMaxConstSpeedWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeMaxConstTempWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeMaxFlowWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeMaxPressureWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeMaxSpeedWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeMinCompPressureWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeMinConstFlowWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeMinConstPressureWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeMinConstSpeedWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeMinConstTempWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeOperationModeWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributePowerWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributePumpStatusWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeSpeedWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeCapacityWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeControlModeWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeEffectiveControlModeWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeEffectiveOperationModeWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeLifetimeEnergyConsumedWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeLifetimeRunningHoursWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeMaxCompPressureWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeMaxConstFlowWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeMaxConstPressureWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeMaxConstSpeedWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeMaxConstTempWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeMaxFlowWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeMaxPressureWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeMaxSpeedWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeMinCompPressureWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeMinConstFlowWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeMinConstPressureWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeMinConstSpeedWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeMinConstTempWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeOperationModeWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributePowerWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributePumpStatusWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeSpeedWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeCapacityWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeControlModeWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeEffectiveControlModeWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeEffectiveOperationModeWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeLifetimeEnergyConsumedWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeLifetimeRunningHoursWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeMaxCompPressureWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeMaxConstFlowWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeMaxConstPressureWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeMaxConstSpeedWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeMaxConstTempWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeMaxFlowWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeMaxPressureWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeMaxSpeedWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeMinCompPressureWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeMinConstFlowWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeMinConstPressureWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeMinConstSpeedWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeMinConstTempWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeOperationModeWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributePowerWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributePumpStatusWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeSpeedWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	writeAttributeControlModeWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeControlModeWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeLifetimeEnergyConsumedWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeLifetimeEnergyConsumedWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeLifetimeRunningHoursWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeLifetimeRunningHoursWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeOperationModeWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeOperationModeWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;
}

declare class MTRBaseClusterRelativeHumidityMeasurement extends MTRCluster {

	static alloc(): MTRBaseClusterRelativeHumidityMeasurement; // inherited from NSObject

	static new(): MTRBaseClusterRelativeHumidityMeasurement; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeMaxMeasuredValueWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeMeasuredValueWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeMinMeasuredValueWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeToleranceWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeMaxMeasuredValueWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeMeasuredValueWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeMinMeasuredValueWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeToleranceWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeMaxMeasuredValueWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeMeasuredValueWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeMinMeasuredValueWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeToleranceWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;
}

declare class MTRBaseClusterScenes extends MTRCluster {

	static alloc(): MTRBaseClusterScenes; // inherited from NSObject

	static new(): MTRBaseClusterScenes; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeCurrentGroupWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeCurrentSceneWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeLastConfiguredByWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeNameSupportWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeSceneCountWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeSceneValidWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	addSceneWithParamsCompletionHandler(params: MTRScenesClusterAddSceneParams, completionHandler: (p1: MTRScenesClusterAddSceneResponseParams, p2: NSError) => void): void;

	copySceneWithParamsCompletionHandler(params: MTRScenesClusterCopySceneParams, completionHandler: (p1: MTRScenesClusterCopySceneResponseParams, p2: NSError) => void): void;

	enhancedAddSceneWithParamsCompletionHandler(params: MTRScenesClusterEnhancedAddSceneParams, completionHandler: (p1: MTRScenesClusterEnhancedAddSceneResponseParams, p2: NSError) => void): void;

	enhancedViewSceneWithParamsCompletionHandler(params: MTRScenesClusterEnhancedViewSceneParams, completionHandler: (p1: MTRScenesClusterEnhancedViewSceneResponseParams, p2: NSError) => void): void;

	getSceneMembershipWithParamsCompletionHandler(params: MTRScenesClusterGetSceneMembershipParams, completionHandler: (p1: MTRScenesClusterGetSceneMembershipResponseParams, p2: NSError) => void): void;

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeCurrentGroupWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeCurrentSceneWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeLastConfiguredByWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeNameSupportWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeSceneCountWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeSceneValidWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	recallSceneWithParamsCompletionHandler(params: MTRScenesClusterRecallSceneParams, completionHandler: (p1: NSError) => void): void;

	removeAllScenesWithParamsCompletionHandler(params: MTRScenesClusterRemoveAllScenesParams, completionHandler: (p1: MTRScenesClusterRemoveAllScenesResponseParams, p2: NSError) => void): void;

	removeSceneWithParamsCompletionHandler(params: MTRScenesClusterRemoveSceneParams, completionHandler: (p1: MTRScenesClusterRemoveSceneResponseParams, p2: NSError) => void): void;

	storeSceneWithParamsCompletionHandler(params: MTRScenesClusterStoreSceneParams, completionHandler: (p1: MTRScenesClusterStoreSceneResponseParams, p2: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeCurrentGroupWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeCurrentSceneWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeLastConfiguredByWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeNameSupportWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeSceneCountWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeSceneValidWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	viewSceneWithParamsCompletionHandler(params: MTRScenesClusterViewSceneParams, completionHandler: (p1: MTRScenesClusterViewSceneResponseParams, p2: NSError) => void): void;
}

declare class MTRBaseClusterSoftwareDiagnostics extends MTRCluster {

	static alloc(): MTRBaseClusterSoftwareDiagnostics; // inherited from NSObject

	static new(): MTRBaseClusterSoftwareDiagnostics; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeCurrentHeapFreeWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeCurrentHeapHighWatermarkWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeCurrentHeapUsedWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeThreadMetricsWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeCurrentHeapFreeWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeCurrentHeapHighWatermarkWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeCurrentHeapUsedWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeThreadMetricsWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	resetWatermarksWithCompletionHandler(completionHandler: (p1: NSError) => void): void;

	resetWatermarksWithParamsCompletionHandler(params: MTRSoftwareDiagnosticsClusterResetWatermarksParams, completionHandler: (p1: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeCurrentHeapFreeWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeCurrentHeapHighWatermarkWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeCurrentHeapUsedWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeThreadMetricsWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;
}

declare class MTRBaseClusterSwitch extends MTRCluster {

	static alloc(): MTRBaseClusterSwitch; // inherited from NSObject

	static new(): MTRBaseClusterSwitch; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeCurrentPositionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeMultiPressMaxWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeNumberOfPositionsWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeCurrentPositionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeMultiPressMaxWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeNumberOfPositionsWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeCurrentPositionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeMultiPressMaxWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeNumberOfPositionsWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;
}

declare class MTRBaseClusterTargetNavigator extends MTRCluster {

	static alloc(): MTRBaseClusterTargetNavigator; // inherited from NSObject

	static new(): MTRBaseClusterTargetNavigator; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeCurrentTargetWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeTargetListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	navigateTargetWithParamsCompletionHandler(params: MTRTargetNavigatorClusterNavigateTargetParams, completionHandler: (p1: MTRTargetNavigatorClusterNavigateTargetResponseParams, p2: NSError) => void): void;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeCurrentTargetWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeTargetListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeCurrentTargetWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeTargetListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;
}

declare class MTRBaseClusterTemperatureMeasurement extends MTRCluster {

	static alloc(): MTRBaseClusterTemperatureMeasurement; // inherited from NSObject

	static new(): MTRBaseClusterTemperatureMeasurement; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeMaxMeasuredValueWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeMeasuredValueWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeMinMeasuredValueWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeToleranceWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeMaxMeasuredValueWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeMeasuredValueWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeMinMeasuredValueWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeToleranceWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeMaxMeasuredValueWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeMeasuredValueWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeMinMeasuredValueWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeToleranceWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;
}

declare class MTRBaseClusterTestCluster extends MTRCluster {

	static alloc(): MTRBaseClusterTestCluster; // inherited from NSObject

	static new(): MTRBaseClusterTestCluster; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeBitmap16WithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeBitmap32WithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeBitmap64WithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeBitmap8WithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeBooleanWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeCharStringWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: string, p2: NSError) => void): void;

	static readAttributeClusterErrorBooleanWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeEnum16WithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeEnum8WithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeEnumAttrWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeEpochSWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeEpochUsWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFloatDoubleWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFloatSingleWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneralErrorBooleanWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeInt16sWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeInt16uWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeInt24sWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeInt24uWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeInt32sWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeInt32uWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeInt40sWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeInt40uWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeInt48sWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeInt48uWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeInt56sWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeInt56uWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeInt64sWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeInt64uWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeInt8sWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeInt8uWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeListFabricScopedWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeListInt8uWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeListLongOctetStringWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeListNullablesAndOptionalsStructWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeListOctetStringWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeListStructOctetStringWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeLongCharStringWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: string, p2: NSError) => void): void;

	static readAttributeLongOctetStringWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSData, p2: NSError) => void): void;

	static readAttributeNullableBitmap16WithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeNullableBitmap32WithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeNullableBitmap64WithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeNullableBitmap8WithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeNullableBooleanWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeNullableCharStringWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: string, p2: NSError) => void): void;

	static readAttributeNullableEnum16WithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeNullableEnum8WithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeNullableEnumAttrWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeNullableFloatDoubleWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeNullableFloatSingleWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeNullableInt16sWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeNullableInt16uWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeNullableInt24sWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeNullableInt24uWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeNullableInt32sWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeNullableInt32uWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeNullableInt40sWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeNullableInt40uWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeNullableInt48sWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeNullableInt48uWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeNullableInt56sWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeNullableInt56uWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeNullableInt64sWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeNullableInt64uWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeNullableInt8sWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeNullableInt8uWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeNullableOctetStringWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSData, p2: NSError) => void): void;

	static readAttributeNullableRangeRestrictedInt16sWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeNullableRangeRestrictedInt16uWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeNullableRangeRestrictedInt8sWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeNullableRangeRestrictedInt8uWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeNullableStructWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: MTRTestClusterClusterSimpleStruct, p2: NSError) => void): void;

	static readAttributeOctetStringWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSData, p2: NSError) => void): void;

	static readAttributeRangeRestrictedInt16sWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRangeRestrictedInt16uWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRangeRestrictedInt8sWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRangeRestrictedInt8uWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeStructAttrWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: MTRTestClusterClusterSimpleStruct, p2: NSError) => void): void;

	static readAttributeTimedWriteBooleanWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeUnsupportedWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeVendorIdWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeWriteOnlyInt8uWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeBitmap16WithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeBitmap32WithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeBitmap64WithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeBitmap8WithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeBooleanWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeCharStringWithCompletionHandler(completionHandler: (p1: string, p2: NSError) => void): void;

	readAttributeClusterErrorBooleanWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeEnum16WithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeEnum8WithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeEnumAttrWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeEpochSWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeEpochUsWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFloatDoubleWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFloatSingleWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneralErrorBooleanWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeInt16sWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeInt16uWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeInt24sWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeInt24uWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeInt32sWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeInt32uWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeInt40sWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeInt40uWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeInt48sWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeInt48uWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeInt56sWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeInt56uWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeInt64sWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeInt64uWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeInt8sWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeInt8uWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeListFabricScopedWithParamsCompletionHandler(params: MTRReadParams, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeListInt8uWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeListLongOctetStringWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeListNullablesAndOptionalsStructWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeListOctetStringWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeListStructOctetStringWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeLongCharStringWithCompletionHandler(completionHandler: (p1: string, p2: NSError) => void): void;

	readAttributeLongOctetStringWithCompletionHandler(completionHandler: (p1: NSData, p2: NSError) => void): void;

	readAttributeNullableBitmap16WithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeNullableBitmap32WithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeNullableBitmap64WithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeNullableBitmap8WithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeNullableBooleanWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeNullableCharStringWithCompletionHandler(completionHandler: (p1: string, p2: NSError) => void): void;

	readAttributeNullableEnum16WithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeNullableEnum8WithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeNullableEnumAttrWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeNullableFloatDoubleWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeNullableFloatSingleWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeNullableInt16sWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeNullableInt16uWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeNullableInt24sWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeNullableInt24uWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeNullableInt32sWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeNullableInt32uWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeNullableInt40sWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeNullableInt40uWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeNullableInt48sWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeNullableInt48uWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeNullableInt56sWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeNullableInt56uWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeNullableInt64sWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeNullableInt64uWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeNullableInt8sWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeNullableInt8uWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeNullableOctetStringWithCompletionHandler(completionHandler: (p1: NSData, p2: NSError) => void): void;

	readAttributeNullableRangeRestrictedInt16sWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeNullableRangeRestrictedInt16uWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeNullableRangeRestrictedInt8sWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeNullableRangeRestrictedInt8uWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeNullableStructWithCompletionHandler(completionHandler: (p1: MTRTestClusterClusterSimpleStruct, p2: NSError) => void): void;

	readAttributeOctetStringWithCompletionHandler(completionHandler: (p1: NSData, p2: NSError) => void): void;

	readAttributeRangeRestrictedInt16sWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRangeRestrictedInt16uWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRangeRestrictedInt8sWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRangeRestrictedInt8uWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeStructAttrWithCompletionHandler(completionHandler: (p1: MTRTestClusterClusterSimpleStruct, p2: NSError) => void): void;

	readAttributeTimedWriteBooleanWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeUnsupportedWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeVendorIdWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeWriteOnlyInt8uWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	simpleStructEchoRequestWithParamsCompletionHandler(params: MTRTestClusterClusterSimpleStructEchoRequestParams, completionHandler: (p1: MTRTestClusterClusterSimpleStructResponseParams, p2: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeBitmap16WithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeBitmap32WithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeBitmap64WithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeBitmap8WithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeBooleanWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeCharStringWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: string, p2: NSError) => void): void;

	subscribeAttributeClusterErrorBooleanWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeEnum16WithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeEnum8WithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeEnumAttrWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeEpochSWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeEpochUsWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFloatDoubleWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFloatSingleWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneralErrorBooleanWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeInt16sWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeInt16uWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeInt24sWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeInt24uWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeInt32sWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeInt32uWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeInt40sWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeInt40uWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeInt48sWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeInt48uWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeInt56sWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeInt56uWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeInt64sWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeInt64uWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeInt8sWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeInt8uWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeListFabricScopedWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeListInt8uWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeListLongOctetStringWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeListNullablesAndOptionalsStructWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeListOctetStringWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeListStructOctetStringWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeLongCharStringWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: string, p2: NSError) => void): void;

	subscribeAttributeLongOctetStringWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSData, p2: NSError) => void): void;

	subscribeAttributeNullableBitmap16WithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeNullableBitmap32WithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeNullableBitmap64WithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeNullableBitmap8WithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeNullableBooleanWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeNullableCharStringWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: string, p2: NSError) => void): void;

	subscribeAttributeNullableEnum16WithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeNullableEnum8WithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeNullableEnumAttrWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeNullableFloatDoubleWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeNullableFloatSingleWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeNullableInt16sWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeNullableInt16uWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeNullableInt24sWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeNullableInt24uWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeNullableInt32sWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeNullableInt32uWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeNullableInt40sWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeNullableInt40uWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeNullableInt48sWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeNullableInt48uWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeNullableInt56sWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeNullableInt56uWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeNullableInt64sWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeNullableInt64uWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeNullableInt8sWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeNullableInt8uWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeNullableOctetStringWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSData, p2: NSError) => void): void;

	subscribeAttributeNullableRangeRestrictedInt16sWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeNullableRangeRestrictedInt16uWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeNullableRangeRestrictedInt8sWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeNullableRangeRestrictedInt8uWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeNullableStructWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: MTRTestClusterClusterSimpleStruct, p2: NSError) => void): void;

	subscribeAttributeOctetStringWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSData, p2: NSError) => void): void;

	subscribeAttributeRangeRestrictedInt16sWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRangeRestrictedInt16uWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRangeRestrictedInt8sWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRangeRestrictedInt8uWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeStructAttrWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: MTRTestClusterClusterSimpleStruct, p2: NSError) => void): void;

	subscribeAttributeTimedWriteBooleanWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeUnsupportedWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeVendorIdWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeWriteOnlyInt8uWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	testAddArgumentsWithParamsCompletionHandler(params: MTRTestClusterClusterTestAddArgumentsParams, completionHandler: (p1: MTRTestClusterClusterTestAddArgumentsResponseParams, p2: NSError) => void): void;

	testComplexNullableOptionalRequestWithParamsCompletionHandler(params: MTRTestClusterClusterTestComplexNullableOptionalRequestParams, completionHandler: (p1: MTRTestClusterClusterTestComplexNullableOptionalResponseParams, p2: NSError) => void): void;

	testEmitTestEventRequestWithParamsCompletionHandler(params: MTRTestClusterClusterTestEmitTestEventRequestParams, completionHandler: (p1: MTRTestClusterClusterTestEmitTestEventResponseParams, p2: NSError) => void): void;

	testEmitTestFabricScopedEventRequestWithParamsCompletionHandler(params: MTRTestClusterClusterTestEmitTestFabricScopedEventRequestParams, completionHandler: (p1: MTRTestClusterClusterTestEmitTestFabricScopedEventResponseParams, p2: NSError) => void): void;

	testEnumsRequestWithParamsCompletionHandler(params: MTRTestClusterClusterTestEnumsRequestParams, completionHandler: (p1: MTRTestClusterClusterTestEnumsResponseParams, p2: NSError) => void): void;

	testListInt8UArgumentRequestWithParamsCompletionHandler(params: MTRTestClusterClusterTestListInt8UArgumentRequestParams, completionHandler: (p1: MTRTestClusterClusterBooleanResponseParams, p2: NSError) => void): void;

	testListInt8UReverseRequestWithParamsCompletionHandler(params: MTRTestClusterClusterTestListInt8UReverseRequestParams, completionHandler: (p1: MTRTestClusterClusterTestListInt8UReverseResponseParams, p2: NSError) => void): void;

	testListNestedStructListArgumentRequestWithParamsCompletionHandler(params: MTRTestClusterClusterTestListNestedStructListArgumentRequestParams, completionHandler: (p1: MTRTestClusterClusterBooleanResponseParams, p2: NSError) => void): void;

	testListStructArgumentRequestWithParamsCompletionHandler(params: MTRTestClusterClusterTestListStructArgumentRequestParams, completionHandler: (p1: MTRTestClusterClusterBooleanResponseParams, p2: NSError) => void): void;

	testNestedStructArgumentRequestWithParamsCompletionHandler(params: MTRTestClusterClusterTestNestedStructArgumentRequestParams, completionHandler: (p1: MTRTestClusterClusterBooleanResponseParams, p2: NSError) => void): void;

	testNestedStructListArgumentRequestWithParamsCompletionHandler(params: MTRTestClusterClusterTestNestedStructListArgumentRequestParams, completionHandler: (p1: MTRTestClusterClusterBooleanResponseParams, p2: NSError) => void): void;

	testNotHandledWithCompletionHandler(completionHandler: (p1: NSError) => void): void;

	testNotHandledWithParamsCompletionHandler(params: MTRTestClusterClusterTestNotHandledParams, completionHandler: (p1: NSError) => void): void;

	testNullableOptionalRequestWithParamsCompletionHandler(params: MTRTestClusterClusterTestNullableOptionalRequestParams, completionHandler: (p1: MTRTestClusterClusterTestNullableOptionalResponseParams, p2: NSError) => void): void;

	testSimpleArgumentRequestWithParamsCompletionHandler(params: MTRTestClusterClusterTestSimpleArgumentRequestParams, completionHandler: (p1: MTRTestClusterClusterTestSimpleArgumentResponseParams, p2: NSError) => void): void;

	testSimpleOptionalArgumentRequestWithParamsCompletionHandler(params: MTRTestClusterClusterTestSimpleOptionalArgumentRequestParams, completionHandler: (p1: NSError) => void): void;

	testSpecificWithCompletionHandler(completionHandler: (p1: MTRTestClusterClusterTestSpecificResponseParams, p2: NSError) => void): void;

	testSpecificWithParamsCompletionHandler(params: MTRTestClusterClusterTestSpecificParams, completionHandler: (p1: MTRTestClusterClusterTestSpecificResponseParams, p2: NSError) => void): void;

	testStructArgumentRequestWithParamsCompletionHandler(params: MTRTestClusterClusterTestStructArgumentRequestParams, completionHandler: (p1: MTRTestClusterClusterBooleanResponseParams, p2: NSError) => void): void;

	testStructArrayArgumentRequestWithParamsCompletionHandler(params: MTRTestClusterClusterTestStructArrayArgumentRequestParams, completionHandler: (p1: MTRTestClusterClusterTestStructArrayArgumentResponseParams, p2: NSError) => void): void;

	testUnknownCommandWithCompletionHandler(completionHandler: (p1: NSError) => void): void;

	testUnknownCommandWithParamsCompletionHandler(params: MTRTestClusterClusterTestUnknownCommandParams, completionHandler: (p1: NSError) => void): void;

	testWithCompletionHandler(completionHandler: (p1: NSError) => void): void;

	testWithParamsCompletionHandler(params: MTRTestClusterClusterTestParams, completionHandler: (p1: NSError) => void): void;

	timedInvokeRequestWithCompletionHandler(completionHandler: (p1: NSError) => void): void;

	timedInvokeRequestWithParamsCompletionHandler(params: MTRTestClusterClusterTimedInvokeRequestParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeBitmap16WithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeBitmap16WithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeBitmap32WithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeBitmap32WithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeBitmap64WithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeBitmap64WithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeBitmap8WithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeBitmap8WithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeBooleanWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeBooleanWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeCharStringWithValueCompletionHandler(value: string, completionHandler: (p1: NSError) => void): void;

	writeAttributeCharStringWithValueParamsCompletionHandler(value: string, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeClusterErrorBooleanWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeClusterErrorBooleanWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeEnum16WithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeEnum16WithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeEnum8WithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeEnum8WithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeEnumAttrWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeEnumAttrWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeEpochSWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeEpochSWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeEpochUsWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeEpochUsWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeFloatDoubleWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeFloatDoubleWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeFloatSingleWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeFloatSingleWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeGeneralErrorBooleanWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeGeneralErrorBooleanWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeInt16sWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeInt16sWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeInt16uWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeInt16uWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeInt24sWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeInt24sWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeInt24uWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeInt24uWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeInt32sWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeInt32sWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeInt32uWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeInt32uWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeInt40sWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeInt40sWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeInt40uWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeInt40uWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeInt48sWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeInt48sWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeInt48uWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeInt48uWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeInt56sWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeInt56sWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeInt56uWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeInt56uWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeInt64sWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeInt64sWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeInt64uWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeInt64uWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeInt8sWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeInt8sWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeInt8uWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeInt8uWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeListFabricScopedWithValueCompletionHandler(value: NSArray<any> | any[], completionHandler: (p1: NSError) => void): void;

	writeAttributeListFabricScopedWithValueParamsCompletionHandler(value: NSArray<any> | any[], params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeListInt8uWithValueCompletionHandler(value: NSArray<any> | any[], completionHandler: (p1: NSError) => void): void;

	writeAttributeListInt8uWithValueParamsCompletionHandler(value: NSArray<any> | any[], params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeListLongOctetStringWithValueCompletionHandler(value: NSArray<any> | any[], completionHandler: (p1: NSError) => void): void;

	writeAttributeListLongOctetStringWithValueParamsCompletionHandler(value: NSArray<any> | any[], params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeListNullablesAndOptionalsStructWithValueCompletionHandler(value: NSArray<any> | any[], completionHandler: (p1: NSError) => void): void;

	writeAttributeListNullablesAndOptionalsStructWithValueParamsCompletionHandler(value: NSArray<any> | any[], params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeListOctetStringWithValueCompletionHandler(value: NSArray<any> | any[], completionHandler: (p1: NSError) => void): void;

	writeAttributeListOctetStringWithValueParamsCompletionHandler(value: NSArray<any> | any[], params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeListStructOctetStringWithValueCompletionHandler(value: NSArray<any> | any[], completionHandler: (p1: NSError) => void): void;

	writeAttributeListStructOctetStringWithValueParamsCompletionHandler(value: NSArray<any> | any[], params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeLongCharStringWithValueCompletionHandler(value: string, completionHandler: (p1: NSError) => void): void;

	writeAttributeLongCharStringWithValueParamsCompletionHandler(value: string, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeLongOctetStringWithValueCompletionHandler(value: NSData, completionHandler: (p1: NSError) => void): void;

	writeAttributeLongOctetStringWithValueParamsCompletionHandler(value: NSData, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableBitmap16WithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableBitmap16WithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableBitmap32WithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableBitmap32WithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableBitmap64WithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableBitmap64WithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableBitmap8WithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableBitmap8WithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableBooleanWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableBooleanWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableCharStringWithValueCompletionHandler(value: string, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableCharStringWithValueParamsCompletionHandler(value: string, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableEnum16WithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableEnum16WithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableEnum8WithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableEnum8WithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableEnumAttrWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableEnumAttrWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableFloatDoubleWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableFloatDoubleWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableFloatSingleWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableFloatSingleWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableInt16sWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableInt16sWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableInt16uWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableInt16uWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableInt24sWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableInt24sWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableInt24uWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableInt24uWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableInt32sWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableInt32sWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableInt32uWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableInt32uWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableInt40sWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableInt40sWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableInt40uWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableInt40uWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableInt48sWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableInt48sWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableInt48uWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableInt48uWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableInt56sWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableInt56sWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableInt56uWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableInt56uWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableInt64sWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableInt64sWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableInt64uWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableInt64uWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableInt8sWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableInt8sWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableInt8uWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableInt8uWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableOctetStringWithValueCompletionHandler(value: NSData, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableOctetStringWithValueParamsCompletionHandler(value: NSData, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableRangeRestrictedInt16sWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableRangeRestrictedInt16sWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableRangeRestrictedInt16uWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableRangeRestrictedInt16uWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableRangeRestrictedInt8sWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableRangeRestrictedInt8sWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableRangeRestrictedInt8uWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableRangeRestrictedInt8uWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableStructWithValueCompletionHandler(value: MTRTestClusterClusterSimpleStruct, completionHandler: (p1: NSError) => void): void;

	writeAttributeNullableStructWithValueParamsCompletionHandler(value: MTRTestClusterClusterSimpleStruct, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeOctetStringWithValueCompletionHandler(value: NSData, completionHandler: (p1: NSError) => void): void;

	writeAttributeOctetStringWithValueParamsCompletionHandler(value: NSData, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeRangeRestrictedInt16sWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeRangeRestrictedInt16sWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeRangeRestrictedInt16uWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeRangeRestrictedInt16uWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeRangeRestrictedInt8sWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeRangeRestrictedInt8sWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeRangeRestrictedInt8uWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeRangeRestrictedInt8uWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeStructAttrWithValueCompletionHandler(value: MTRTestClusterClusterSimpleStruct, completionHandler: (p1: NSError) => void): void;

	writeAttributeStructAttrWithValueParamsCompletionHandler(value: MTRTestClusterClusterSimpleStruct, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeTimedWriteBooleanWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeTimedWriteBooleanWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeUnsupportedWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeUnsupportedWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeVendorIdWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeVendorIdWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeWriteOnlyInt8uWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeWriteOnlyInt8uWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;
}

declare class MTRBaseClusterThermostat extends MTRCluster {

	static alloc(): MTRBaseClusterThermostat; // inherited from NSObject

	static new(): MTRBaseClusterThermostat; // inherited from NSObject

	static readAttributeACCapacityWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeACCapacityformatWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeACCoilTemperatureWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeACCompressorTypeWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeACErrorCodeWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeACLouverPositionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeACRefrigerantTypeWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeACTypeWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeAbsMaxCoolSetpointLimitWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeAbsMaxHeatSetpointLimitWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeAbsMinCoolSetpointLimitWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeAbsMinHeatSetpointLimitWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeControlSequenceOfOperationWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeEmergencyHeatDeltaWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeHVACSystemTypeConfigurationWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeLocalTemperatureCalibrationWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeLocalTemperatureWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeMaxCoolSetpointLimitWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeMaxHeatSetpointLimitWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeMinCoolSetpointLimitWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeMinHeatSetpointLimitWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeMinSetpointDeadBandWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeNumberOfDailyTransitionsWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeNumberOfWeeklyTransitionsWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeOccupancyWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeOccupiedCoolingSetpointWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeOccupiedHeatingSetpointWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeOccupiedSetbackMaxWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeOccupiedSetbackMinWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeOccupiedSetbackWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeOutdoorTemperatureWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributePICoolingDemandWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributePIHeatingDemandWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRemoteSensingWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeSetpointChangeAmountWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeSetpointChangeSourceTimestampWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeSetpointChangeSourceWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeStartOfWeekWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeSystemModeWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeTemperatureSetpointHoldDurationWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeTemperatureSetpointHoldWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeThermostatProgrammingOperationModeWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeThermostatRunningModeWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeThermostatRunningStateWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeUnoccupiedCoolingSetpointWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeUnoccupiedHeatingSetpointWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeUnoccupiedSetbackMaxWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeUnoccupiedSetbackMinWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeUnoccupiedSetbackWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	clearWeeklyScheduleWithCompletionHandler(completionHandler: (p1: NSError) => void): void;

	clearWeeklyScheduleWithParamsCompletionHandler(params: MTRThermostatClusterClearWeeklyScheduleParams, completionHandler: (p1: NSError) => void): void;

	getWeeklyScheduleWithParamsCompletionHandler(params: MTRThermostatClusterGetWeeklyScheduleParams, completionHandler: (p1: MTRThermostatClusterGetWeeklyScheduleResponseParams, p2: NSError) => void): void;

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	readAttributeACCapacityWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeACCapacityformatWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeACCoilTemperatureWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeACCompressorTypeWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeACErrorCodeWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeACLouverPositionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeACRefrigerantTypeWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeACTypeWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeAbsMaxCoolSetpointLimitWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeAbsMaxHeatSetpointLimitWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeAbsMinCoolSetpointLimitWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeAbsMinHeatSetpointLimitWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeControlSequenceOfOperationWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeEmergencyHeatDeltaWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeHVACSystemTypeConfigurationWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeLocalTemperatureCalibrationWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeLocalTemperatureWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeMaxCoolSetpointLimitWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeMaxHeatSetpointLimitWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeMinCoolSetpointLimitWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeMinHeatSetpointLimitWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeMinSetpointDeadBandWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeNumberOfDailyTransitionsWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeNumberOfWeeklyTransitionsWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeOccupancyWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeOccupiedCoolingSetpointWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeOccupiedHeatingSetpointWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeOccupiedSetbackMaxWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeOccupiedSetbackMinWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeOccupiedSetbackWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeOutdoorTemperatureWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributePICoolingDemandWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributePIHeatingDemandWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRemoteSensingWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeSetpointChangeAmountWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeSetpointChangeSourceTimestampWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeSetpointChangeSourceWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeStartOfWeekWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeSystemModeWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeTemperatureSetpointHoldDurationWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeTemperatureSetpointHoldWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeThermostatProgrammingOperationModeWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeThermostatRunningModeWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeThermostatRunningStateWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeUnoccupiedCoolingSetpointWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeUnoccupiedHeatingSetpointWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeUnoccupiedSetbackMaxWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeUnoccupiedSetbackMinWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeUnoccupiedSetbackWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	setWeeklyScheduleWithParamsCompletionHandler(params: MTRThermostatClusterSetWeeklyScheduleParams, completionHandler: (p1: NSError) => void): void;

	setpointRaiseLowerWithParamsCompletionHandler(params: MTRThermostatClusterSetpointRaiseLowerParams, completionHandler: (p1: NSError) => void): void;

	subscribeAttributeACCapacityWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeACCapacityformatWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeACCoilTemperatureWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeACCompressorTypeWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeACErrorCodeWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeACLouverPositionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeACRefrigerantTypeWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeACTypeWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAbsMaxCoolSetpointLimitWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAbsMaxHeatSetpointLimitWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAbsMinCoolSetpointLimitWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAbsMinHeatSetpointLimitWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeControlSequenceOfOperationWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeEmergencyHeatDeltaWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeHVACSystemTypeConfigurationWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeLocalTemperatureCalibrationWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeLocalTemperatureWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeMaxCoolSetpointLimitWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeMaxHeatSetpointLimitWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeMinCoolSetpointLimitWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeMinHeatSetpointLimitWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeMinSetpointDeadBandWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeNumberOfDailyTransitionsWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeNumberOfWeeklyTransitionsWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeOccupancyWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeOccupiedCoolingSetpointWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeOccupiedHeatingSetpointWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeOccupiedSetbackMaxWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeOccupiedSetbackMinWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeOccupiedSetbackWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeOutdoorTemperatureWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributePICoolingDemandWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributePIHeatingDemandWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRemoteSensingWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeSetpointChangeAmountWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeSetpointChangeSourceTimestampWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeSetpointChangeSourceWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeStartOfWeekWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeSystemModeWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeTemperatureSetpointHoldDurationWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeTemperatureSetpointHoldWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeThermostatProgrammingOperationModeWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeThermostatRunningModeWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeThermostatRunningStateWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeUnoccupiedCoolingSetpointWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeUnoccupiedHeatingSetpointWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeUnoccupiedSetbackMaxWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeUnoccupiedSetbackMinWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeUnoccupiedSetbackWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	writeAttributeACCapacityWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeACCapacityWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeACCapacityformatWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeACCapacityformatWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeACCompressorTypeWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeACCompressorTypeWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeACErrorCodeWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeACErrorCodeWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeACLouverPositionWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeACLouverPositionWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeACRefrigerantTypeWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeACRefrigerantTypeWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeACTypeWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeACTypeWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeControlSequenceOfOperationWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeControlSequenceOfOperationWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeEmergencyHeatDeltaWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeEmergencyHeatDeltaWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeHVACSystemTypeConfigurationWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeHVACSystemTypeConfigurationWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeLocalTemperatureCalibrationWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeLocalTemperatureCalibrationWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeMaxCoolSetpointLimitWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeMaxCoolSetpointLimitWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeMaxHeatSetpointLimitWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeMaxHeatSetpointLimitWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeMinCoolSetpointLimitWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeMinCoolSetpointLimitWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeMinHeatSetpointLimitWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeMinHeatSetpointLimitWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeMinSetpointDeadBandWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeMinSetpointDeadBandWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeOccupiedCoolingSetpointWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeOccupiedCoolingSetpointWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeOccupiedHeatingSetpointWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeOccupiedHeatingSetpointWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeOccupiedSetbackWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeOccupiedSetbackWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeRemoteSensingWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeRemoteSensingWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeSystemModeWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeSystemModeWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeTemperatureSetpointHoldDurationWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeTemperatureSetpointHoldDurationWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeTemperatureSetpointHoldWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeTemperatureSetpointHoldWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeThermostatProgrammingOperationModeWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeThermostatProgrammingOperationModeWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeUnoccupiedCoolingSetpointWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeUnoccupiedCoolingSetpointWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeUnoccupiedHeatingSetpointWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeUnoccupiedHeatingSetpointWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeUnoccupiedSetbackWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeUnoccupiedSetbackWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;
}

declare class MTRBaseClusterThermostatUserInterfaceConfiguration extends MTRCluster {

	static alloc(): MTRBaseClusterThermostatUserInterfaceConfiguration; // inherited from NSObject

	static new(): MTRBaseClusterThermostatUserInterfaceConfiguration; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeKeypadLockoutWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeScheduleProgrammingVisibilityWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeTemperatureDisplayModeWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeKeypadLockoutWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeScheduleProgrammingVisibilityWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeTemperatureDisplayModeWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeKeypadLockoutWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeScheduleProgrammingVisibilityWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeTemperatureDisplayModeWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	writeAttributeKeypadLockoutWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeKeypadLockoutWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeScheduleProgrammingVisibilityWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeScheduleProgrammingVisibilityWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeTemperatureDisplayModeWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeTemperatureDisplayModeWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;
}

declare class MTRBaseClusterThreadNetworkDiagnostics extends MTRCluster {

	static alloc(): MTRBaseClusterThreadNetworkDiagnostics; // inherited from NSObject

	static new(): MTRBaseClusterThreadNetworkDiagnostics; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeActiveNetworkFaultsListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeActiveTimestampWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeAttachAttemptCountWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeBetterPartitionAttachAttemptCountWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeChannelPage0MaskWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSData, p2: NSError) => void): void;

	static readAttributeChannelWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeChildRoleCountWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeDataVersionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeDelayWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeDetachedRoleCountWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeExtendedPanIdWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeLeaderRoleCountWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeLeaderRouterIdWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeMeshLocalPrefixWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSData, p2: NSError) => void): void;

	static readAttributeNeighborTableListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeNetworkNameWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: string, p2: NSError) => void): void;

	static readAttributeOperationalDatasetComponentsWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: MTRThreadNetworkDiagnosticsClusterOperationalDatasetComponents, p2: NSError) => void): void;

	static readAttributeOverrunCountWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributePanIdWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeParentChangeCountWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributePartitionIdChangeCountWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributePartitionIdWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributePendingTimestampWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRouteTableListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeRouterRoleCountWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRoutingRoleWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRxAddressFilteredCountWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRxBeaconCountWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRxBeaconRequestCountWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRxBroadcastCountWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRxDataCountWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRxDataPollCountWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRxDestAddrFilteredCountWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRxDuplicatedCountWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRxErrFcsCountWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRxErrInvalidSrcAddrCountWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRxErrNoFrameCountWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRxErrOtherCountWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRxErrSecCountWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRxErrUnknownNeighborCountWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRxOtherCountWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRxTotalCountWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRxUnicastCountWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeSecurityPolicyWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: MTRThreadNetworkDiagnosticsClusterSecurityPolicy, p2: NSError) => void): void;

	static readAttributeStableDataVersionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeTxAckRequestedCountWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeTxAckedCountWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeTxBeaconCountWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeTxBeaconRequestCountWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeTxBroadcastCountWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeTxDataCountWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeTxDataPollCountWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeTxDirectMaxRetryExpiryCountWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeTxErrAbortCountWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeTxErrBusyChannelCountWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeTxErrCcaCountWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeTxIndirectMaxRetryExpiryCountWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeTxNoAckRequestedCountWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeTxOtherCountWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeTxRetryCountWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeTxTotalCountWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeTxUnicastCountWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeWeightingWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeActiveNetworkFaultsListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeActiveTimestampWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeAttachAttemptCountWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeBetterPartitionAttachAttemptCountWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeChannelPage0MaskWithCompletionHandler(completionHandler: (p1: NSData, p2: NSError) => void): void;

	readAttributeChannelWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeChildRoleCountWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeDataVersionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeDelayWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeDetachedRoleCountWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeExtendedPanIdWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeLeaderRoleCountWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeLeaderRouterIdWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeMeshLocalPrefixWithCompletionHandler(completionHandler: (p1: NSData, p2: NSError) => void): void;

	readAttributeNeighborTableListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeNetworkNameWithCompletionHandler(completionHandler: (p1: string, p2: NSError) => void): void;

	readAttributeOperationalDatasetComponentsWithCompletionHandler(completionHandler: (p1: MTRThreadNetworkDiagnosticsClusterOperationalDatasetComponents, p2: NSError) => void): void;

	readAttributeOverrunCountWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributePanIdWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeParentChangeCountWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributePartitionIdChangeCountWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributePartitionIdWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributePendingTimestampWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRouteTableListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeRouterRoleCountWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRoutingRoleWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRxAddressFilteredCountWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRxBeaconCountWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRxBeaconRequestCountWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRxBroadcastCountWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRxDataCountWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRxDataPollCountWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRxDestAddrFilteredCountWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRxDuplicatedCountWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRxErrFcsCountWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRxErrInvalidSrcAddrCountWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRxErrNoFrameCountWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRxErrOtherCountWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRxErrSecCountWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRxErrUnknownNeighborCountWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRxOtherCountWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRxTotalCountWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRxUnicastCountWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeSecurityPolicyWithCompletionHandler(completionHandler: (p1: MTRThreadNetworkDiagnosticsClusterSecurityPolicy, p2: NSError) => void): void;

	readAttributeStableDataVersionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeTxAckRequestedCountWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeTxAckedCountWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeTxBeaconCountWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeTxBeaconRequestCountWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeTxBroadcastCountWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeTxDataCountWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeTxDataPollCountWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeTxDirectMaxRetryExpiryCountWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeTxErrAbortCountWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeTxErrBusyChannelCountWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeTxErrCcaCountWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeTxIndirectMaxRetryExpiryCountWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeTxNoAckRequestedCountWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeTxOtherCountWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeTxRetryCountWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeTxTotalCountWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeTxUnicastCountWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeWeightingWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	resetCountsWithCompletionHandler(completionHandler: (p1: NSError) => void): void;

	resetCountsWithParamsCompletionHandler(params: MTRThreadNetworkDiagnosticsClusterResetCountsParams, completionHandler: (p1: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeActiveNetworkFaultsListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeActiveTimestampWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAttachAttemptCountWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeBetterPartitionAttachAttemptCountWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeChannelPage0MaskWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSData, p2: NSError) => void): void;

	subscribeAttributeChannelWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeChildRoleCountWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeDataVersionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeDelayWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeDetachedRoleCountWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeExtendedPanIdWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeLeaderRoleCountWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeLeaderRouterIdWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeMeshLocalPrefixWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSData, p2: NSError) => void): void;

	subscribeAttributeNeighborTableListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeNetworkNameWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: string, p2: NSError) => void): void;

	subscribeAttributeOperationalDatasetComponentsWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: MTRThreadNetworkDiagnosticsClusterOperationalDatasetComponents, p2: NSError) => void): void;

	subscribeAttributeOverrunCountWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributePanIdWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeParentChangeCountWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributePartitionIdChangeCountWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributePartitionIdWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributePendingTimestampWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRouteTableListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeRouterRoleCountWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRoutingRoleWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRxAddressFilteredCountWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRxBeaconCountWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRxBeaconRequestCountWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRxBroadcastCountWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRxDataCountWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRxDataPollCountWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRxDestAddrFilteredCountWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRxDuplicatedCountWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRxErrFcsCountWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRxErrInvalidSrcAddrCountWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRxErrNoFrameCountWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRxErrOtherCountWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRxErrSecCountWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRxErrUnknownNeighborCountWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRxOtherCountWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRxTotalCountWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRxUnicastCountWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeSecurityPolicyWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: MTRThreadNetworkDiagnosticsClusterSecurityPolicy, p2: NSError) => void): void;

	subscribeAttributeStableDataVersionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeTxAckRequestedCountWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeTxAckedCountWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeTxBeaconCountWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeTxBeaconRequestCountWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeTxBroadcastCountWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeTxDataCountWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeTxDataPollCountWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeTxDirectMaxRetryExpiryCountWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeTxErrAbortCountWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeTxErrBusyChannelCountWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeTxErrCcaCountWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeTxIndirectMaxRetryExpiryCountWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeTxNoAckRequestedCountWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeTxOtherCountWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeTxRetryCountWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeTxTotalCountWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeTxUnicastCountWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeWeightingWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;
}

declare class MTRBaseClusterTimeFormatLocalization extends MTRCluster {

	static alloc(): MTRBaseClusterTimeFormatLocalization; // inherited from NSObject

	static new(): MTRBaseClusterTimeFormatLocalization; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeActiveCalendarTypeWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeHourFormatWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeSupportedCalendarTypesWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeActiveCalendarTypeWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeHourFormatWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeSupportedCalendarTypesWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeActiveCalendarTypeWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeHourFormatWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeSupportedCalendarTypesWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	writeAttributeActiveCalendarTypeWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeActiveCalendarTypeWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeHourFormatWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeHourFormatWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;
}

declare class MTRBaseClusterUnitLocalization extends MTRCluster {

	static alloc(): MTRBaseClusterUnitLocalization; // inherited from NSObject

	static new(): MTRBaseClusterUnitLocalization; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeTemperatureUnitWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeTemperatureUnitWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeTemperatureUnitWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	writeAttributeTemperatureUnitWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeTemperatureUnitWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;
}

declare class MTRBaseClusterUserLabel extends MTRCluster {

	static alloc(): MTRBaseClusterUserLabel; // inherited from NSObject

	static new(): MTRBaseClusterUserLabel; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeLabelListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeLabelListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeLabelListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	writeAttributeLabelListWithValueCompletionHandler(value: NSArray<any> | any[], completionHandler: (p1: NSError) => void): void;

	writeAttributeLabelListWithValueParamsCompletionHandler(value: NSArray<any> | any[], params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;
}

declare class MTRBaseClusterWakeOnLan extends MTRCluster {

	static alloc(): MTRBaseClusterWakeOnLan; // inherited from NSObject

	static new(): MTRBaseClusterWakeOnLan; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeMACAddressWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: string, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeMACAddressWithCompletionHandler(completionHandler: (p1: string, p2: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeMACAddressWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: string, p2: NSError) => void): void;
}

declare class MTRBaseClusterWiFiNetworkDiagnostics extends MTRCluster {

	static alloc(): MTRBaseClusterWiFiNetworkDiagnostics; // inherited from NSObject

	static new(): MTRBaseClusterWiFiNetworkDiagnostics; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeBeaconLostCountWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeBeaconRxCountWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeBssidWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSData, p2: NSError) => void): void;

	static readAttributeChannelNumberWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeCurrentMaxRateWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeOverrunCountWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributePacketMulticastRxCountWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributePacketMulticastTxCountWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributePacketUnicastRxCountWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributePacketUnicastTxCountWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeRssiWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeSecurityTypeWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeWiFiVersionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeBeaconLostCountWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeBeaconRxCountWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeBssidWithCompletionHandler(completionHandler: (p1: NSData, p2: NSError) => void): void;

	readAttributeChannelNumberWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeCurrentMaxRateWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeOverrunCountWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributePacketMulticastRxCountWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributePacketMulticastTxCountWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributePacketUnicastRxCountWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributePacketUnicastTxCountWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeRssiWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeSecurityTypeWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeWiFiVersionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	resetCountsWithCompletionHandler(completionHandler: (p1: NSError) => void): void;

	resetCountsWithParamsCompletionHandler(params: MTRWiFiNetworkDiagnosticsClusterResetCountsParams, completionHandler: (p1: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeBeaconLostCountWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeBeaconRxCountWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeBssidWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSData, p2: NSError) => void): void;

	subscribeAttributeChannelNumberWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeCurrentMaxRateWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeOverrunCountWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributePacketMulticastRxCountWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributePacketMulticastTxCountWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributePacketUnicastRxCountWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributePacketUnicastTxCountWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeRssiWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeSecurityTypeWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeWiFiVersionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;
}

declare class MTRBaseClusterWindowCovering extends MTRCluster {

	static alloc(): MTRBaseClusterWindowCovering; // inherited from NSObject

	static new(): MTRBaseClusterWindowCovering; // inherited from NSObject

	static readAttributeAcceptedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeAttributeListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeClusterRevisionWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeConfigStatusWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeCurrentPositionLiftPercent100thsWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeCurrentPositionLiftPercentageWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeCurrentPositionLiftWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeCurrentPositionTiltPercent100thsWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeCurrentPositionTiltPercentageWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeCurrentPositionTiltWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeEndProductTypeWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeFeatureMapWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeGeneratedCommandListWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	static readAttributeInstalledClosedLimitLiftWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeInstalledClosedLimitTiltWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeInstalledOpenLimitLiftWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeInstalledOpenLimitTiltWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeModeWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeNumberOfActuationsLiftWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeNumberOfActuationsTiltWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeOperationalStatusWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributePhysicalClosedLimitLiftWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributePhysicalClosedLimitTiltWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeSafetyStatusWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeTargetPositionLiftPercent100thsWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeTargetPositionTiltPercent100thsWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	static readAttributeTypeWithAttributeCacheEndpointQueueCompletionHandler(attributeCacheContainer: MTRAttributeCacheContainer, endpoint: number, queue: NSObject, completionHandler: (p1: number, p2: NSError) => void): void;

	constructor(o: { device: MTRBaseDevice; endpoint: number; queue: NSObject; });

	downOrCloseWithCompletionHandler(completionHandler: (p1: NSError) => void): void;

	downOrCloseWithParamsCompletionHandler(params: MTRWindowCoveringClusterDownOrCloseParams, completionHandler: (p1: NSError) => void): void;

	goToLiftPercentageWithParamsCompletionHandler(params: MTRWindowCoveringClusterGoToLiftPercentageParams, completionHandler: (p1: NSError) => void): void;

	goToLiftValueWithParamsCompletionHandler(params: MTRWindowCoveringClusterGoToLiftValueParams, completionHandler: (p1: NSError) => void): void;

	goToTiltPercentageWithParamsCompletionHandler(params: MTRWindowCoveringClusterGoToTiltPercentageParams, completionHandler: (p1: NSError) => void): void;

	goToTiltValueWithParamsCompletionHandler(params: MTRWindowCoveringClusterGoToTiltValueParams, completionHandler: (p1: NSError) => void): void;

	initWithDeviceEndpointQueue(device: MTRBaseDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeAttributeListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeClusterRevisionWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeConfigStatusWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeCurrentPositionLiftPercent100thsWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeCurrentPositionLiftPercentageWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeCurrentPositionLiftWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeCurrentPositionTiltPercent100thsWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeCurrentPositionTiltPercentageWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeCurrentPositionTiltWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeEndProductTypeWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeFeatureMapWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeGeneratedCommandListWithCompletionHandler(completionHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	readAttributeInstalledClosedLimitLiftWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeInstalledClosedLimitTiltWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeInstalledOpenLimitLiftWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeInstalledOpenLimitTiltWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeModeWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeNumberOfActuationsLiftWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeNumberOfActuationsTiltWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeOperationalStatusWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributePhysicalClosedLimitLiftWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributePhysicalClosedLimitTiltWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeSafetyStatusWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeTargetPositionLiftPercent100thsWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeTargetPositionTiltPercent100thsWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	readAttributeTypeWithCompletionHandler(completionHandler: (p1: number, p2: NSError) => void): void;

	stopMotionWithCompletionHandler(completionHandler: (p1: NSError) => void): void;

	stopMotionWithParamsCompletionHandler(params: MTRWindowCoveringClusterStopMotionParams, completionHandler: (p1: NSError) => void): void;

	subscribeAttributeAcceptedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeAttributeListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeClusterRevisionWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeConfigStatusWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeCurrentPositionLiftPercent100thsWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeCurrentPositionLiftPercentageWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeCurrentPositionLiftWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeCurrentPositionTiltPercent100thsWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeCurrentPositionTiltPercentageWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeCurrentPositionTiltWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeEndProductTypeWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeFeatureMapWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeGeneratedCommandListWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: NSArray<any>, p2: NSError) => void): void;

	subscribeAttributeInstalledClosedLimitLiftWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeInstalledClosedLimitTiltWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeInstalledOpenLimitLiftWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeInstalledOpenLimitTiltWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeModeWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeNumberOfActuationsLiftWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeNumberOfActuationsTiltWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeOperationalStatusWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributePhysicalClosedLimitLiftWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributePhysicalClosedLimitTiltWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeSafetyStatusWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeTargetPositionLiftPercent100thsWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeTargetPositionTiltPercent100thsWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	subscribeAttributeTypeWithMinIntervalMaxIntervalParamsSubscriptionEstablishedReportHandler(minInterval: number, maxInterval: number, params: MTRSubscribeParams, subscriptionEstablishedHandler: () => void, reportHandler: (p1: number, p2: NSError) => void): void;

	upOrOpenWithCompletionHandler(completionHandler: (p1: NSError) => void): void;

	upOrOpenWithParamsCompletionHandler(params: MTRWindowCoveringClusterUpOrOpenParams, completionHandler: (p1: NSError) => void): void;

	writeAttributeModeWithValueCompletionHandler(value: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeModeWithValueParamsCompletionHandler(value: number, params: MTRWriteParams, completionHandler: (p1: NSError) => void): void;
}

declare class MTRBaseDevice extends NSObject {

	static alloc(): MTRBaseDevice; // inherited from NSObject

	static new(): MTRBaseDevice; // inherited from NSObject

	deregisterReportHandlersWithClientQueueCompletion(clientQueue: NSObject, completion: () => void): void;

	invokeCommandWithEndpointIdClusterIdCommandIdCommandFieldsTimedInvokeTimeoutClientQueueCompletion(endpointId: number, clusterId: number, commandId: number, commandFields: any, timeoutMs: number, clientQueue: NSObject, completion: (p1: NSArray<NSDictionary<string, any>>, p2: NSError) => void): void;

	openCommissioningWindowWithSetupPasscodeDiscriminatorDurationQueueCompletion(setupPasscode: number, discriminator: number, duration: number, queue: NSObject, completion: (p1: MTRSetupPayload, p2: NSError) => void): void;

	readAttributeWithEndpointIdClusterIdAttributeIdParamsClientQueueCompletion(endpointId: number, clusterId: number, attributeId: number, params: MTRReadParams, clientQueue: NSObject, completion: (p1: NSArray<NSDictionary<string, any>>, p2: NSError) => void): void;

	subscribeAttributeWithEndpointIdClusterIdAttributeIdMinIntervalMaxIntervalParamsClientQueueReportHandlerSubscriptionEstablished(endpointId: number, clusterId: number, attributeId: number, minInterval: number, maxInterval: number, params: MTRSubscribeParams, clientQueue: NSObject, reportHandler: (p1: NSArray<NSDictionary<string, any>>, p2: NSError) => void, subscriptionEstablishedHandler: () => void): void;

	subscribeWithQueueMinIntervalMaxIntervalParamsCacheContainerAttributeReportHandlerEventReportHandlerErrorHandlerSubscriptionEstablishedResubscriptionScheduled(queue: NSObject, minInterval: number, maxInterval: number, params: MTRSubscribeParams, attributeCacheContainer: MTRAttributeCacheContainer, attributeReportHandler: (p1: NSArray<any>) => void, eventReportHandler: (p1: NSArray<any>) => void, errorHandler: (p1: NSError) => void, subscriptionEstablishedHandler: () => void, resubscriptionScheduledHandler: (p1: NSError, p2: number) => void): void;

	writeAttributeWithEndpointIdClusterIdAttributeIdValueTimedWriteTimeoutClientQueueCompletion(endpointId: number, clusterId: number, attributeId: number, value: any, timeoutMs: number, clientQueue: NSObject, completion: (p1: NSArray<NSDictionary<string, any>>, p2: NSError) => void): void;
}

declare class MTRBasicClusterCapabilityMinimaStruct extends NSObject implements NSCopying {

	static alloc(): MTRBasicClusterCapabilityMinimaStruct; // inherited from NSObject

	static new(): MTRBasicClusterCapabilityMinimaStruct; // inherited from NSObject

	caseSessionsPerFabric: number;

	subscriptionsPerFabric: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRBasicClusterLeaveEvent extends NSObject implements NSCopying {

	static alloc(): MTRBasicClusterLeaveEvent; // inherited from NSObject

	static new(): MTRBasicClusterLeaveEvent; // inherited from NSObject

	fabricIndex: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRBasicClusterMfgSpecificPingParams extends NSObject implements NSCopying {

	static alloc(): MTRBasicClusterMfgSpecificPingParams; // inherited from NSObject

	static new(): MTRBasicClusterMfgSpecificPingParams; // inherited from NSObject

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRBasicClusterReachableChangedEvent extends NSObject implements NSCopying {

	static alloc(): MTRBasicClusterReachableChangedEvent; // inherited from NSObject

	static new(): MTRBasicClusterReachableChangedEvent; // inherited from NSObject

	reachableNewValue: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRBasicClusterShutDownEvent extends NSObject implements NSCopying {

	static alloc(): MTRBasicClusterShutDownEvent; // inherited from NSObject

	static new(): MTRBasicClusterShutDownEvent; // inherited from NSObject

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRBasicClusterStartUpEvent extends NSObject implements NSCopying {

	static alloc(): MTRBasicClusterStartUpEvent; // inherited from NSObject

	static new(): MTRBasicClusterStartUpEvent; // inherited from NSObject

	softwareVersion: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRBindingClusterTargetStruct extends NSObject implements NSCopying {

	static alloc(): MTRBindingClusterTargetStruct; // inherited from NSObject

	static new(): MTRBindingClusterTargetStruct; // inherited from NSObject

	cluster: number;

	endpoint: number;

	fabricIndex: number;

	group: number;

	node: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRBooleanStateClusterStateChangeEvent extends NSObject implements NSCopying {

	static alloc(): MTRBooleanStateClusterStateChangeEvent; // inherited from NSObject

	static new(): MTRBooleanStateClusterStateChangeEvent; // inherited from NSObject

	stateValue: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare var MTRBooleanValueType: string;

declare class MTRBridgedDeviceBasicClusterLeaveEvent extends NSObject implements NSCopying {

	static alloc(): MTRBridgedDeviceBasicClusterLeaveEvent; // inherited from NSObject

	static new(): MTRBridgedDeviceBasicClusterLeaveEvent; // inherited from NSObject

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRBridgedDeviceBasicClusterReachableChangedEvent extends NSObject implements NSCopying {

	static alloc(): MTRBridgedDeviceBasicClusterReachableChangedEvent; // inherited from NSObject

	static new(): MTRBridgedDeviceBasicClusterReachableChangedEvent; // inherited from NSObject

	reachableNewValue: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRBridgedDeviceBasicClusterShutDownEvent extends NSObject implements NSCopying {

	static alloc(): MTRBridgedDeviceBasicClusterShutDownEvent; // inherited from NSObject

	static new(): MTRBridgedDeviceBasicClusterShutDownEvent; // inherited from NSObject

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRBridgedDeviceBasicClusterStartUpEvent extends NSObject implements NSCopying {

	static alloc(): MTRBridgedDeviceBasicClusterStartUpEvent; // inherited from NSObject

	static new(): MTRBridgedDeviceBasicClusterStartUpEvent; // inherited from NSObject

	softwareVersion: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRCertificates extends NSObject {

	static alloc(): MTRCertificates; // inherited from NSObject

	static convertX509Certificate(x509Certificate: NSData): NSData;

	static generateCertificateSigningRequestError(keypair: MTRKeypair): NSData;

	static generateIntermediateCertificateRootCertificateIntermediatePublicKeyIssuerIdFabricIdError(rootKeypair: MTRKeypair, rootCertificate: NSData, intermediatePublicKey: any, issuerId: number, fabricId: number): NSData;

	static generateOperationalCertificateSigningCertificateOperationalPublicKeyFabricIdNodeIdCaseAuthenticatedTagsError(signingKeypair: MTRKeypair, signingCertificate: NSData, operationalPublicKey: any, fabricId: number, nodeId: number, caseAuthenticatedTags: NSArray<number> | number[]): NSData;

	static generateRootCertificateIssuerIdFabricIdError(keypair: MTRKeypair, issuerId: number, fabricId: number): NSData;

	static isCertificateEqualTo(certificate1: NSData, certificate2: NSData): boolean;

	static keypairMatchesCertificate(keypair: MTRKeypair, certificate: NSData): boolean;

	static new(): MTRCertificates; // inherited from NSObject
}

declare class MTRChannelClusterChangeChannelByNumberParams extends NSObject implements NSCopying {

	static alloc(): MTRChannelClusterChangeChannelByNumberParams; // inherited from NSObject

	static new(): MTRChannelClusterChangeChannelByNumberParams; // inherited from NSObject

	majorNumber: number;

	minorNumber: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRChannelClusterChangeChannelParams extends NSObject implements NSCopying {

	static alloc(): MTRChannelClusterChangeChannelParams; // inherited from NSObject

	static new(): MTRChannelClusterChangeChannelParams; // inherited from NSObject

	match: string;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRChannelClusterChangeChannelResponseParams extends NSObject implements NSCopying {

	static alloc(): MTRChannelClusterChangeChannelResponseParams; // inherited from NSObject

	static new(): MTRChannelClusterChangeChannelResponseParams; // inherited from NSObject

	data: string;

	status: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRChannelClusterChannelInfo extends NSObject implements NSCopying {

	static alloc(): MTRChannelClusterChannelInfo; // inherited from NSObject

	static new(): MTRChannelClusterChannelInfo; // inherited from NSObject

	affiliateCallSign: string;

	callSign: string;

	majorNumber: number;

	minorNumber: number;

	name: string;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRChannelClusterLineupInfo extends NSObject implements NSCopying {

	static alloc(): MTRChannelClusterLineupInfo; // inherited from NSObject

	static new(): MTRChannelClusterLineupInfo; // inherited from NSObject

	lineupInfoType: number;

	lineupName: string;

	operatorName: string;

	postalCode: string;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRChannelClusterSkipChannelParams extends NSObject implements NSCopying {

	static alloc(): MTRChannelClusterSkipChannelParams; // inherited from NSObject

	static new(): MTRChannelClusterSkipChannelParams; // inherited from NSObject

	count: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare const enum MTRChannelFeature {

	ChannelList = 1,

	LineupInfo = 2
}

declare const enum MTRChannelLineupInfoType {

	Mso = 0
}

declare const enum MTRChannelStatus {

	Success = 0,

	MultipleMatches = 1,

	NoMatches = 2
}

declare class MTRCluster extends NSObject {

	static alloc(): MTRCluster; // inherited from NSObject

	static new(): MTRCluster; // inherited from NSObject
}

declare class MTRClusterAccessControl extends MTRCluster {

	static alloc(): MTRClusterAccessControl; // inherited from NSObject

	static new(): MTRClusterAccessControl; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAccessControlEntriesPerFabricWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAclWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeExtensionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeSubjectsPerAccessControlEntryWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeTargetsPerAccessControlEntryWithParams(params: MTRReadParams): NSDictionary<string, any>;

	writeAttributeAclWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeAclWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeExtensionWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeExtensionWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;
}

declare class MTRClusterAccountLogin extends MTRCluster {

	static alloc(): MTRClusterAccountLogin; // inherited from NSObject

	static new(): MTRClusterAccountLogin; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	getSetupPINWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRAccountLoginClusterGetSetupPINParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRAccountLoginClusterGetSetupPINResponseParams, p2: NSError) => void): void;

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	loginWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRAccountLoginClusterLoginParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	logoutWithExpectedValuesExpectedValueIntervalCompletionHandler(expectedValues: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	logoutWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRAccountLoginClusterLogoutParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;
}

declare class MTRClusterActions extends MTRCluster {

	static alloc(): MTRClusterActions; // inherited from NSObject

	static new(): MTRClusterActions; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	disableActionWithDurationWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRActionsClusterDisableActionWithDurationParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	disableActionWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRActionsClusterDisableActionParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	enableActionWithDurationWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRActionsClusterEnableActionWithDurationParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	enableActionWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRActionsClusterEnableActionParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	instantActionWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRActionsClusterInstantActionParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	instantActionWithTransitionWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRActionsClusterInstantActionWithTransitionParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	pauseActionWithDurationWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRActionsClusterPauseActionWithDurationParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	pauseActionWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRActionsClusterPauseActionParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeActionListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeEndpointListsWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeSetupURLWithParams(params: MTRReadParams): NSDictionary<string, any>;

	resumeActionWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRActionsClusterResumeActionParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	startActionWithDurationWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRActionsClusterStartActionWithDurationParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	startActionWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRActionsClusterStartActionParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	stopActionWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRActionsClusterStopActionParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;
}

declare class MTRClusterAdministratorCommissioning extends MTRCluster {

	static alloc(): MTRClusterAdministratorCommissioning; // inherited from NSObject

	static new(): MTRClusterAdministratorCommissioning; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	openBasicCommissioningWindowWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRAdministratorCommissioningClusterOpenBasicCommissioningWindowParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	openCommissioningWindowWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRAdministratorCommissioningClusterOpenCommissioningWindowParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAdminFabricIndexWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAdminVendorIdWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeWindowStatusWithParams(params: MTRReadParams): NSDictionary<string, any>;

	revokeCommissioningWithExpectedValuesExpectedValueIntervalCompletionHandler(expectedValues: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	revokeCommissioningWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRAdministratorCommissioningClusterRevokeCommissioningParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;
}

declare class MTRClusterApplicationBasic extends MTRCluster {

	static alloc(): MTRClusterApplicationBasic; // inherited from NSObject

	static new(): MTRClusterApplicationBasic; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAllowedVendorListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeApplicationNameWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeApplicationVersionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeApplicationWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeProductIDWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeStatusWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeVendorIDWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeVendorNameWithParams(params: MTRReadParams): NSDictionary<string, any>;
}

declare class MTRClusterApplicationLauncher extends MTRCluster {

	static alloc(): MTRClusterApplicationLauncher; // inherited from NSObject

	static new(): MTRClusterApplicationLauncher; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	hideAppWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRApplicationLauncherClusterHideAppParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRApplicationLauncherClusterLauncherResponseParams, p2: NSError) => void): void;

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	launchAppWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRApplicationLauncherClusterLaunchAppParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRApplicationLauncherClusterLauncherResponseParams, p2: NSError) => void): void;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeCatalogListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeCurrentAppWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	stopAppWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRApplicationLauncherClusterStopAppParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRApplicationLauncherClusterLauncherResponseParams, p2: NSError) => void): void;

	writeAttributeCurrentAppWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeCurrentAppWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;
}

declare const enum MTRClusterAttributeIDType {

	GlobalAttributeGeneratedCommandListID = 65528,

	GlobalAttributeAcceptedCommandListID = 65529,

	GlobalAttributeAttributeListID = 65531,

	GlobalAttributeFeatureMapID = 65532,

	GlobalAttributeClusterRevisionID = 65533,

	IdentifyAttributeIdentifyTimeID = 0,

	IdentifyAttributeIdentifyTypeID = 1,

	IdentifyAttributeGeneratedCommandListID = 65528,

	IdentifyAttributeAcceptedCommandListID = 65529,

	IdentifyAttributeAttributeListID = 65531,

	IdentifyAttributeFeatureMapID = 65532,

	IdentifyAttributeClusterRevisionID = 65533,

	GroupsAttributeNameSupportID = 0,

	GroupsAttributeGeneratedCommandListID = 65528,

	GroupsAttributeAcceptedCommandListID = 65529,

	GroupsAttributeAttributeListID = 65531,

	GroupsAttributeFeatureMapID = 65532,

	GroupsAttributeClusterRevisionID = 65533,

	ScenesAttributeSceneCountID = 0,

	ScenesAttributeCurrentSceneID = 1,

	ScenesAttributeCurrentGroupID = 2,

	ScenesAttributeSceneValidID = 3,

	ScenesAttributeNameSupportID = 4,

	ScenesAttributeLastConfiguredByID = 5,

	ScenesAttributeGeneratedCommandListID = 65528,

	ScenesAttributeAcceptedCommandListID = 65529,

	ScenesAttributeAttributeListID = 65531,

	ScenesAttributeFeatureMapID = 65532,

	ScenesAttributeClusterRevisionID = 65533,

	OnOffAttributeOnOffID = 0,

	OnOffAttributeGlobalSceneControlID = 16384,

	OnOffAttributeOnTimeID = 16385,

	OnOffAttributeOffWaitTimeID = 16386,

	OnOffAttributeStartUpOnOffID = 16387,

	OnOffAttributeGeneratedCommandListID = 65528,

	OnOffAttributeAcceptedCommandListID = 65529,

	OnOffAttributeAttributeListID = 65531,

	OnOffAttributeFeatureMapID = 65532,

	OnOffAttributeClusterRevisionID = 65533,

	OnOffSwitchConfigurationAttributeSwitchTypeID = 0,

	OnOffSwitchConfigurationAttributeSwitchActionsID = 16,

	OnOffSwitchConfigurationAttributeGeneratedCommandListID = 65528,

	OnOffSwitchConfigurationAttributeAcceptedCommandListID = 65529,

	OnOffSwitchConfigurationAttributeAttributeListID = 65531,

	OnOffSwitchConfigurationAttributeFeatureMapID = 65532,

	OnOffSwitchConfigurationAttributeClusterRevisionID = 65533,

	LevelControlAttributeCurrentLevelID = 0,

	LevelControlAttributeRemainingTimeID = 1,

	LevelControlAttributeMinLevelID = 2,

	LevelControlAttributeMaxLevelID = 3,

	LevelControlAttributeCurrentFrequencyID = 4,

	LevelControlAttributeMinFrequencyID = 5,

	LevelControlAttributeMaxFrequencyID = 6,

	LevelControlAttributeOptionsID = 15,

	LevelControlAttributeOnOffTransitionTimeID = 16,

	LevelControlAttributeOnLevelID = 17,

	LevelControlAttributeOnTransitionTimeID = 18,

	LevelControlAttributeOffTransitionTimeID = 19,

	LevelControlAttributeDefaultMoveRateID = 20,

	LevelControlAttributeStartUpCurrentLevelID = 16384,

	LevelControlAttributeGeneratedCommandListID = 65528,

	LevelControlAttributeAcceptedCommandListID = 65529,

	LevelControlAttributeAttributeListID = 65531,

	LevelControlAttributeFeatureMapID = 65532,

	LevelControlAttributeClusterRevisionID = 65533,

	BinaryInputBasicAttributeActiveTextID = 4,

	BinaryInputBasicAttributeDescriptionID = 28,

	BinaryInputBasicAttributeInactiveTextID = 46,

	BinaryInputBasicAttributeOutOfServiceID = 81,

	BinaryInputBasicAttributePolarityID = 84,

	BinaryInputBasicAttributePresentValueID = 85,

	BinaryInputBasicAttributeReliabilityID = 103,

	BinaryInputBasicAttributeStatusFlagsID = 111,

	BinaryInputBasicAttributeApplicationTypeID = 256,

	BinaryInputBasicAttributeGeneratedCommandListID = 65528,

	BinaryInputBasicAttributeAcceptedCommandListID = 65529,

	BinaryInputBasicAttributeAttributeListID = 65531,

	BinaryInputBasicAttributeFeatureMapID = 65532,

	BinaryInputBasicAttributeClusterRevisionID = 65533,

	PulseWidthModulationAttributeGeneratedCommandListID = 65528,

	PulseWidthModulationAttributeAcceptedCommandListID = 65529,

	PulseWidthModulationAttributeAttributeListID = 65531,

	PulseWidthModulationAttributeFeatureMapID = 65532,

	PulseWidthModulationAttributeClusterRevisionID = 65533,

	DescriptorAttributeDeviceTypeListID = 0,

	DescriptorAttributeDeviceListID = 0,

	DescriptorAttributeServerListID = 1,

	DescriptorAttributeClientListID = 2,

	DescriptorAttributePartsListID = 3,

	DescriptorAttributeGeneratedCommandListID = 65528,

	DescriptorAttributeAcceptedCommandListID = 65529,

	DescriptorAttributeAttributeListID = 65531,

	DescriptorAttributeFeatureMapID = 65532,

	DescriptorAttributeClusterRevisionID = 65533,

	BindingAttributeBindingID = 0,

	BindingAttributeGeneratedCommandListID = 65528,

	BindingAttributeAcceptedCommandListID = 65529,

	BindingAttributeAttributeListID = 65531,

	BindingAttributeFeatureMapID = 65532,

	BindingAttributeClusterRevisionID = 65533,

	AccessControlAttributeAclID = 0,

	AccessControlAttributeExtensionID = 1,

	AccessControlAttributeSubjectsPerAccessControlEntryID = 2,

	AccessControlAttributeTargetsPerAccessControlEntryID = 3,

	AccessControlAttributeAccessControlEntriesPerFabricID = 4,

	AccessControlAttributeGeneratedCommandListID = 65528,

	AccessControlAttributeAcceptedCommandListID = 65529,

	AccessControlAttributeAttributeListID = 65531,

	AccessControlAttributeFeatureMapID = 65532,

	AccessControlAttributeClusterRevisionID = 65533,

	ActionsAttributeActionListID = 0,

	ActionsAttributeEndpointListsID = 1,

	ActionsAttributeSetupURLID = 2,

	ActionsAttributeGeneratedCommandListID = 65528,

	ActionsAttributeAcceptedCommandListID = 65529,

	ActionsAttributeAttributeListID = 65531,

	ActionsAttributeFeatureMapID = 65532,

	ActionsAttributeClusterRevisionID = 65533,

	BasicAttributeDataModelRevisionID = 0,

	BasicAttributeVendorNameID = 1,

	BasicAttributeVendorIDID = 2,

	BasicAttributeProductNameID = 3,

	BasicAttributeProductIDID = 4,

	BasicAttributeNodeLabelID = 5,

	BasicAttributeLocationID = 6,

	BasicAttributeHardwareVersionID = 7,

	BasicAttributeHardwareVersionStringID = 8,

	BasicAttributeSoftwareVersionID = 9,

	BasicAttributeSoftwareVersionStringID = 10,

	BasicAttributeManufacturingDateID = 11,

	BasicAttributePartNumberID = 12,

	BasicAttributeProductURLID = 13,

	BasicAttributeProductLabelID = 14,

	BasicAttributeSerialNumberID = 15,

	BasicAttributeLocalConfigDisabledID = 16,

	BasicAttributeReachableID = 17,

	BasicAttributeUniqueIDID = 18,

	BasicAttributeCapabilityMinimaID = 19,

	BasicAttributeGeneratedCommandListID = 65528,

	BasicAttributeAcceptedCommandListID = 65529,

	BasicAttributeAttributeListID = 65531,

	BasicAttributeFeatureMapID = 65532,

	BasicAttributeClusterRevisionID = 65533,

	OtaSoftwareUpdateProviderAttributeGeneratedCommandListID = 65528,

	OtaSoftwareUpdateProviderAttributeAcceptedCommandListID = 65529,

	OtaSoftwareUpdateProviderAttributeAttributeListID = 65531,

	OtaSoftwareUpdateProviderAttributeFeatureMapID = 65532,

	OtaSoftwareUpdateProviderAttributeClusterRevisionID = 65533,

	OtaSoftwareUpdateRequestorAttributeDefaultOtaProvidersID = 0,

	OtaSoftwareUpdateRequestorAttributeUpdatePossibleID = 1,

	OtaSoftwareUpdateRequestorAttributeUpdateStateID = 2,

	OtaSoftwareUpdateRequestorAttributeUpdateStateProgressID = 3,

	OtaSoftwareUpdateRequestorAttributeGeneratedCommandListID = 65528,

	OtaSoftwareUpdateRequestorAttributeAcceptedCommandListID = 65529,

	OtaSoftwareUpdateRequestorAttributeAttributeListID = 65531,

	OtaSoftwareUpdateRequestorAttributeFeatureMapID = 65532,

	OtaSoftwareUpdateRequestorAttributeClusterRevisionID = 65533,

	LocalizationConfigurationAttributeActiveLocaleID = 0,

	LocalizationConfigurationAttributeSupportedLocalesID = 1,

	LocalizationConfigurationAttributeGeneratedCommandListID = 65528,

	LocalizationConfigurationAttributeAcceptedCommandListID = 65529,

	LocalizationConfigurationAttributeAttributeListID = 65531,

	LocalizationConfigurationAttributeFeatureMapID = 65532,

	LocalizationConfigurationAttributeClusterRevisionID = 65533,

	TimeFormatLocalizationAttributeHourFormatID = 0,

	TimeFormatLocalizationAttributeActiveCalendarTypeID = 1,

	TimeFormatLocalizationAttributeSupportedCalendarTypesID = 2,

	TimeFormatLocalizationAttributeGeneratedCommandListID = 65528,

	TimeFormatLocalizationAttributeAcceptedCommandListID = 65529,

	TimeFormatLocalizationAttributeAttributeListID = 65531,

	TimeFormatLocalizationAttributeFeatureMapID = 65532,

	TimeFormatLocalizationAttributeClusterRevisionID = 65533,

	UnitLocalizationAttributeTemperatureUnitID = 0,

	UnitLocalizationAttributeGeneratedCommandListID = 65528,

	UnitLocalizationAttributeAcceptedCommandListID = 65529,

	UnitLocalizationAttributeAttributeListID = 65531,

	UnitLocalizationAttributeFeatureMapID = 65532,

	UnitLocalizationAttributeClusterRevisionID = 65533,

	PowerSourceConfigurationAttributeSourcesID = 0,

	PowerSourceConfigurationAttributeGeneratedCommandListID = 65528,

	PowerSourceConfigurationAttributeAcceptedCommandListID = 65529,

	PowerSourceConfigurationAttributeAttributeListID = 65531,

	PowerSourceConfigurationAttributeFeatureMapID = 65532,

	PowerSourceConfigurationAttributeClusterRevisionID = 65533,

	PowerSourceAttributeStatusID = 0,

	PowerSourceAttributeOrderID = 1,

	PowerSourceAttributeDescriptionID = 2,

	PowerSourceAttributeWiredAssessedInputVoltageID = 3,

	PowerSourceAttributeWiredAssessedInputFrequencyID = 4,

	PowerSourceAttributeWiredCurrentTypeID = 5,

	PowerSourceAttributeWiredAssessedCurrentID = 6,

	PowerSourceAttributeWiredNominalVoltageID = 7,

	PowerSourceAttributeWiredMaximumCurrentID = 8,

	PowerSourceAttributeWiredPresentID = 9,

	PowerSourceAttributeActiveWiredFaultsID = 10,

	PowerSourceAttributeBatVoltageID = 11,

	PowerSourceAttributeBatPercentRemainingID = 12,

	PowerSourceAttributeBatTimeRemainingID = 13,

	PowerSourceAttributeBatChargeLevelID = 14,

	PowerSourceAttributeBatReplacementNeededID = 15,

	PowerSourceAttributeBatReplaceabilityID = 16,

	PowerSourceAttributeBatPresentID = 17,

	PowerSourceAttributeActiveBatFaultsID = 18,

	PowerSourceAttributeBatReplacementDescriptionID = 19,

	PowerSourceAttributeBatCommonDesignationID = 20,

	PowerSourceAttributeBatANSIDesignationID = 21,

	PowerSourceAttributeBatIECDesignationID = 22,

	PowerSourceAttributeBatApprovedChemistryID = 23,

	PowerSourceAttributeBatCapacityID = 24,

	PowerSourceAttributeBatQuantityID = 25,

	PowerSourceAttributeBatChargeStateID = 26,

	PowerSourceAttributeBatTimeToFullChargeID = 27,

	PowerSourceAttributeBatFunctionalWhileChargingID = 28,

	PowerSourceAttributeBatChargingCurrentID = 29,

	PowerSourceAttributeActiveBatChargeFaultsID = 30,

	PowerSourceAttributeGeneratedCommandListID = 65528,

	PowerSourceAttributeAcceptedCommandListID = 65529,

	PowerSourceAttributeAttributeListID = 65531,

	PowerSourceAttributeFeatureMapID = 65532,

	PowerSourceAttributeClusterRevisionID = 65533,

	GeneralCommissioningAttributeBreadcrumbID = 0,

	GeneralCommissioningAttributeBasicCommissioningInfoID = 1,

	GeneralCommissioningAttributeRegulatoryConfigID = 2,

	GeneralCommissioningAttributeLocationCapabilityID = 3,

	GeneralCommissioningAttributeSupportsConcurrentConnectionID = 4,

	GeneralCommissioningAttributeGeneratedCommandListID = 65528,

	GeneralCommissioningAttributeAcceptedCommandListID = 65529,

	GeneralCommissioningAttributeAttributeListID = 65531,

	GeneralCommissioningAttributeFeatureMapID = 65532,

	GeneralCommissioningAttributeClusterRevisionID = 65533,

	NetworkCommissioningAttributeMaxNetworksID = 0,

	NetworkCommissioningAttributeNetworksID = 1,

	NetworkCommissioningAttributeScanMaxTimeSecondsID = 2,

	NetworkCommissioningAttributeConnectMaxTimeSecondsID = 3,

	NetworkCommissioningAttributeInterfaceEnabledID = 4,

	NetworkCommissioningAttributeLastNetworkingStatusID = 5,

	NetworkCommissioningAttributeLastNetworkIDID = 6,

	NetworkCommissioningAttributeLastConnectErrorValueID = 7,

	NetworkCommissioningAttributeGeneratedCommandListID = 65528,

	NetworkCommissioningAttributeAcceptedCommandListID = 65529,

	NetworkCommissioningAttributeAttributeListID = 65531,

	NetworkCommissioningAttributeFeatureMapID = 65532,

	NetworkCommissioningAttributeClusterRevisionID = 65533,

	DiagnosticLogsAttributeGeneratedCommandListID = 65528,

	DiagnosticLogsAttributeAcceptedCommandListID = 65529,

	DiagnosticLogsAttributeAttributeListID = 65531,

	DiagnosticLogsAttributeFeatureMapID = 65532,

	DiagnosticLogsAttributeClusterRevisionID = 65533,

	GeneralDiagnosticsAttributeNetworkInterfacesID = 0,

	GeneralDiagnosticsAttributeRebootCountID = 1,

	GeneralDiagnosticsAttributeUpTimeID = 2,

	GeneralDiagnosticsAttributeTotalOperationalHoursID = 3,

	GeneralDiagnosticsAttributeBootReasonsID = 4,

	GeneralDiagnosticsAttributeActiveHardwareFaultsID = 5,

	GeneralDiagnosticsAttributeActiveRadioFaultsID = 6,

	GeneralDiagnosticsAttributeActiveNetworkFaultsID = 7,

	GeneralDiagnosticsAttributeTestEventTriggersEnabledID = 8,

	GeneralDiagnosticsAttributeGeneratedCommandListID = 65528,

	GeneralDiagnosticsAttributeAcceptedCommandListID = 65529,

	GeneralDiagnosticsAttributeAttributeListID = 65531,

	GeneralDiagnosticsAttributeFeatureMapID = 65532,

	GeneralDiagnosticsAttributeClusterRevisionID = 65533,

	SoftwareDiagnosticsAttributeThreadMetricsID = 0,

	SoftwareDiagnosticsAttributeCurrentHeapFreeID = 1,

	SoftwareDiagnosticsAttributeCurrentHeapUsedID = 2,

	SoftwareDiagnosticsAttributeCurrentHeapHighWatermarkID = 3,

	SoftwareDiagnosticsAttributeGeneratedCommandListID = 65528,

	SoftwareDiagnosticsAttributeAcceptedCommandListID = 65529,

	SoftwareDiagnosticsAttributeAttributeListID = 65531,

	SoftwareDiagnosticsAttributeFeatureMapID = 65532,

	SoftwareDiagnosticsAttributeClusterRevisionID = 65533,

	ThreadNetworkDiagnosticsAttributeChannelID = 0,

	ThreadNetworkDiagnosticsAttributeRoutingRoleID = 1,

	ThreadNetworkDiagnosticsAttributeNetworkNameID = 2,

	ThreadNetworkDiagnosticsAttributePanIdID = 3,

	ThreadNetworkDiagnosticsAttributeExtendedPanIdID = 4,

	ThreadNetworkDiagnosticsAttributeMeshLocalPrefixID = 5,

	ThreadNetworkDiagnosticsAttributeOverrunCountID = 6,

	ThreadNetworkDiagnosticsAttributeNeighborTableListID = 7,

	ThreadNetworkDiagnosticsAttributeRouteTableListID = 8,

	ThreadNetworkDiagnosticsAttributePartitionIdID = 9,

	ThreadNetworkDiagnosticsAttributeWeightingID = 10,

	ThreadNetworkDiagnosticsAttributeDataVersionID = 11,

	ThreadNetworkDiagnosticsAttributeStableDataVersionID = 12,

	ThreadNetworkDiagnosticsAttributeLeaderRouterIdID = 13,

	ThreadNetworkDiagnosticsAttributeDetachedRoleCountID = 14,

	ThreadNetworkDiagnosticsAttributeChildRoleCountID = 15,

	ThreadNetworkDiagnosticsAttributeRouterRoleCountID = 16,

	ThreadNetworkDiagnosticsAttributeLeaderRoleCountID = 17,

	ThreadNetworkDiagnosticsAttributeAttachAttemptCountID = 18,

	ThreadNetworkDiagnosticsAttributePartitionIdChangeCountID = 19,

	ThreadNetworkDiagnosticsAttributeBetterPartitionAttachAttemptCountID = 20,

	ThreadNetworkDiagnosticsAttributeParentChangeCountID = 21,

	ThreadNetworkDiagnosticsAttributeTxTotalCountID = 22,

	ThreadNetworkDiagnosticsAttributeTxUnicastCountID = 23,

	ThreadNetworkDiagnosticsAttributeTxBroadcastCountID = 24,

	ThreadNetworkDiagnosticsAttributeTxAckRequestedCountID = 25,

	ThreadNetworkDiagnosticsAttributeTxAckedCountID = 26,

	ThreadNetworkDiagnosticsAttributeTxNoAckRequestedCountID = 27,

	ThreadNetworkDiagnosticsAttributeTxDataCountID = 28,

	ThreadNetworkDiagnosticsAttributeTxDataPollCountID = 29,

	ThreadNetworkDiagnosticsAttributeTxBeaconCountID = 30,

	ThreadNetworkDiagnosticsAttributeTxBeaconRequestCountID = 31,

	ThreadNetworkDiagnosticsAttributeTxOtherCountID = 32,

	ThreadNetworkDiagnosticsAttributeTxRetryCountID = 33,

	ThreadNetworkDiagnosticsAttributeTxDirectMaxRetryExpiryCountID = 34,

	ThreadNetworkDiagnosticsAttributeTxIndirectMaxRetryExpiryCountID = 35,

	ThreadNetworkDiagnosticsAttributeTxErrCcaCountID = 36,

	ThreadNetworkDiagnosticsAttributeTxErrAbortCountID = 37,

	ThreadNetworkDiagnosticsAttributeTxErrBusyChannelCountID = 38,

	ThreadNetworkDiagnosticsAttributeRxTotalCountID = 39,

	ThreadNetworkDiagnosticsAttributeRxUnicastCountID = 40,

	ThreadNetworkDiagnosticsAttributeRxBroadcastCountID = 41,

	ThreadNetworkDiagnosticsAttributeRxDataCountID = 42,

	ThreadNetworkDiagnosticsAttributeRxDataPollCountID = 43,

	ThreadNetworkDiagnosticsAttributeRxBeaconCountID = 44,

	ThreadNetworkDiagnosticsAttributeRxBeaconRequestCountID = 45,

	ThreadNetworkDiagnosticsAttributeRxOtherCountID = 46,

	ThreadNetworkDiagnosticsAttributeRxAddressFilteredCountID = 47,

	ThreadNetworkDiagnosticsAttributeRxDestAddrFilteredCountID = 48,

	ThreadNetworkDiagnosticsAttributeRxDuplicatedCountID = 49,

	ThreadNetworkDiagnosticsAttributeRxErrNoFrameCountID = 50,

	ThreadNetworkDiagnosticsAttributeRxErrUnknownNeighborCountID = 51,

	ThreadNetworkDiagnosticsAttributeRxErrInvalidSrcAddrCountID = 52,

	ThreadNetworkDiagnosticsAttributeRxErrSecCountID = 53,

	ThreadNetworkDiagnosticsAttributeRxErrFcsCountID = 54,

	ThreadNetworkDiagnosticsAttributeRxErrOtherCountID = 55,

	ThreadNetworkDiagnosticsAttributeActiveTimestampID = 56,

	ThreadNetworkDiagnosticsAttributePendingTimestampID = 57,

	ThreadNetworkDiagnosticsAttributeDelayID = 58,

	ThreadNetworkDiagnosticsAttributeSecurityPolicyID = 59,

	ThreadNetworkDiagnosticsAttributeChannelPage0MaskID = 60,

	ThreadNetworkDiagnosticsAttributeOperationalDatasetComponentsID = 61,

	ThreadNetworkDiagnosticsAttributeActiveNetworkFaultsListID = 62,

	ThreadNetworkDiagnosticsAttributeGeneratedCommandListID = 65528,

	ThreadNetworkDiagnosticsAttributeAcceptedCommandListID = 65529,

	ThreadNetworkDiagnosticsAttributeAttributeListID = 65531,

	ThreadNetworkDiagnosticsAttributeFeatureMapID = 65532,

	ThreadNetworkDiagnosticsAttributeClusterRevisionID = 65533,

	WiFiNetworkDiagnosticsAttributeBssidID = 0,

	WiFiNetworkDiagnosticsAttributeSecurityTypeID = 1,

	WiFiNetworkDiagnosticsAttributeWiFiVersionID = 2,

	WiFiNetworkDiagnosticsAttributeChannelNumberID = 3,

	WiFiNetworkDiagnosticsAttributeRssiID = 4,

	WiFiNetworkDiagnosticsAttributeBeaconLostCountID = 5,

	WiFiNetworkDiagnosticsAttributeBeaconRxCountID = 6,

	WiFiNetworkDiagnosticsAttributePacketMulticastRxCountID = 7,

	WiFiNetworkDiagnosticsAttributePacketMulticastTxCountID = 8,

	WiFiNetworkDiagnosticsAttributePacketUnicastRxCountID = 9,

	WiFiNetworkDiagnosticsAttributePacketUnicastTxCountID = 10,

	WiFiNetworkDiagnosticsAttributeCurrentMaxRateID = 11,

	WiFiNetworkDiagnosticsAttributeOverrunCountID = 12,

	WiFiNetworkDiagnosticsAttributeGeneratedCommandListID = 65528,

	WiFiNetworkDiagnosticsAttributeAcceptedCommandListID = 65529,

	WiFiNetworkDiagnosticsAttributeAttributeListID = 65531,

	WiFiNetworkDiagnosticsAttributeFeatureMapID = 65532,

	WiFiNetworkDiagnosticsAttributeClusterRevisionID = 65533,

	EthernetNetworkDiagnosticsAttributePHYRateID = 0,

	EthernetNetworkDiagnosticsAttributeFullDuplexID = 1,

	EthernetNetworkDiagnosticsAttributePacketRxCountID = 2,

	EthernetNetworkDiagnosticsAttributePacketTxCountID = 3,

	EthernetNetworkDiagnosticsAttributeTxErrCountID = 4,

	EthernetNetworkDiagnosticsAttributeCollisionCountID = 5,

	EthernetNetworkDiagnosticsAttributeOverrunCountID = 6,

	EthernetNetworkDiagnosticsAttributeCarrierDetectID = 7,

	EthernetNetworkDiagnosticsAttributeTimeSinceResetID = 8,

	EthernetNetworkDiagnosticsAttributeGeneratedCommandListID = 65528,

	EthernetNetworkDiagnosticsAttributeAcceptedCommandListID = 65529,

	EthernetNetworkDiagnosticsAttributeAttributeListID = 65531,

	EthernetNetworkDiagnosticsAttributeFeatureMapID = 65532,

	EthernetNetworkDiagnosticsAttributeClusterRevisionID = 65533,

	TimeSynchronizationAttributeUTCTimeID = 0,

	TimeSynchronizationAttributeGranularityID = 1,

	TimeSynchronizationAttributeTimeSourceID = 2,

	TimeSynchronizationAttributeTrustedTimeNodeIdID = 3,

	TimeSynchronizationAttributeDefaultNtpID = 4,

	TimeSynchronizationAttributeTimeZoneID = 5,

	TimeSynchronizationAttributeDstOffsetID = 6,

	TimeSynchronizationAttributeLocalTimeID = 7,

	TimeSynchronizationAttributeTimeZoneDatabaseID = 8,

	TimeSynchronizationAttributeNtpServerPortID = 9,

	TimeSynchronizationAttributeGeneratedCommandListID = 65528,

	TimeSynchronizationAttributeAcceptedCommandListID = 65529,

	TimeSynchronizationAttributeAttributeListID = 65531,

	TimeSynchronizationAttributeFeatureMapID = 65532,

	TimeSynchronizationAttributeClusterRevisionID = 65533,

	BridgedDeviceBasicAttributeVendorNameID = 1,

	BridgedDeviceBasicAttributeVendorIDID = 2,

	BridgedDeviceBasicAttributeProductNameID = 3,

	BridgedDeviceBasicAttributeNodeLabelID = 5,

	BridgedDeviceBasicAttributeHardwareVersionID = 7,

	BridgedDeviceBasicAttributeHardwareVersionStringID = 8,

	BridgedDeviceBasicAttributeSoftwareVersionID = 9,

	BridgedDeviceBasicAttributeSoftwareVersionStringID = 10,

	BridgedDeviceBasicAttributeManufacturingDateID = 11,

	BridgedDeviceBasicAttributePartNumberID = 12,

	BridgedDeviceBasicAttributeProductURLID = 13,

	BridgedDeviceBasicAttributeProductLabelID = 14,

	BridgedDeviceBasicAttributeSerialNumberID = 15,

	BridgedDeviceBasicAttributeReachableID = 17,

	BridgedDeviceBasicAttributeUniqueIDID = 18,

	BridgedDeviceBasicAttributeGeneratedCommandListID = 65528,

	BridgedDeviceBasicAttributeAcceptedCommandListID = 65529,

	BridgedDeviceBasicAttributeAttributeListID = 65531,

	BridgedDeviceBasicAttributeFeatureMapID = 65532,

	BridgedDeviceBasicAttributeClusterRevisionID = 65533,

	SwitchAttributeNumberOfPositionsID = 0,

	SwitchAttributeCurrentPositionID = 1,

	SwitchAttributeMultiPressMaxID = 2,

	SwitchAttributeGeneratedCommandListID = 65528,

	SwitchAttributeAcceptedCommandListID = 65529,

	SwitchAttributeAttributeListID = 65531,

	SwitchAttributeFeatureMapID = 65532,

	SwitchAttributeClusterRevisionID = 65533,

	AdministratorCommissioningAttributeWindowStatusID = 0,

	AdministratorCommissioningAttributeAdminFabricIndexID = 1,

	AdministratorCommissioningAttributeAdminVendorIdID = 2,

	AdministratorCommissioningAttributeGeneratedCommandListID = 65528,

	AdministratorCommissioningAttributeAcceptedCommandListID = 65529,

	AdministratorCommissioningAttributeAttributeListID = 65531,

	AdministratorCommissioningAttributeFeatureMapID = 65532,

	AdministratorCommissioningAttributeClusterRevisionID = 65533,

	OperationalCredentialsAttributeNOCsID = 0,

	OperationalCredentialsAttributeFabricsID = 1,

	OperationalCredentialsAttributeSupportedFabricsID = 2,

	OperationalCredentialsAttributeCommissionedFabricsID = 3,

	OperationalCredentialsAttributeTrustedRootCertificatesID = 4,

	OperationalCredentialsAttributeCurrentFabricIndexID = 5,

	OperationalCredentialsAttributeGeneratedCommandListID = 65528,

	OperationalCredentialsAttributeAcceptedCommandListID = 65529,

	OperationalCredentialsAttributeAttributeListID = 65531,

	OperationalCredentialsAttributeFeatureMapID = 65532,

	OperationalCredentialsAttributeClusterRevisionID = 65533,

	GroupKeyManagementAttributeGroupKeyMapID = 0,

	GroupKeyManagementAttributeGroupTableID = 1,

	GroupKeyManagementAttributeMaxGroupsPerFabricID = 2,

	GroupKeyManagementAttributeMaxGroupKeysPerFabricID = 3,

	GroupKeyManagementAttributeGeneratedCommandListID = 65528,

	GroupKeyManagementAttributeAcceptedCommandListID = 65529,

	GroupKeyManagementAttributeAttributeListID = 65531,

	GroupKeyManagementAttributeFeatureMapID = 65532,

	GroupKeyManagementAttributeClusterRevisionID = 65533,

	FixedLabelAttributeLabelListID = 0,

	FixedLabelAttributeGeneratedCommandListID = 65528,

	FixedLabelAttributeAcceptedCommandListID = 65529,

	FixedLabelAttributeAttributeListID = 65531,

	FixedLabelAttributeFeatureMapID = 65532,

	FixedLabelAttributeClusterRevisionID = 65533,

	UserLabelAttributeLabelListID = 0,

	UserLabelAttributeGeneratedCommandListID = 65528,

	UserLabelAttributeAcceptedCommandListID = 65529,

	UserLabelAttributeAttributeListID = 65531,

	UserLabelAttributeFeatureMapID = 65532,

	UserLabelAttributeClusterRevisionID = 65533,

	ProxyConfigurationAttributeGeneratedCommandListID = 65528,

	ProxyConfigurationAttributeAcceptedCommandListID = 65529,

	ProxyConfigurationAttributeAttributeListID = 65531,

	ProxyConfigurationAttributeFeatureMapID = 65532,

	ProxyConfigurationAttributeClusterRevisionID = 65533,

	ProxyDiscoveryAttributeGeneratedCommandListID = 65528,

	ProxyDiscoveryAttributeAcceptedCommandListID = 65529,

	ProxyDiscoveryAttributeAttributeListID = 65531,

	ProxyDiscoveryAttributeFeatureMapID = 65532,

	ProxyDiscoveryAttributeClusterRevisionID = 65533,

	ProxyValidAttributeGeneratedCommandListID = 65528,

	ProxyValidAttributeAcceptedCommandListID = 65529,

	ProxyValidAttributeAttributeListID = 65531,

	ProxyValidAttributeFeatureMapID = 65532,

	ProxyValidAttributeClusterRevisionID = 65533,

	BooleanStateAttributeStateValueID = 0,

	BooleanStateAttributeGeneratedCommandListID = 65528,

	BooleanStateAttributeAcceptedCommandListID = 65529,

	BooleanStateAttributeAttributeListID = 65531,

	BooleanStateAttributeFeatureMapID = 65532,

	BooleanStateAttributeClusterRevisionID = 65533,

	ModeSelectAttributeDescriptionID = 0,

	ModeSelectAttributeStandardNamespaceID = 1,

	ModeSelectAttributeSupportedModesID = 2,

	ModeSelectAttributeCurrentModeID = 3,

	ModeSelectAttributeStartUpModeID = 4,

	ModeSelectAttributeOnModeID = 5,

	ModeSelectAttributeGeneratedCommandListID = 65528,

	ModeSelectAttributeAcceptedCommandListID = 65529,

	ModeSelectAttributeAttributeListID = 65531,

	ModeSelectAttributeFeatureMapID = 65532,

	ModeSelectAttributeClusterRevisionID = 65533,

	DoorLockAttributeLockStateID = 0,

	DoorLockAttributeLockTypeID = 1,

	DoorLockAttributeActuatorEnabledID = 2,

	DoorLockAttributeDoorStateID = 3,

	DoorLockAttributeDoorOpenEventsID = 4,

	DoorLockAttributeDoorClosedEventsID = 5,

	DoorLockAttributeOpenPeriodID = 6,

	DoorLockAttributeNumberOfTotalUsersSupportedID = 17,

	DoorLockAttributeNumberOfPINUsersSupportedID = 18,

	DoorLockAttributeNumberOfRFIDUsersSupportedID = 19,

	DoorLockAttributeNumberOfWeekDaySchedulesSupportedPerUserID = 20,

	DoorLockAttributeNumberOfYearDaySchedulesSupportedPerUserID = 21,

	DoorLockAttributeNumberOfHolidaySchedulesSupportedID = 22,

	DoorLockAttributeMaxPINCodeLengthID = 23,

	DoorLockAttributeMinPINCodeLengthID = 24,

	DoorLockAttributeMaxRFIDCodeLengthID = 25,

	DoorLockAttributeMinRFIDCodeLengthID = 26,

	DoorLockAttributeCredentialRulesSupportID = 27,

	DoorLockAttributeNumberOfCredentialsSupportedPerUserID = 28,

	DoorLockAttributeLanguageID = 33,

	DoorLockAttributeLEDSettingsID = 34,

	DoorLockAttributeAutoRelockTimeID = 35,

	DoorLockAttributeSoundVolumeID = 36,

	DoorLockAttributeOperatingModeID = 37,

	DoorLockAttributeSupportedOperatingModesID = 38,

	DoorLockAttributeDefaultConfigurationRegisterID = 39,

	DoorLockAttributeEnableLocalProgrammingID = 40,

	DoorLockAttributeEnableOneTouchLockingID = 41,

	DoorLockAttributeEnableInsideStatusLEDID = 42,

	DoorLockAttributeEnablePrivacyModeButtonID = 43,

	DoorLockAttributeLocalProgrammingFeaturesID = 44,

	DoorLockAttributeWrongCodeEntryLimitID = 48,

	DoorLockAttributeUserCodeTemporaryDisableTimeID = 49,

	DoorLockAttributeSendPINOverTheAirID = 50,

	DoorLockAttributeRequirePINforRemoteOperationID = 51,

	DoorLockAttributeExpiringUserTimeoutID = 53,

	DoorLockAttributeGeneratedCommandListID = 65528,

	DoorLockAttributeAcceptedCommandListID = 65529,

	DoorLockAttributeAttributeListID = 65531,

	DoorLockAttributeFeatureMapID = 65532,

	DoorLockAttributeClusterRevisionID = 65533,

	WindowCoveringAttributeTypeID = 0,

	WindowCoveringAttributePhysicalClosedLimitLiftID = 1,

	WindowCoveringAttributePhysicalClosedLimitTiltID = 2,

	WindowCoveringAttributeCurrentPositionLiftID = 3,

	WindowCoveringAttributeCurrentPositionTiltID = 4,

	WindowCoveringAttributeNumberOfActuationsLiftID = 5,

	WindowCoveringAttributeNumberOfActuationsTiltID = 6,

	WindowCoveringAttributeConfigStatusID = 7,

	WindowCoveringAttributeCurrentPositionLiftPercentageID = 8,

	WindowCoveringAttributeCurrentPositionTiltPercentageID = 9,

	WindowCoveringAttributeOperationalStatusID = 10,

	WindowCoveringAttributeTargetPositionLiftPercent100thsID = 11,

	WindowCoveringAttributeTargetPositionTiltPercent100thsID = 12,

	WindowCoveringAttributeEndProductTypeID = 13,

	WindowCoveringAttributeCurrentPositionLiftPercent100thsID = 14,

	WindowCoveringAttributeCurrentPositionTiltPercent100thsID = 15,

	WindowCoveringAttributeInstalledOpenLimitLiftID = 16,

	WindowCoveringAttributeInstalledClosedLimitLiftID = 17,

	WindowCoveringAttributeInstalledOpenLimitTiltID = 18,

	WindowCoveringAttributeInstalledClosedLimitTiltID = 19,

	WindowCoveringAttributeModeID = 23,

	WindowCoveringAttributeSafetyStatusID = 26,

	WindowCoveringAttributeGeneratedCommandListID = 65528,

	WindowCoveringAttributeAcceptedCommandListID = 65529,

	WindowCoveringAttributeAttributeListID = 65531,

	WindowCoveringAttributeFeatureMapID = 65532,

	WindowCoveringAttributeClusterRevisionID = 65533,

	BarrierControlAttributeBarrierMovingStateID = 1,

	BarrierControlAttributeBarrierSafetyStatusID = 2,

	BarrierControlAttributeBarrierCapabilitiesID = 3,

	BarrierControlAttributeBarrierOpenEventsID = 4,

	BarrierControlAttributeBarrierCloseEventsID = 5,

	BarrierControlAttributeBarrierCommandOpenEventsID = 6,

	BarrierControlAttributeBarrierCommandCloseEventsID = 7,

	BarrierControlAttributeBarrierOpenPeriodID = 8,

	BarrierControlAttributeBarrierClosePeriodID = 9,

	BarrierControlAttributeBarrierPositionID = 10,

	BarrierControlAttributeGeneratedCommandListID = 65528,

	BarrierControlAttributeAcceptedCommandListID = 65529,

	BarrierControlAttributeAttributeListID = 65531,

	BarrierControlAttributeFeatureMapID = 65532,

	BarrierControlAttributeClusterRevisionID = 65533,

	PumpConfigurationAndControlAttributeMaxPressureID = 0,

	PumpConfigurationAndControlAttributeMaxSpeedID = 1,

	PumpConfigurationAndControlAttributeMaxFlowID = 2,

	PumpConfigurationAndControlAttributeMinConstPressureID = 3,

	PumpConfigurationAndControlAttributeMaxConstPressureID = 4,

	PumpConfigurationAndControlAttributeMinCompPressureID = 5,

	PumpConfigurationAndControlAttributeMaxCompPressureID = 6,

	PumpConfigurationAndControlAttributeMinConstSpeedID = 7,

	PumpConfigurationAndControlAttributeMaxConstSpeedID = 8,

	PumpConfigurationAndControlAttributeMinConstFlowID = 9,

	PumpConfigurationAndControlAttributeMaxConstFlowID = 10,

	PumpConfigurationAndControlAttributeMinConstTempID = 11,

	PumpConfigurationAndControlAttributeMaxConstTempID = 12,

	PumpConfigurationAndControlAttributePumpStatusID = 16,

	PumpConfigurationAndControlAttributeEffectiveOperationModeID = 17,

	PumpConfigurationAndControlAttributeEffectiveControlModeID = 18,

	PumpConfigurationAndControlAttributeCapacityID = 19,

	PumpConfigurationAndControlAttributeSpeedID = 20,

	PumpConfigurationAndControlAttributeLifetimeRunningHoursID = 21,

	PumpConfigurationAndControlAttributePowerID = 22,

	PumpConfigurationAndControlAttributeLifetimeEnergyConsumedID = 23,

	PumpConfigurationAndControlAttributeOperationModeID = 32,

	PumpConfigurationAndControlAttributeControlModeID = 33,

	PumpConfigurationAndControlAttributeGeneratedCommandListID = 65528,

	PumpConfigurationAndControlAttributeAcceptedCommandListID = 65529,

	PumpConfigurationAndControlAttributeAttributeListID = 65531,

	PumpConfigurationAndControlAttributeFeatureMapID = 65532,

	PumpConfigurationAndControlAttributeClusterRevisionID = 65533,

	ThermostatAttributeLocalTemperatureID = 0,

	ThermostatAttributeOutdoorTemperatureID = 1,

	ThermostatAttributeOccupancyID = 2,

	ThermostatAttributeAbsMinHeatSetpointLimitID = 3,

	ThermostatAttributeAbsMaxHeatSetpointLimitID = 4,

	ThermostatAttributeAbsMinCoolSetpointLimitID = 5,

	ThermostatAttributeAbsMaxCoolSetpointLimitID = 6,

	ThermostatAttributePICoolingDemandID = 7,

	ThermostatAttributePIHeatingDemandID = 8,

	ThermostatAttributeHVACSystemTypeConfigurationID = 9,

	ThermostatAttributeLocalTemperatureCalibrationID = 16,

	ThermostatAttributeOccupiedCoolingSetpointID = 17,

	ThermostatAttributeOccupiedHeatingSetpointID = 18,

	ThermostatAttributeUnoccupiedCoolingSetpointID = 19,

	ThermostatAttributeUnoccupiedHeatingSetpointID = 20,

	ThermostatAttributeMinHeatSetpointLimitID = 21,

	ThermostatAttributeMaxHeatSetpointLimitID = 22,

	ThermostatAttributeMinCoolSetpointLimitID = 23,

	ThermostatAttributeMaxCoolSetpointLimitID = 24,

	ThermostatAttributeMinSetpointDeadBandID = 25,

	ThermostatAttributeRemoteSensingID = 26,

	ThermostatAttributeControlSequenceOfOperationID = 27,

	ThermostatAttributeSystemModeID = 28,

	ThermostatAttributeThermostatRunningModeID = 30,

	ThermostatAttributeStartOfWeekID = 32,

	ThermostatAttributeNumberOfWeeklyTransitionsID = 33,

	ThermostatAttributeNumberOfDailyTransitionsID = 34,

	ThermostatAttributeTemperatureSetpointHoldID = 35,

	ThermostatAttributeTemperatureSetpointHoldDurationID = 36,

	ThermostatAttributeThermostatProgrammingOperationModeID = 37,

	ThermostatAttributeThermostatRunningStateID = 41,

	ThermostatAttributeSetpointChangeSourceID = 48,

	ThermostatAttributeSetpointChangeAmountID = 49,

	ThermostatAttributeSetpointChangeSourceTimestampID = 50,

	ThermostatAttributeOccupiedSetbackID = 52,

	ThermostatAttributeOccupiedSetbackMinID = 53,

	ThermostatAttributeOccupiedSetbackMaxID = 54,

	ThermostatAttributeUnoccupiedSetbackID = 55,

	ThermostatAttributeUnoccupiedSetbackMinID = 56,

	ThermostatAttributeUnoccupiedSetbackMaxID = 57,

	ThermostatAttributeEmergencyHeatDeltaID = 58,

	ThermostatAttributeACTypeID = 64,

	ThermostatAttributeACCapacityID = 65,

	ThermostatAttributeACRefrigerantTypeID = 66,

	ThermostatAttributeACCompressorTypeID = 67,

	ThermostatAttributeACErrorCodeID = 68,

	ThermostatAttributeACLouverPositionID = 69,

	ThermostatAttributeACCoilTemperatureID = 70,

	ThermostatAttributeACCapacityformatID = 71,

	ThermostatAttributeGeneratedCommandListID = 65528,

	ThermostatAttributeAcceptedCommandListID = 65529,

	ThermostatAttributeAttributeListID = 65531,

	ThermostatAttributeFeatureMapID = 65532,

	ThermostatAttributeClusterRevisionID = 65533,

	FanControlAttributeFanModeID = 0,

	FanControlAttributeFanModeSequenceID = 1,

	FanControlAttributePercentSettingID = 2,

	FanControlAttributePercentCurrentID = 3,

	FanControlAttributeSpeedMaxID = 4,

	FanControlAttributeSpeedSettingID = 5,

	FanControlAttributeSpeedCurrentID = 6,

	FanControlAttributeRockSupportID = 7,

	FanControlAttributeRockSettingID = 8,

	FanControlAttributeWindSupportID = 9,

	FanControlAttributeWindSettingID = 10,

	FanControlAttributeGeneratedCommandListID = 65528,

	FanControlAttributeAcceptedCommandListID = 65529,

	FanControlAttributeAttributeListID = 65531,

	FanControlAttributeFeatureMapID = 65532,

	FanControlAttributeClusterRevisionID = 65533,

	ThermostatUserInterfaceConfigurationAttributeTemperatureDisplayModeID = 0,

	ThermostatUserInterfaceConfigurationAttributeKeypadLockoutID = 1,

	ThermostatUserInterfaceConfigurationAttributeScheduleProgrammingVisibilityID = 2,

	ThermostatUserInterfaceConfigurationAttributeGeneratedCommandListID = 65528,

	ThermostatUserInterfaceConfigurationAttributeAcceptedCommandListID = 65529,

	ThermostatUserInterfaceConfigurationAttributeAttributeListID = 65531,

	ThermostatUserInterfaceConfigurationAttributeFeatureMapID = 65532,

	ThermostatUserInterfaceConfigurationAttributeClusterRevisionID = 65533,

	ColorControlAttributeCurrentHueID = 0,

	ColorControlAttributeCurrentSaturationID = 1,

	ColorControlAttributeRemainingTimeID = 2,

	ColorControlAttributeCurrentXID = 3,

	ColorControlAttributeCurrentYID = 4,

	ColorControlAttributeDriftCompensationID = 5,

	ColorControlAttributeCompensationTextID = 6,

	ColorControlAttributeColorTemperatureMiredsID = 7,

	ColorControlAttributeColorModeID = 8,

	ColorControlAttributeOptionsID = 15,

	ColorControlAttributeNumberOfPrimariesID = 16,

	ColorControlAttributePrimary1XID = 17,

	ColorControlAttributePrimary1YID = 18,

	ColorControlAttributePrimary1IntensityID = 19,

	ColorControlAttributePrimary2XID = 21,

	ColorControlAttributePrimary2YID = 22,

	ColorControlAttributePrimary2IntensityID = 23,

	ColorControlAttributePrimary3XID = 25,

	ColorControlAttributePrimary3YID = 26,

	ColorControlAttributePrimary3IntensityID = 27,

	ColorControlAttributePrimary4XID = 32,

	ColorControlAttributePrimary4YID = 33,

	ColorControlAttributePrimary4IntensityID = 34,

	ColorControlAttributePrimary5XID = 36,

	ColorControlAttributePrimary5YID = 37,

	ColorControlAttributePrimary5IntensityID = 38,

	ColorControlAttributePrimary6XID = 40,

	ColorControlAttributePrimary6YID = 41,

	ColorControlAttributePrimary6IntensityID = 42,

	ColorControlAttributeWhitePointXID = 48,

	ColorControlAttributeWhitePointYID = 49,

	ColorControlAttributeColorPointRXID = 50,

	ColorControlAttributeColorPointRYID = 51,

	ColorControlAttributeColorPointRIntensityID = 52,

	ColorControlAttributeColorPointGXID = 54,

	ColorControlAttributeColorPointGYID = 55,

	ColorControlAttributeColorPointGIntensityID = 56,

	ColorControlAttributeColorPointBXID = 58,

	ColorControlAttributeColorPointBYID = 59,

	ColorControlAttributeColorPointBIntensityID = 60,

	ColorControlAttributeEnhancedCurrentHueID = 16384,

	ColorControlAttributeEnhancedColorModeID = 16385,

	ColorControlAttributeColorLoopActiveID = 16386,

	ColorControlAttributeColorLoopDirectionID = 16387,

	ColorControlAttributeColorLoopTimeID = 16388,

	ColorControlAttributeColorLoopStartEnhancedHueID = 16389,

	ColorControlAttributeColorLoopStoredEnhancedHueID = 16390,

	ColorControlAttributeColorCapabilitiesID = 16394,

	ColorControlAttributeColorTempPhysicalMinMiredsID = 16395,

	ColorControlAttributeColorTempPhysicalMaxMiredsID = 16396,

	ColorControlAttributeCoupleColorTempToLevelMinMiredsID = 16397,

	ColorControlAttributeStartUpColorTemperatureMiredsID = 16400,

	ColorControlAttributeGeneratedCommandListID = 65528,

	ColorControlAttributeAcceptedCommandListID = 65529,

	ColorControlAttributeAttributeListID = 65531,

	ColorControlAttributeFeatureMapID = 65532,

	ColorControlAttributeClusterRevisionID = 65533,

	BallastConfigurationAttributePhysicalMinLevelID = 0,

	BallastConfigurationAttributePhysicalMaxLevelID = 1,

	BallastConfigurationAttributeBallastStatusID = 2,

	BallastConfigurationAttributeMinLevelID = 16,

	BallastConfigurationAttributeMaxLevelID = 17,

	BallastConfigurationAttributeIntrinsicBalanceFactorID = 20,

	BallastConfigurationAttributeBallastFactorAdjustmentID = 21,

	BallastConfigurationAttributeLampQuantityID = 32,

	BallastConfigurationAttributeLampTypeID = 48,

	BallastConfigurationAttributeLampManufacturerID = 49,

	BallastConfigurationAttributeLampRatedHoursID = 50,

	BallastConfigurationAttributeLampBurnHoursID = 51,

	BallastConfigurationAttributeLampAlarmModeID = 52,

	BallastConfigurationAttributeLampBurnHoursTripPointID = 53,

	BallastConfigurationAttributeGeneratedCommandListID = 65528,

	BallastConfigurationAttributeAcceptedCommandListID = 65529,

	BallastConfigurationAttributeAttributeListID = 65531,

	BallastConfigurationAttributeFeatureMapID = 65532,

	BallastConfigurationAttributeClusterRevisionID = 65533,

	IlluminanceMeasurementAttributeMeasuredValueID = 0,

	IlluminanceMeasurementAttributeMinMeasuredValueID = 1,

	IlluminanceMeasurementAttributeMaxMeasuredValueID = 2,

	IlluminanceMeasurementAttributeToleranceID = 3,

	IlluminanceMeasurementAttributeLightSensorTypeID = 4,

	IlluminanceMeasurementAttributeGeneratedCommandListID = 65528,

	IlluminanceMeasurementAttributeAcceptedCommandListID = 65529,

	IlluminanceMeasurementAttributeAttributeListID = 65531,

	IlluminanceMeasurementAttributeFeatureMapID = 65532,

	IlluminanceMeasurementAttributeClusterRevisionID = 65533,

	TemperatureMeasurementAttributeMeasuredValueID = 0,

	TemperatureMeasurementAttributeMinMeasuredValueID = 1,

	TemperatureMeasurementAttributeMaxMeasuredValueID = 2,

	TemperatureMeasurementAttributeToleranceID = 3,

	TemperatureMeasurementAttributeGeneratedCommandListID = 65528,

	TemperatureMeasurementAttributeAcceptedCommandListID = 65529,

	TemperatureMeasurementAttributeAttributeListID = 65531,

	TemperatureMeasurementAttributeFeatureMapID = 65532,

	TemperatureMeasurementAttributeClusterRevisionID = 65533,

	PressureMeasurementAttributeMeasuredValueID = 0,

	PressureMeasurementAttributeMinMeasuredValueID = 1,

	PressureMeasurementAttributeMaxMeasuredValueID = 2,

	PressureMeasurementAttributeToleranceID = 3,

	PressureMeasurementAttributeScaledValueID = 16,

	PressureMeasurementAttributeMinScaledValueID = 17,

	PressureMeasurementAttributeMaxScaledValueID = 18,

	PressureMeasurementAttributeScaledToleranceID = 19,

	PressureMeasurementAttributeScaleID = 20,

	PressureMeasurementAttributeGeneratedCommandListID = 65528,

	PressureMeasurementAttributeAcceptedCommandListID = 65529,

	PressureMeasurementAttributeAttributeListID = 65531,

	PressureMeasurementAttributeFeatureMapID = 65532,

	PressureMeasurementAttributeClusterRevisionID = 65533,

	FlowMeasurementAttributeMeasuredValueID = 0,

	FlowMeasurementAttributeMinMeasuredValueID = 1,

	FlowMeasurementAttributeMaxMeasuredValueID = 2,

	FlowMeasurementAttributeToleranceID = 3,

	FlowMeasurementAttributeGeneratedCommandListID = 65528,

	FlowMeasurementAttributeAcceptedCommandListID = 65529,

	FlowMeasurementAttributeAttributeListID = 65531,

	FlowMeasurementAttributeFeatureMapID = 65532,

	FlowMeasurementAttributeClusterRevisionID = 65533,

	RelativeHumidityMeasurementAttributeMeasuredValueID = 0,

	RelativeHumidityMeasurementAttributeMinMeasuredValueID = 1,

	RelativeHumidityMeasurementAttributeMaxMeasuredValueID = 2,

	RelativeHumidityMeasurementAttributeToleranceID = 3,

	RelativeHumidityMeasurementAttributeGeneratedCommandListID = 65528,

	RelativeHumidityMeasurementAttributeAcceptedCommandListID = 65529,

	RelativeHumidityMeasurementAttributeAttributeListID = 65531,

	RelativeHumidityMeasurementAttributeFeatureMapID = 65532,

	RelativeHumidityMeasurementAttributeClusterRevisionID = 65533,

	OccupancySensingAttributeOccupancyID = 0,

	OccupancySensingAttributeOccupancySensorTypeID = 1,

	OccupancySensingAttributeOccupancySensorTypeBitmapID = 2,

	OccupancySensingAttributePirOccupiedToUnoccupiedDelayID = 16,

	OccupancySensingAttributePirUnoccupiedToOccupiedDelayID = 17,

	OccupancySensingAttributePirUnoccupiedToOccupiedThresholdID = 18,

	OccupancySensingAttributeUltrasonicOccupiedToUnoccupiedDelayID = 32,

	OccupancySensingAttributeUltrasonicUnoccupiedToOccupiedDelayID = 33,

	OccupancySensingAttributeUltrasonicUnoccupiedToOccupiedThresholdID = 34,

	OccupancySensingAttributePhysicalContactOccupiedToUnoccupiedDelayID = 48,

	OccupancySensingAttributePhysicalContactUnoccupiedToOccupiedDelayID = 49,

	OccupancySensingAttributePhysicalContactUnoccupiedToOccupiedThresholdID = 50,

	OccupancySensingAttributeGeneratedCommandListID = 65528,

	OccupancySensingAttributeAcceptedCommandListID = 65529,

	OccupancySensingAttributeAttributeListID = 65531,

	OccupancySensingAttributeFeatureMapID = 65532,

	OccupancySensingAttributeClusterRevisionID = 65533,

	WakeOnLanAttributeMACAddressID = 0,

	WakeOnLanAttributeGeneratedCommandListID = 65528,

	WakeOnLanAttributeAcceptedCommandListID = 65529,

	WakeOnLanAttributeAttributeListID = 65531,

	WakeOnLanAttributeFeatureMapID = 65532,

	WakeOnLanAttributeClusterRevisionID = 65533,

	ChannelAttributeChannelListID = 0,

	ChannelAttributeLineupID = 1,

	ChannelAttributeCurrentChannelID = 2,

	ChannelAttributeGeneratedCommandListID = 65528,

	ChannelAttributeAcceptedCommandListID = 65529,

	ChannelAttributeAttributeListID = 65531,

	ChannelAttributeFeatureMapID = 65532,

	ChannelAttributeClusterRevisionID = 65533,

	TargetNavigatorAttributeTargetListID = 0,

	TargetNavigatorAttributeCurrentTargetID = 1,

	TargetNavigatorAttributeGeneratedCommandListID = 65528,

	TargetNavigatorAttributeAcceptedCommandListID = 65529,

	TargetNavigatorAttributeAttributeListID = 65531,

	TargetNavigatorAttributeFeatureMapID = 65532,

	TargetNavigatorAttributeClusterRevisionID = 65533,

	MediaPlaybackAttributeCurrentStateID = 0,

	MediaPlaybackAttributeStartTimeID = 1,

	MediaPlaybackAttributeDurationID = 2,

	MediaPlaybackAttributeSampledPositionID = 3,

	MediaPlaybackAttributePlaybackSpeedID = 4,

	MediaPlaybackAttributeSeekRangeEndID = 5,

	MediaPlaybackAttributeSeekRangeStartID = 6,

	MediaPlaybackAttributeGeneratedCommandListID = 65528,

	MediaPlaybackAttributeAcceptedCommandListID = 65529,

	MediaPlaybackAttributeAttributeListID = 65531,

	MediaPlaybackAttributeFeatureMapID = 65532,

	MediaPlaybackAttributeClusterRevisionID = 65533,

	MediaInputAttributeInputListID = 0,

	MediaInputAttributeCurrentInputID = 1,

	MediaInputAttributeGeneratedCommandListID = 65528,

	MediaInputAttributeAcceptedCommandListID = 65529,

	MediaInputAttributeAttributeListID = 65531,

	MediaInputAttributeFeatureMapID = 65532,

	MediaInputAttributeClusterRevisionID = 65533,

	LowPowerAttributeGeneratedCommandListID = 65528,

	LowPowerAttributeAcceptedCommandListID = 65529,

	LowPowerAttributeAttributeListID = 65531,

	LowPowerAttributeFeatureMapID = 65532,

	LowPowerAttributeClusterRevisionID = 65533,

	KeypadInputAttributeGeneratedCommandListID = 65528,

	KeypadInputAttributeAcceptedCommandListID = 65529,

	KeypadInputAttributeAttributeListID = 65531,

	KeypadInputAttributeFeatureMapID = 65532,

	KeypadInputAttributeClusterRevisionID = 65533,

	ContentLauncherAttributeAcceptHeaderID = 0,

	ContentLauncherAttributeSupportedStreamingProtocolsID = 1,

	ContentLauncherAttributeGeneratedCommandListID = 65528,

	ContentLauncherAttributeAcceptedCommandListID = 65529,

	ContentLauncherAttributeAttributeListID = 65531,

	ContentLauncherAttributeFeatureMapID = 65532,

	ContentLauncherAttributeClusterRevisionID = 65533,

	AudioOutputAttributeOutputListID = 0,

	AudioOutputAttributeCurrentOutputID = 1,

	AudioOutputAttributeGeneratedCommandListID = 65528,

	AudioOutputAttributeAcceptedCommandListID = 65529,

	AudioOutputAttributeAttributeListID = 65531,

	AudioOutputAttributeFeatureMapID = 65532,

	AudioOutputAttributeClusterRevisionID = 65533,

	ApplicationLauncherAttributeCatalogListID = 0,

	ApplicationLauncherAttributeCurrentAppID = 1,

	ApplicationLauncherAttributeGeneratedCommandListID = 65528,

	ApplicationLauncherAttributeAcceptedCommandListID = 65529,

	ApplicationLauncherAttributeAttributeListID = 65531,

	ApplicationLauncherAttributeFeatureMapID = 65532,

	ApplicationLauncherAttributeClusterRevisionID = 65533,

	ApplicationBasicAttributeVendorNameID = 0,

	ApplicationBasicAttributeVendorIDID = 1,

	ApplicationBasicAttributeApplicationNameID = 2,

	ApplicationBasicAttributeProductIDID = 3,

	ApplicationBasicAttributeApplicationID = 4,

	ApplicationBasicAttributeStatusID = 5,

	ApplicationBasicAttributeApplicationVersionID = 6,

	ApplicationBasicAttributeAllowedVendorListID = 7,

	ApplicationBasicAttributeGeneratedCommandListID = 65528,

	ApplicationBasicAttributeAcceptedCommandListID = 65529,

	ApplicationBasicAttributeAttributeListID = 65531,

	ApplicationBasicAttributeFeatureMapID = 65532,

	ApplicationBasicAttributeClusterRevisionID = 65533,

	AccountLoginAttributeGeneratedCommandListID = 65528,

	AccountLoginAttributeAcceptedCommandListID = 65529,

	AccountLoginAttributeAttributeListID = 65531,

	AccountLoginAttributeFeatureMapID = 65532,

	AccountLoginAttributeClusterRevisionID = 65533,

	ElectricalMeasurementAttributeMeasurementTypeID = 0,

	ElectricalMeasurementAttributeDcVoltageID = 256,

	ElectricalMeasurementAttributeDcVoltageMinID = 257,

	ElectricalMeasurementAttributeDcVoltageMaxID = 258,

	ElectricalMeasurementAttributeDcCurrentID = 259,

	ElectricalMeasurementAttributeDcCurrentMinID = 260,

	ElectricalMeasurementAttributeDcCurrentMaxID = 261,

	ElectricalMeasurementAttributeDcPowerID = 262,

	ElectricalMeasurementAttributeDcPowerMinID = 263,

	ElectricalMeasurementAttributeDcPowerMaxID = 264,

	ElectricalMeasurementAttributeDcVoltageMultiplierID = 512,

	ElectricalMeasurementAttributeDcVoltageDivisorID = 513,

	ElectricalMeasurementAttributeDcCurrentMultiplierID = 514,

	ElectricalMeasurementAttributeDcCurrentDivisorID = 515,

	ElectricalMeasurementAttributeDcPowerMultiplierID = 516,

	ElectricalMeasurementAttributeDcPowerDivisorID = 517,

	ElectricalMeasurementAttributeAcFrequencyID = 768,

	ElectricalMeasurementAttributeAcFrequencyMinID = 769,

	ElectricalMeasurementAttributeAcFrequencyMaxID = 770,

	ElectricalMeasurementAttributeNeutralCurrentID = 771,

	ElectricalMeasurementAttributeTotalActivePowerID = 772,

	ElectricalMeasurementAttributeTotalReactivePowerID = 773,

	ElectricalMeasurementAttributeTotalApparentPowerID = 774,

	ElectricalMeasurementAttributeMeasured1stHarmonicCurrentID = 775,

	ElectricalMeasurementAttributeMeasured3rdHarmonicCurrentID = 776,

	ElectricalMeasurementAttributeMeasured5thHarmonicCurrentID = 777,

	ElectricalMeasurementAttributeMeasured7thHarmonicCurrentID = 778,

	ElectricalMeasurementAttributeMeasured9thHarmonicCurrentID = 779,

	ElectricalMeasurementAttributeMeasured11thHarmonicCurrentID = 780,

	ElectricalMeasurementAttributeMeasuredPhase1stHarmonicCurrentID = 781,

	ElectricalMeasurementAttributeMeasuredPhase3rdHarmonicCurrentID = 782,

	ElectricalMeasurementAttributeMeasuredPhase5thHarmonicCurrentID = 783,

	ElectricalMeasurementAttributeMeasuredPhase7thHarmonicCurrentID = 784,

	ElectricalMeasurementAttributeMeasuredPhase9thHarmonicCurrentID = 785,

	ElectricalMeasurementAttributeMeasuredPhase11thHarmonicCurrentID = 786,

	ElectricalMeasurementAttributeAcFrequencyMultiplierID = 1024,

	ElectricalMeasurementAttributeAcFrequencyDivisorID = 1025,

	ElectricalMeasurementAttributePowerMultiplierID = 1026,

	ElectricalMeasurementAttributePowerDivisorID = 1027,

	ElectricalMeasurementAttributeHarmonicCurrentMultiplierID = 1028,

	ElectricalMeasurementAttributePhaseHarmonicCurrentMultiplierID = 1029,

	ElectricalMeasurementAttributeInstantaneousVoltageID = 1280,

	ElectricalMeasurementAttributeInstantaneousLineCurrentID = 1281,

	ElectricalMeasurementAttributeInstantaneousActiveCurrentID = 1282,

	ElectricalMeasurementAttributeInstantaneousReactiveCurrentID = 1283,

	ElectricalMeasurementAttributeInstantaneousPowerID = 1284,

	ElectricalMeasurementAttributeRmsVoltageID = 1285,

	ElectricalMeasurementAttributeRmsVoltageMinID = 1286,

	ElectricalMeasurementAttributeRmsVoltageMaxID = 1287,

	ElectricalMeasurementAttributeRmsCurrentID = 1288,

	ElectricalMeasurementAttributeRmsCurrentMinID = 1289,

	ElectricalMeasurementAttributeRmsCurrentMaxID = 1290,

	ElectricalMeasurementAttributeActivePowerID = 1291,

	ElectricalMeasurementAttributeActivePowerMinID = 1292,

	ElectricalMeasurementAttributeActivePowerMaxID = 1293,

	ElectricalMeasurementAttributeReactivePowerID = 1294,

	ElectricalMeasurementAttributeApparentPowerID = 1295,

	ElectricalMeasurementAttributePowerFactorID = 1296,

	ElectricalMeasurementAttributeAverageRmsVoltageMeasurementPeriodID = 1297,

	ElectricalMeasurementAttributeAverageRmsUnderVoltageCounterID = 1299,

	ElectricalMeasurementAttributeRmsExtremeOverVoltagePeriodID = 1300,

	ElectricalMeasurementAttributeRmsExtremeUnderVoltagePeriodID = 1301,

	ElectricalMeasurementAttributeRmsVoltageSagPeriodID = 1302,

	ElectricalMeasurementAttributeRmsVoltageSwellPeriodID = 1303,

	ElectricalMeasurementAttributeAcVoltageMultiplierID = 1536,

	ElectricalMeasurementAttributeAcVoltageDivisorID = 1537,

	ElectricalMeasurementAttributeAcCurrentMultiplierID = 1538,

	ElectricalMeasurementAttributeAcCurrentDivisorID = 1539,

	ElectricalMeasurementAttributeAcPowerMultiplierID = 1540,

	ElectricalMeasurementAttributeAcPowerDivisorID = 1541,

	ElectricalMeasurementAttributeOverloadAlarmsMaskID = 1792,

	ElectricalMeasurementAttributeVoltageOverloadID = 1793,

	ElectricalMeasurementAttributeCurrentOverloadID = 1794,

	ElectricalMeasurementAttributeAcOverloadAlarmsMaskID = 2048,

	ElectricalMeasurementAttributeAcVoltageOverloadID = 2049,

	ElectricalMeasurementAttributeAcCurrentOverloadID = 2050,

	ElectricalMeasurementAttributeAcActivePowerOverloadID = 2051,

	ElectricalMeasurementAttributeAcReactivePowerOverloadID = 2052,

	ElectricalMeasurementAttributeAverageRmsOverVoltageID = 2053,

	ElectricalMeasurementAttributeAverageRmsUnderVoltageID = 2054,

	ElectricalMeasurementAttributeRmsExtremeOverVoltageID = 2055,

	ElectricalMeasurementAttributeRmsExtremeUnderVoltageID = 2056,

	ElectricalMeasurementAttributeRmsVoltageSagID = 2057,

	ElectricalMeasurementAttributeRmsVoltageSwellID = 2058,

	ElectricalMeasurementAttributeLineCurrentPhaseBID = 2305,

	ElectricalMeasurementAttributeActiveCurrentPhaseBID = 2306,

	ElectricalMeasurementAttributeReactiveCurrentPhaseBID = 2307,

	ElectricalMeasurementAttributeRmsVoltagePhaseBID = 2309,

	ElectricalMeasurementAttributeRmsVoltageMinPhaseBID = 2310,

	ElectricalMeasurementAttributeRmsVoltageMaxPhaseBID = 2311,

	ElectricalMeasurementAttributeRmsCurrentPhaseBID = 2312,

	ElectricalMeasurementAttributeRmsCurrentMinPhaseBID = 2313,

	ElectricalMeasurementAttributeRmsCurrentMaxPhaseBID = 2314,

	ElectricalMeasurementAttributeActivePowerPhaseBID = 2315,

	ElectricalMeasurementAttributeActivePowerMinPhaseBID = 2316,

	ElectricalMeasurementAttributeActivePowerMaxPhaseBID = 2317,

	ElectricalMeasurementAttributeReactivePowerPhaseBID = 2318,

	ElectricalMeasurementAttributeApparentPowerPhaseBID = 2319,

	ElectricalMeasurementAttributePowerFactorPhaseBID = 2320,

	ElectricalMeasurementAttributeAverageRmsVoltageMeasurementPeriodPhaseBID = 2321,

	ElectricalMeasurementAttributeAverageRmsOverVoltageCounterPhaseBID = 2322,

	ElectricalMeasurementAttributeAverageRmsUnderVoltageCounterPhaseBID = 2323,

	ElectricalMeasurementAttributeRmsExtremeOverVoltagePeriodPhaseBID = 2324,

	ElectricalMeasurementAttributeRmsExtremeUnderVoltagePeriodPhaseBID = 2325,

	ElectricalMeasurementAttributeRmsVoltageSagPeriodPhaseBID = 2326,

	ElectricalMeasurementAttributeRmsVoltageSwellPeriodPhaseBID = 2327,

	ElectricalMeasurementAttributeLineCurrentPhaseCID = 2561,

	ElectricalMeasurementAttributeActiveCurrentPhaseCID = 2562,

	ElectricalMeasurementAttributeReactiveCurrentPhaseCID = 2563,

	ElectricalMeasurementAttributeRmsVoltagePhaseCID = 2565,

	ElectricalMeasurementAttributeRmsVoltageMinPhaseCID = 2566,

	ElectricalMeasurementAttributeRmsVoltageMaxPhaseCID = 2567,

	ElectricalMeasurementAttributeRmsCurrentPhaseCID = 2568,

	ElectricalMeasurementAttributeRmsCurrentMinPhaseCID = 2569,

	ElectricalMeasurementAttributeRmsCurrentMaxPhaseCID = 2570,

	ElectricalMeasurementAttributeActivePowerPhaseCID = 2571,

	ElectricalMeasurementAttributeActivePowerMinPhaseCID = 2572,

	ElectricalMeasurementAttributeActivePowerMaxPhaseCID = 2573,

	ElectricalMeasurementAttributeReactivePowerPhaseCID = 2574,

	ElectricalMeasurementAttributeApparentPowerPhaseCID = 2575,

	ElectricalMeasurementAttributePowerFactorPhaseCID = 2576,

	ElectricalMeasurementAttributeAverageRmsVoltageMeasurementPeriodPhaseCID = 2577,

	ElectricalMeasurementAttributeAverageRmsOverVoltageCounterPhaseCID = 2578,

	ElectricalMeasurementAttributeAverageRmsUnderVoltageCounterPhaseCID = 2579,

	ElectricalMeasurementAttributeRmsExtremeOverVoltagePeriodPhaseCID = 2580,

	ElectricalMeasurementAttributeRmsExtremeUnderVoltagePeriodPhaseCID = 2581,

	ElectricalMeasurementAttributeRmsVoltageSagPeriodPhaseCID = 2582,

	ElectricalMeasurementAttributeRmsVoltageSwellPeriodPhaseCID = 2583,

	ElectricalMeasurementAttributeGeneratedCommandListID = 65528,

	ElectricalMeasurementAttributeAcceptedCommandListID = 65529,

	ElectricalMeasurementAttributeAttributeListID = 65531,

	ElectricalMeasurementAttributeFeatureMapID = 65532,

	ElectricalMeasurementAttributeClusterRevisionID = 65533,

	TestClusterAttributeBooleanID = 0,

	TestClusterAttributeBitmap8ID = 1,

	TestClusterAttributeBitmap16ID = 2,

	TestClusterAttributeBitmap32ID = 3,

	TestClusterAttributeBitmap64ID = 4,

	TestClusterAttributeInt8uID = 5,

	TestClusterAttributeInt16uID = 6,

	TestClusterAttributeInt24uID = 7,

	TestClusterAttributeInt32uID = 8,

	TestClusterAttributeInt40uID = 9,

	TestClusterAttributeInt48uID = 10,

	TestClusterAttributeInt56uID = 11,

	TestClusterAttributeInt64uID = 12,

	TestClusterAttributeInt8sID = 13,

	TestClusterAttributeInt16sID = 14,

	TestClusterAttributeInt24sID = 15,

	TestClusterAttributeInt32sID = 16,

	TestClusterAttributeInt40sID = 17,

	TestClusterAttributeInt48sID = 18,

	TestClusterAttributeInt56sID = 19,

	TestClusterAttributeInt64sID = 20,

	TestClusterAttributeEnum8ID = 21,

	TestClusterAttributeEnum16ID = 22,

	TestClusterAttributeFloatSingleID = 23,

	TestClusterAttributeFloatDoubleID = 24,

	TestClusterAttributeOctetStringID = 25,

	TestClusterAttributeListInt8uID = 26,

	TestClusterAttributeListOctetStringID = 27,

	TestClusterAttributeListStructOctetStringID = 28,

	TestClusterAttributeLongOctetStringID = 29,

	TestClusterAttributeCharStringID = 30,

	TestClusterAttributeLongCharStringID = 31,

	TestClusterAttributeEpochUsID = 32,

	TestClusterAttributeEpochSID = 33,

	TestClusterAttributeVendorIdID = 34,

	TestClusterAttributeListNullablesAndOptionalsStructID = 35,

	TestClusterAttributeEnumAttrID = 36,

	TestClusterAttributeStructAttrID = 37,

	TestClusterAttributeRangeRestrictedInt8uID = 38,

	TestClusterAttributeRangeRestrictedInt8sID = 39,

	TestClusterAttributeRangeRestrictedInt16uID = 40,

	TestClusterAttributeRangeRestrictedInt16sID = 41,

	TestClusterAttributeListLongOctetStringID = 42,

	TestClusterAttributeListFabricScopedID = 43,

	TestClusterAttributeTimedWriteBooleanID = 48,

	TestClusterAttributeGeneralErrorBooleanID = 49,

	TestClusterAttributeClusterErrorBooleanID = 50,

	TestClusterAttributeUnsupportedID = 255,

	TestClusterAttributeNullableBooleanID = 16384,

	TestClusterAttributeNullableBitmap8ID = 16385,

	TestClusterAttributeNullableBitmap16ID = 16386,

	TestClusterAttributeNullableBitmap32ID = 16387,

	TestClusterAttributeNullableBitmap64ID = 16388,

	TestClusterAttributeNullableInt8uID = 16389,

	TestClusterAttributeNullableInt16uID = 16390,

	TestClusterAttributeNullableInt24uID = 16391,

	TestClusterAttributeNullableInt32uID = 16392,

	TestClusterAttributeNullableInt40uID = 16393,

	TestClusterAttributeNullableInt48uID = 16394,

	TestClusterAttributeNullableInt56uID = 16395,

	TestClusterAttributeNullableInt64uID = 16396,

	TestClusterAttributeNullableInt8sID = 16397,

	TestClusterAttributeNullableInt16sID = 16398,

	TestClusterAttributeNullableInt24sID = 16399,

	TestClusterAttributeNullableInt32sID = 16400,

	TestClusterAttributeNullableInt40sID = 16401,

	TestClusterAttributeNullableInt48sID = 16402,

	TestClusterAttributeNullableInt56sID = 16403,

	TestClusterAttributeNullableInt64sID = 16404,

	TestClusterAttributeNullableEnum8ID = 16405,

	TestClusterAttributeNullableEnum16ID = 16406,

	TestClusterAttributeNullableFloatSingleID = 16407,

	TestClusterAttributeNullableFloatDoubleID = 16408,

	TestClusterAttributeNullableOctetStringID = 16409,

	TestClusterAttributeNullableCharStringID = 16414,

	TestClusterAttributeNullableEnumAttrID = 16420,

	TestClusterAttributeNullableStructID = 16421,

	TestClusterAttributeNullableRangeRestrictedInt8uID = 16422,

	TestClusterAttributeNullableRangeRestrictedInt8sID = 16423,

	TestClusterAttributeNullableRangeRestrictedInt16uID = 16424,

	TestClusterAttributeNullableRangeRestrictedInt16sID = 16425,

	TestClusterAttributeWriteOnlyInt8uID = 16426,

	TestClusterAttributeGeneratedCommandListID = 65528,

	TestClusterAttributeAcceptedCommandListID = 65529,

	TestClusterAttributeAttributeListID = 65531,

	TestClusterAttributeFeatureMapID = 65532,

	TestClusterAttributeClusterRevisionID = 65533,

	FaultInjectionAttributeGeneratedCommandListID = 65528,

	FaultInjectionAttributeAcceptedCommandListID = 65529,

	FaultInjectionAttributeAttributeListID = 65531,

	FaultInjectionAttributeFeatureMapID = 65532,

	FaultInjectionAttributeClusterRevisionID = 65533
}

declare class MTRClusterAudioOutput extends MTRCluster {

	static alloc(): MTRClusterAudioOutput; // inherited from NSObject

	static new(): MTRClusterAudioOutput; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeCurrentOutputWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeOutputListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	renameOutputWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRAudioOutputClusterRenameOutputParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	selectOutputWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRAudioOutputClusterSelectOutputParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;
}

declare class MTRClusterBallastConfiguration extends MTRCluster {

	static alloc(): MTRClusterBallastConfiguration; // inherited from NSObject

	static new(): MTRClusterBallastConfiguration; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeBallastFactorAdjustmentWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeBallastStatusWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeIntrinsicBalanceFactorWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeLampAlarmModeWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeLampBurnHoursTripPointWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeLampBurnHoursWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeLampManufacturerWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeLampQuantityWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeLampRatedHoursWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeLampTypeWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMaxLevelWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMinLevelWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributePhysicalMaxLevelWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributePhysicalMinLevelWithParams(params: MTRReadParams): NSDictionary<string, any>;

	writeAttributeBallastFactorAdjustmentWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeBallastFactorAdjustmentWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeIntrinsicBalanceFactorWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeIntrinsicBalanceFactorWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeLampAlarmModeWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeLampAlarmModeWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeLampBurnHoursTripPointWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeLampBurnHoursTripPointWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeLampBurnHoursWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeLampBurnHoursWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeLampManufacturerWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeLampManufacturerWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeLampRatedHoursWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeLampRatedHoursWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeLampTypeWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeLampTypeWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeMaxLevelWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeMaxLevelWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeMinLevelWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeMinLevelWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;
}

declare class MTRClusterBarrierControl extends MTRCluster {

	static alloc(): MTRClusterBarrierControl; // inherited from NSObject

	static new(): MTRClusterBarrierControl; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	barrierControlGoToPercentWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRBarrierControlClusterBarrierControlGoToPercentParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	barrierControlStopWithExpectedValuesExpectedValueIntervalCompletionHandler(expectedValues: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	barrierControlStopWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRBarrierControlClusterBarrierControlStopParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeBarrierCapabilitiesWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeBarrierCloseEventsWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeBarrierClosePeriodWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeBarrierCommandCloseEventsWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeBarrierCommandOpenEventsWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeBarrierMovingStateWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeBarrierOpenEventsWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeBarrierOpenPeriodWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeBarrierPositionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeBarrierSafetyStatusWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	writeAttributeBarrierCloseEventsWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeBarrierCloseEventsWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeBarrierClosePeriodWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeBarrierClosePeriodWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeBarrierCommandCloseEventsWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeBarrierCommandCloseEventsWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeBarrierCommandOpenEventsWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeBarrierCommandOpenEventsWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeBarrierOpenEventsWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeBarrierOpenEventsWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeBarrierOpenPeriodWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeBarrierOpenPeriodWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;
}

declare class MTRClusterBasic extends MTRCluster {

	static alloc(): MTRClusterBasic; // inherited from NSObject

	static new(): MTRClusterBasic; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	mfgSpecificPingWithExpectedValuesExpectedValueIntervalCompletionHandler(expectedValues: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	mfgSpecificPingWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRBasicClusterMfgSpecificPingParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeCapabilityMinimaWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeDataModelRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeHardwareVersionStringWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeHardwareVersionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeLocalConfigDisabledWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeLocationWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeManufacturingDateWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeNodeLabelWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributePartNumberWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeProductIDWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeProductLabelWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeProductNameWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeProductURLWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeReachableWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeSerialNumberWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeSoftwareVersionStringWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeSoftwareVersionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeUniqueIDWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeVendorIDWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeVendorNameWithParams(params: MTRReadParams): NSDictionary<string, any>;

	writeAttributeLocalConfigDisabledWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeLocalConfigDisabledWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeLocationWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeLocationWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeNodeLabelWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeNodeLabelWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;
}

declare class MTRClusterBinaryInputBasic extends MTRCluster {

	static alloc(): MTRClusterBinaryInputBasic; // inherited from NSObject

	static new(): MTRClusterBinaryInputBasic; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeActiveTextWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeApplicationTypeWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeDescriptionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeInactiveTextWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeOutOfServiceWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributePolarityWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributePresentValueWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeReliabilityWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeStatusFlagsWithParams(params: MTRReadParams): NSDictionary<string, any>;

	writeAttributeActiveTextWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeActiveTextWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeDescriptionWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeDescriptionWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeInactiveTextWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeInactiveTextWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeOutOfServiceWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeOutOfServiceWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributePresentValueWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributePresentValueWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeReliabilityWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeReliabilityWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;
}

declare class MTRClusterBinding extends MTRCluster {

	static alloc(): MTRClusterBinding; // inherited from NSObject

	static new(): MTRClusterBinding; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeBindingWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	writeAttributeBindingWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeBindingWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;
}

declare class MTRClusterBooleanState extends MTRCluster {

	static alloc(): MTRClusterBooleanState; // inherited from NSObject

	static new(): MTRClusterBooleanState; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeStateValueWithParams(params: MTRReadParams): NSDictionary<string, any>;
}

declare class MTRClusterBridgedDeviceBasic extends MTRCluster {

	static alloc(): MTRClusterBridgedDeviceBasic; // inherited from NSObject

	static new(): MTRClusterBridgedDeviceBasic; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeHardwareVersionStringWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeHardwareVersionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeManufacturingDateWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeNodeLabelWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributePartNumberWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeProductLabelWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeProductNameWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeProductURLWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeReachableWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeSerialNumberWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeSoftwareVersionStringWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeSoftwareVersionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeUniqueIDWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeVendorIDWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeVendorNameWithParams(params: MTRReadParams): NSDictionary<string, any>;

	writeAttributeNodeLabelWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeNodeLabelWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;
}

declare class MTRClusterChannel extends MTRCluster {

	static alloc(): MTRClusterChannel; // inherited from NSObject

	static new(): MTRClusterChannel; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	changeChannelByNumberWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRChannelClusterChangeChannelByNumberParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	changeChannelWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRChannelClusterChangeChannelParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRChannelClusterChangeChannelResponseParams, p2: NSError) => void): void;

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeChannelListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeCurrentChannelWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeLineupWithParams(params: MTRReadParams): NSDictionary<string, any>;

	skipChannelWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRChannelClusterSkipChannelParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;
}

declare class MTRClusterColorControl extends MTRCluster {

	static alloc(): MTRClusterColorControl; // inherited from NSObject

	static new(): MTRClusterColorControl; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	colorLoopSetWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRColorControlClusterColorLoopSetParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	enhancedMoveHueWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRColorControlClusterEnhancedMoveHueParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	enhancedMoveToHueAndSaturationWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRColorControlClusterEnhancedMoveToHueAndSaturationParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	enhancedMoveToHueWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRColorControlClusterEnhancedMoveToHueParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	enhancedStepHueWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRColorControlClusterEnhancedStepHueParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	moveColorTemperatureWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRColorControlClusterMoveColorTemperatureParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	moveColorWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRColorControlClusterMoveColorParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	moveHueWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRColorControlClusterMoveHueParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	moveSaturationWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRColorControlClusterMoveSaturationParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	moveToColorTemperatureWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRColorControlClusterMoveToColorTemperatureParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	moveToColorWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRColorControlClusterMoveToColorParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	moveToHueAndSaturationWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRColorControlClusterMoveToHueAndSaturationParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	moveToHueWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRColorControlClusterMoveToHueParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	moveToSaturationWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRColorControlClusterMoveToSaturationParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeColorCapabilitiesWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeColorLoopActiveWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeColorLoopDirectionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeColorLoopStartEnhancedHueWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeColorLoopStoredEnhancedHueWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeColorLoopTimeWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeColorModeWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeColorPointBIntensityWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeColorPointBXWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeColorPointBYWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeColorPointGIntensityWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeColorPointGXWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeColorPointGYWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeColorPointRIntensityWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeColorPointRXWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeColorPointRYWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeColorTempPhysicalMaxMiredsWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeColorTempPhysicalMinMiredsWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeColorTemperatureMiredsWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeCompensationTextWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeCoupleColorTempToLevelMinMiredsWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeCurrentHueWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeCurrentSaturationWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeCurrentXWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeCurrentYWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeDriftCompensationWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeEnhancedColorModeWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeEnhancedCurrentHueWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeNumberOfPrimariesWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeOptionsWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributePrimary1IntensityWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributePrimary1XWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributePrimary1YWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributePrimary2IntensityWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributePrimary2XWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributePrimary2YWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributePrimary3IntensityWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributePrimary3XWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributePrimary3YWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributePrimary4IntensityWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributePrimary4XWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributePrimary4YWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributePrimary5IntensityWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributePrimary5XWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributePrimary5YWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributePrimary6IntensityWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributePrimary6XWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributePrimary6YWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRemainingTimeWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeStartUpColorTemperatureMiredsWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeWhitePointXWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeWhitePointYWithParams(params: MTRReadParams): NSDictionary<string, any>;

	stepColorTemperatureWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRColorControlClusterStepColorTemperatureParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	stepColorWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRColorControlClusterStepColorParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	stepHueWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRColorControlClusterStepHueParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	stepSaturationWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRColorControlClusterStepSaturationParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	stopMoveStepWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRColorControlClusterStopMoveStepParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeColorPointBIntensityWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeColorPointBIntensityWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeColorPointBXWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeColorPointBXWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeColorPointBYWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeColorPointBYWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeColorPointGIntensityWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeColorPointGIntensityWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeColorPointGXWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeColorPointGXWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeColorPointGYWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeColorPointGYWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeColorPointRIntensityWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeColorPointRIntensityWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeColorPointRXWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeColorPointRXWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeColorPointRYWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeColorPointRYWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeOptionsWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeOptionsWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeStartUpColorTemperatureMiredsWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeStartUpColorTemperatureMiredsWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeWhitePointXWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeWhitePointXWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeWhitePointYWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeWhitePointYWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;
}

declare const enum MTRClusterCommandIDType {

	IdentifyCommandIdentifyID = 0,

	IdentifyCommandTriggerEffectID = 64,

	GroupsCommandAddGroupID = 0,

	GroupsCommandAddGroupResponseID = 0,

	GroupsCommandViewGroupID = 1,

	GroupsCommandViewGroupResponseID = 1,

	GroupsCommandGetGroupMembershipID = 2,

	GroupsCommandGetGroupMembershipResponseID = 2,

	GroupsCommandRemoveGroupID = 3,

	GroupsCommandRemoveGroupResponseID = 3,

	GroupsCommandRemoveAllGroupsID = 4,

	GroupsCommandAddGroupIfIdentifyingID = 5,

	ScenesCommandAddSceneID = 0,

	ScenesCommandAddSceneResponseID = 0,

	ScenesCommandViewSceneID = 1,

	ScenesCommandViewSceneResponseID = 1,

	ScenesCommandRemoveSceneID = 2,

	ScenesCommandRemoveSceneResponseID = 2,

	ScenesCommandRemoveAllScenesID = 3,

	ScenesCommandRemoveAllScenesResponseID = 3,

	ScenesCommandStoreSceneID = 4,

	ScenesCommandStoreSceneResponseID = 4,

	ScenesCommandRecallSceneID = 5,

	ScenesCommandGetSceneMembershipID = 6,

	ScenesCommandGetSceneMembershipResponseID = 6,

	ScenesCommandEnhancedAddSceneID = 64,

	ScenesCommandEnhancedAddSceneResponseID = 64,

	ScenesCommandEnhancedViewSceneID = 65,

	ScenesCommandEnhancedViewSceneResponseID = 65,

	ScenesCommandCopySceneID = 66,

	ScenesCommandCopySceneResponseID = 66,

	OnOffCommandOffID = 0,

	OnOffCommandOnID = 1,

	OnOffCommandToggleID = 2,

	OnOffCommandOffWithEffectID = 64,

	OnOffCommandOnWithRecallGlobalSceneID = 65,

	OnOffCommandOnWithTimedOffID = 66,

	LevelControlCommandMoveToLevelID = 0,

	LevelControlCommandMoveID = 1,

	LevelControlCommandStepID = 2,

	LevelControlCommandStopID = 3,

	LevelControlCommandMoveToLevelWithOnOffID = 4,

	LevelControlCommandMoveWithOnOffID = 5,

	LevelControlCommandStepWithOnOffID = 6,

	LevelControlCommandStopWithOnOffID = 7,

	LevelControlCommandMoveToClosestFrequencyID = 8,

	ActionsCommandInstantActionID = 0,

	ActionsCommandInstantActionWithTransitionID = 1,

	ActionsCommandStartActionID = 2,

	ActionsCommandStartActionWithDurationID = 3,

	ActionsCommandStopActionID = 4,

	ActionsCommandPauseActionID = 5,

	ActionsCommandPauseActionWithDurationID = 6,

	ActionsCommandResumeActionID = 7,

	ActionsCommandEnableActionID = 8,

	ActionsCommandEnableActionWithDurationID = 9,

	ActionsCommandDisableActionID = 10,

	ActionsCommandDisableActionWithDurationID = 11,

	BasicCommandMfgSpecificPingID = 268566528,

	OtaSoftwareUpdateProviderCommandQueryImageID = 0,

	OtaSoftwareUpdateProviderCommandQueryImageResponseID = 1,

	OtaSoftwareUpdateProviderCommandApplyUpdateRequestID = 2,

	OtaSoftwareUpdateProviderCommandApplyUpdateResponseID = 3,

	OtaSoftwareUpdateProviderCommandNotifyUpdateAppliedID = 4,

	OtaSoftwareUpdateRequestorCommandAnnounceOtaProviderID = 0,

	GeneralCommissioningCommandArmFailSafeID = 0,

	GeneralCommissioningCommandArmFailSafeResponseID = 1,

	GeneralCommissioningCommandSetRegulatoryConfigID = 2,

	GeneralCommissioningCommandSetRegulatoryConfigResponseID = 3,

	GeneralCommissioningCommandCommissioningCompleteID = 4,

	GeneralCommissioningCommandCommissioningCompleteResponseID = 5,

	NetworkCommissioningCommandScanNetworksID = 0,

	NetworkCommissioningCommandScanNetworksResponseID = 1,

	NetworkCommissioningCommandAddOrUpdateWiFiNetworkID = 2,

	NetworkCommissioningCommandAddOrUpdateThreadNetworkID = 3,

	NetworkCommissioningCommandRemoveNetworkID = 4,

	NetworkCommissioningCommandNetworkConfigResponseID = 5,

	NetworkCommissioningCommandConnectNetworkID = 6,

	NetworkCommissioningCommandConnectNetworkResponseID = 7,

	NetworkCommissioningCommandReorderNetworkID = 8,

	DiagnosticLogsCommandRetrieveLogsRequestID = 0,

	DiagnosticLogsCommandRetrieveLogsResponseID = 1,

	GeneralDiagnosticsCommandTestEventTriggerID = 0,

	SoftwareDiagnosticsCommandResetWatermarksID = 0,

	ThreadNetworkDiagnosticsCommandResetCountsID = 0,

	WiFiNetworkDiagnosticsCommandResetCountsID = 0,

	EthernetNetworkDiagnosticsCommandResetCountsID = 0,

	TimeSynchronizationCommandSetUtcTimeID = 0,

	AdministratorCommissioningCommandOpenCommissioningWindowID = 0,

	AdministratorCommissioningCommandOpenBasicCommissioningWindowID = 1,

	AdministratorCommissioningCommandRevokeCommissioningID = 2,

	OperationalCredentialsCommandAttestationRequestID = 0,

	OperationalCredentialsCommandAttestationResponseID = 1,

	OperationalCredentialsCommandCertificateChainRequestID = 2,

	OperationalCredentialsCommandCertificateChainResponseID = 3,

	OperationalCredentialsCommandCSRRequestID = 4,

	OperationalCredentialsCommandCSRResponseID = 5,

	OperationalCredentialsCommandAddNOCID = 6,

	OperationalCredentialsCommandUpdateNOCID = 7,

	OperationalCredentialsCommandNOCResponseID = 8,

	OperationalCredentialsCommandUpdateFabricLabelID = 9,

	OperationalCredentialsCommandRemoveFabricID = 10,

	OperationalCredentialsCommandAddTrustedRootCertificateID = 11,

	GroupKeyManagementCommandKeySetWriteID = 0,

	GroupKeyManagementCommandKeySetReadID = 1,

	GroupKeyManagementCommandKeySetReadResponseID = 2,

	GroupKeyManagementCommandKeySetRemoveID = 3,

	GroupKeyManagementCommandKeySetReadAllIndicesID = 4,

	GroupKeyManagementCommandKeySetReadAllIndicesResponseID = 5,

	ModeSelectCommandChangeToModeID = 0,

	DoorLockCommandLockDoorID = 0,

	DoorLockCommandUnlockDoorID = 1,

	DoorLockCommandUnlockWithTimeoutID = 3,

	DoorLockCommandSetWeekDayScheduleID = 11,

	DoorLockCommandGetWeekDayScheduleID = 12,

	DoorLockCommandGetWeekDayScheduleResponseID = 12,

	DoorLockCommandClearWeekDayScheduleID = 13,

	DoorLockCommandSetYearDayScheduleID = 14,

	DoorLockCommandGetYearDayScheduleID = 15,

	DoorLockCommandGetYearDayScheduleResponseID = 15,

	DoorLockCommandClearYearDayScheduleID = 16,

	DoorLockCommandSetHolidayScheduleID = 17,

	DoorLockCommandGetHolidayScheduleID = 18,

	DoorLockCommandGetHolidayScheduleResponseID = 18,

	DoorLockCommandClearHolidayScheduleID = 19,

	DoorLockCommandSetUserID = 26,

	DoorLockCommandGetUserID = 27,

	DoorLockCommandGetUserResponseID = 28,

	DoorLockCommandClearUserID = 29,

	DoorLockCommandSetCredentialID = 34,

	DoorLockCommandSetCredentialResponseID = 35,

	DoorLockCommandGetCredentialStatusID = 36,

	DoorLockCommandGetCredentialStatusResponseID = 37,

	DoorLockCommandClearCredentialID = 38,

	WindowCoveringCommandUpOrOpenID = 0,

	WindowCoveringCommandDownOrCloseID = 1,

	WindowCoveringCommandStopMotionID = 2,

	WindowCoveringCommandGoToLiftValueID = 4,

	WindowCoveringCommandGoToLiftPercentageID = 5,

	WindowCoveringCommandGoToTiltValueID = 7,

	WindowCoveringCommandGoToTiltPercentageID = 8,

	BarrierControlCommandBarrierControlGoToPercentID = 0,

	BarrierControlCommandBarrierControlStopID = 1,

	ThermostatCommandSetpointRaiseLowerID = 0,

	ThermostatCommandGetWeeklyScheduleResponseID = 0,

	ThermostatCommandSetWeeklyScheduleID = 1,

	ThermostatCommandGetWeeklyScheduleID = 2,

	ThermostatCommandClearWeeklyScheduleID = 3,

	ColorControlCommandMoveToHueID = 0,

	ColorControlCommandMoveHueID = 1,

	ColorControlCommandStepHueID = 2,

	ColorControlCommandMoveToSaturationID = 3,

	ColorControlCommandMoveSaturationID = 4,

	ColorControlCommandStepSaturationID = 5,

	ColorControlCommandMoveToHueAndSaturationID = 6,

	ColorControlCommandMoveToColorID = 7,

	ColorControlCommandMoveColorID = 8,

	ColorControlCommandStepColorID = 9,

	ColorControlCommandMoveToColorTemperatureID = 10,

	ColorControlCommandEnhancedMoveToHueID = 64,

	ColorControlCommandEnhancedMoveHueID = 65,

	ColorControlCommandEnhancedStepHueID = 66,

	ColorControlCommandEnhancedMoveToHueAndSaturationID = 67,

	ColorControlCommandColorLoopSetID = 68,

	ColorControlCommandStopMoveStepID = 71,

	ColorControlCommandMoveColorTemperatureID = 75,

	ColorControlCommandStepColorTemperatureID = 76,

	ChannelCommandChangeChannelID = 0,

	ChannelCommandChangeChannelResponseID = 1,

	ChannelCommandChangeChannelByNumberID = 2,

	ChannelCommandSkipChannelID = 3,

	TargetNavigatorCommandNavigateTargetID = 0,

	TargetNavigatorCommandNavigateTargetResponseID = 1,

	MediaPlaybackCommandPlayID = 0,

	MediaPlaybackCommandPauseID = 1,

	MediaPlaybackCommandStopPlaybackID = 2,

	MediaPlaybackCommandStartOverID = 3,

	MediaPlaybackCommandPreviousID = 4,

	MediaPlaybackCommandNextID = 5,

	MediaPlaybackCommandRewindID = 6,

	MediaPlaybackCommandFastForwardID = 7,

	MediaPlaybackCommandSkipForwardID = 8,

	MediaPlaybackCommandSkipBackwardID = 9,

	MediaPlaybackCommandPlaybackResponseID = 10,

	MediaPlaybackCommandSeekID = 11,

	MediaInputCommandSelectInputID = 0,

	MediaInputCommandShowInputStatusID = 1,

	MediaInputCommandHideInputStatusID = 2,

	MediaInputCommandRenameInputID = 3,

	LowPowerCommandSleepID = 0,

	KeypadInputCommandSendKeyID = 0,

	KeypadInputCommandSendKeyResponseID = 1,

	ContentLauncherCommandLaunchContentID = 0,

	ContentLauncherCommandLaunchURLID = 1,

	ContentLauncherCommandLaunchResponseID = 2,

	AudioOutputCommandSelectOutputID = 0,

	AudioOutputCommandRenameOutputID = 1,

	ApplicationLauncherCommandLaunchAppID = 0,

	ApplicationLauncherCommandStopAppID = 1,

	ApplicationLauncherCommandHideAppID = 2,

	ApplicationLauncherCommandLauncherResponseID = 3,

	AccountLoginCommandGetSetupPINID = 0,

	AccountLoginCommandGetSetupPINResponseID = 1,

	AccountLoginCommandLoginID = 2,

	AccountLoginCommandLogoutID = 3,

	ElectricalMeasurementCommandGetProfileInfoResponseCommandID = 0,

	ElectricalMeasurementCommandGetProfileInfoCommandID = 0,

	ElectricalMeasurementCommandGetMeasurementProfileResponseCommandID = 1,

	ElectricalMeasurementCommandGetMeasurementProfileCommandID = 1,

	TestClusterCommandTestID = 0,

	TestClusterCommandTestSpecificResponseID = 0,

	TestClusterCommandTestNotHandledID = 1,

	TestClusterCommandTestAddArgumentsResponseID = 1,

	TestClusterCommandTestSpecificID = 2,

	TestClusterCommandTestSimpleArgumentResponseID = 2,

	TestClusterCommandTestUnknownCommandID = 3,

	TestClusterCommandTestStructArrayArgumentResponseID = 3,

	TestClusterCommandTestAddArgumentsID = 4,

	TestClusterCommandTestListInt8UReverseResponseID = 4,

	TestClusterCommandTestSimpleArgumentRequestID = 5,

	TestClusterCommandTestEnumsResponseID = 5,

	TestClusterCommandTestStructArrayArgumentRequestID = 6,

	TestClusterCommandTestNullableOptionalResponseID = 6,

	TestClusterCommandTestStructArgumentRequestID = 7,

	TestClusterCommandTestComplexNullableOptionalResponseID = 7,

	TestClusterCommandTestNestedStructArgumentRequestID = 8,

	TestClusterCommandBooleanResponseID = 8,

	TestClusterCommandTestListStructArgumentRequestID = 9,

	TestClusterCommandSimpleStructResponseID = 9,

	TestClusterCommandTestListInt8UArgumentRequestID = 10,

	TestClusterCommandTestEmitTestEventResponseID = 10,

	TestClusterCommandTestNestedStructListArgumentRequestID = 11,

	TestClusterCommandTestEmitTestFabricScopedEventResponseID = 11,

	TestClusterCommandTestListNestedStructListArgumentRequestID = 12,

	TestClusterCommandTestListInt8UReverseRequestID = 13,

	TestClusterCommandTestEnumsRequestID = 14,

	TestClusterCommandTestNullableOptionalRequestID = 15,

	TestClusterCommandTestComplexNullableOptionalRequestID = 16,

	TestClusterCommandSimpleStructEchoRequestID = 17,

	TestClusterCommandTimedInvokeRequestID = 18,

	TestClusterCommandTestSimpleOptionalArgumentRequestID = 19,

	TestClusterCommandTestEmitTestEventRequestID = 20,

	TestClusterCommandTestEmitTestFabricScopedEventRequestID = 21,

	FaultInjectionCommandFailAtFaultID = 0,

	FaultInjectionCommandFailRandomlyAtFaultID = 1
}

declare class MTRClusterContentLauncher extends MTRCluster {

	static alloc(): MTRClusterContentLauncher; // inherited from NSObject

	static new(): MTRClusterContentLauncher; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	launchContentWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRContentLauncherClusterLaunchContentParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRContentLauncherClusterLaunchResponseParams, p2: NSError) => void): void;

	launchURLWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRContentLauncherClusterLaunchURLParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRContentLauncherClusterLaunchResponseParams, p2: NSError) => void): void;

	readAttributeAcceptHeaderWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeSupportedStreamingProtocolsWithParams(params: MTRReadParams): NSDictionary<string, any>;

	writeAttributeSupportedStreamingProtocolsWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeSupportedStreamingProtocolsWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;
}

declare class MTRClusterDescriptor extends MTRCluster {

	static alloc(): MTRClusterDescriptor; // inherited from NSObject

	static new(): MTRClusterDescriptor; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClientListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeDeviceListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributePartsListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeServerListWithParams(params: MTRReadParams): NSDictionary<string, any>;
}

declare class MTRClusterDiagnosticLogs extends MTRCluster {

	static alloc(): MTRClusterDiagnosticLogs; // inherited from NSObject

	static new(): MTRClusterDiagnosticLogs; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	retrieveLogsRequestWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRDiagnosticLogsClusterRetrieveLogsRequestParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRDiagnosticLogsClusterRetrieveLogsResponseParams, p2: NSError) => void): void;
}

declare class MTRClusterDoorLock extends MTRCluster {

	static alloc(): MTRClusterDoorLock; // inherited from NSObject

	static new(): MTRClusterDoorLock; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	clearCredentialWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRDoorLockClusterClearCredentialParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	clearHolidayScheduleWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRDoorLockClusterClearHolidayScheduleParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	clearUserWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRDoorLockClusterClearUserParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	clearWeekDayScheduleWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRDoorLockClusterClearWeekDayScheduleParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	clearYearDayScheduleWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRDoorLockClusterClearYearDayScheduleParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	getCredentialStatusWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRDoorLockClusterGetCredentialStatusParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRDoorLockClusterGetCredentialStatusResponseParams, p2: NSError) => void): void;

	getHolidayScheduleWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRDoorLockClusterGetHolidayScheduleParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRDoorLockClusterGetHolidayScheduleResponseParams, p2: NSError) => void): void;

	getUserWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRDoorLockClusterGetUserParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRDoorLockClusterGetUserResponseParams, p2: NSError) => void): void;

	getWeekDayScheduleWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRDoorLockClusterGetWeekDayScheduleParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRDoorLockClusterGetWeekDayScheduleResponseParams, p2: NSError) => void): void;

	getYearDayScheduleWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRDoorLockClusterGetYearDayScheduleParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRDoorLockClusterGetYearDayScheduleResponseParams, p2: NSError) => void): void;

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	lockDoorWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRDoorLockClusterLockDoorParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeActuatorEnabledWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAutoRelockTimeWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeCredentialRulesSupportWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeDefaultConfigurationRegisterWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeDoorClosedEventsWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeDoorOpenEventsWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeDoorStateWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeEnableInsideStatusLEDWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeEnableLocalProgrammingWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeEnableOneTouchLockingWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeEnablePrivacyModeButtonWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeExpiringUserTimeoutWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeLEDSettingsWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeLanguageWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeLocalProgrammingFeaturesWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeLockStateWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeLockTypeWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMaxPINCodeLengthWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMaxRFIDCodeLengthWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMinPINCodeLengthWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMinRFIDCodeLengthWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeNumberOfCredentialsSupportedPerUserWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeNumberOfHolidaySchedulesSupportedWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeNumberOfPINUsersSupportedWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeNumberOfRFIDUsersSupportedWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeNumberOfTotalUsersSupportedWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeNumberOfWeekDaySchedulesSupportedPerUserWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeNumberOfYearDaySchedulesSupportedPerUserWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeOpenPeriodWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeOperatingModeWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRequirePINforRemoteOperationWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeSendPINOverTheAirWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeSoundVolumeWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeSupportedOperatingModesWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeUserCodeTemporaryDisableTimeWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeWrongCodeEntryLimitWithParams(params: MTRReadParams): NSDictionary<string, any>;

	setCredentialWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRDoorLockClusterSetCredentialParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRDoorLockClusterSetCredentialResponseParams, p2: NSError) => void): void;

	setHolidayScheduleWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRDoorLockClusterSetHolidayScheduleParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	setUserWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRDoorLockClusterSetUserParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	setWeekDayScheduleWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRDoorLockClusterSetWeekDayScheduleParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	setYearDayScheduleWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRDoorLockClusterSetYearDayScheduleParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	unlockDoorWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRDoorLockClusterUnlockDoorParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	unlockWithTimeoutWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRDoorLockClusterUnlockWithTimeoutParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeAutoRelockTimeWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeAutoRelockTimeWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeDoorClosedEventsWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeDoorClosedEventsWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeDoorOpenEventsWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeDoorOpenEventsWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeEnableInsideStatusLEDWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeEnableInsideStatusLEDWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeEnableLocalProgrammingWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeEnableLocalProgrammingWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeEnableOneTouchLockingWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeEnableOneTouchLockingWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeEnablePrivacyModeButtonWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeEnablePrivacyModeButtonWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeExpiringUserTimeoutWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeExpiringUserTimeoutWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeLEDSettingsWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeLEDSettingsWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeLanguageWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeLanguageWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeLocalProgrammingFeaturesWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeLocalProgrammingFeaturesWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeOpenPeriodWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeOpenPeriodWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeOperatingModeWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeOperatingModeWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeRequirePINforRemoteOperationWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeRequirePINforRemoteOperationWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeSendPINOverTheAirWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeSendPINOverTheAirWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeSoundVolumeWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeSoundVolumeWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeUserCodeTemporaryDisableTimeWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeUserCodeTemporaryDisableTimeWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeWrongCodeEntryLimitWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeWrongCodeEntryLimitWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;
}

declare class MTRClusterElectricalMeasurement extends MTRCluster {

	static alloc(): MTRClusterElectricalMeasurement; // inherited from NSObject

	static new(): MTRClusterElectricalMeasurement; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	getMeasurementProfileCommandWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRElectricalMeasurementClusterGetMeasurementProfileCommandParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	getProfileInfoCommandWithExpectedValuesExpectedValueIntervalCompletionHandler(expectedValues: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	getProfileInfoCommandWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRElectricalMeasurementClusterGetProfileInfoCommandParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcActivePowerOverloadWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAcCurrentDivisorWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAcCurrentMultiplierWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAcCurrentOverloadWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAcFrequencyDivisorWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAcFrequencyMaxWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAcFrequencyMinWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAcFrequencyMultiplierWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAcFrequencyWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAcOverloadAlarmsMaskWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAcPowerDivisorWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAcPowerMultiplierWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAcReactivePowerOverloadWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAcVoltageDivisorWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAcVoltageMultiplierWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAcVoltageOverloadWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeActiveCurrentPhaseBWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeActiveCurrentPhaseCWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeActivePowerMaxPhaseBWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeActivePowerMaxPhaseCWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeActivePowerMaxWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeActivePowerMinPhaseBWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeActivePowerMinPhaseCWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeActivePowerMinWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeActivePowerPhaseBWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeActivePowerPhaseCWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeActivePowerWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeApparentPowerPhaseBWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeApparentPowerPhaseCWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeApparentPowerWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAverageRmsOverVoltageCounterPhaseBWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAverageRmsOverVoltageCounterPhaseCWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAverageRmsOverVoltageWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAverageRmsUnderVoltageCounterPhaseBWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAverageRmsUnderVoltageCounterPhaseCWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAverageRmsUnderVoltageCounterWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAverageRmsUnderVoltageWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAverageRmsVoltageMeasurementPeriodPhaseBWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAverageRmsVoltageMeasurementPeriodPhaseCWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAverageRmsVoltageMeasurementPeriodWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeCurrentOverloadWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeDcCurrentDivisorWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeDcCurrentMaxWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeDcCurrentMinWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeDcCurrentMultiplierWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeDcCurrentWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeDcPowerDivisorWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeDcPowerMaxWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeDcPowerMinWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeDcPowerMultiplierWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeDcPowerWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeDcVoltageDivisorWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeDcVoltageMaxWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeDcVoltageMinWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeDcVoltageMultiplierWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeDcVoltageWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeHarmonicCurrentMultiplierWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeInstantaneousActiveCurrentWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeInstantaneousLineCurrentWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeInstantaneousPowerWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeInstantaneousReactiveCurrentWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeInstantaneousVoltageWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeLineCurrentPhaseBWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeLineCurrentPhaseCWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMeasured11thHarmonicCurrentWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMeasured1stHarmonicCurrentWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMeasured3rdHarmonicCurrentWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMeasured5thHarmonicCurrentWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMeasured7thHarmonicCurrentWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMeasured9thHarmonicCurrentWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMeasuredPhase11thHarmonicCurrentWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMeasuredPhase1stHarmonicCurrentWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMeasuredPhase3rdHarmonicCurrentWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMeasuredPhase5thHarmonicCurrentWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMeasuredPhase7thHarmonicCurrentWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMeasuredPhase9thHarmonicCurrentWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMeasurementTypeWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeNeutralCurrentWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeOverloadAlarmsMaskWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributePhaseHarmonicCurrentMultiplierWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributePowerDivisorWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributePowerFactorPhaseBWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributePowerFactorPhaseCWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributePowerFactorWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributePowerMultiplierWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeReactiveCurrentPhaseBWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeReactiveCurrentPhaseCWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeReactivePowerPhaseBWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeReactivePowerPhaseCWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeReactivePowerWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRmsCurrentMaxPhaseBWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRmsCurrentMaxPhaseCWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRmsCurrentMaxWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRmsCurrentMinPhaseBWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRmsCurrentMinPhaseCWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRmsCurrentMinWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRmsCurrentPhaseBWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRmsCurrentPhaseCWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRmsCurrentWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRmsExtremeOverVoltagePeriodPhaseBWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRmsExtremeOverVoltagePeriodPhaseCWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRmsExtremeOverVoltagePeriodWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRmsExtremeOverVoltageWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRmsExtremeUnderVoltagePeriodPhaseBWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRmsExtremeUnderVoltagePeriodPhaseCWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRmsExtremeUnderVoltagePeriodWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRmsExtremeUnderVoltageWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRmsVoltageMaxPhaseBWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRmsVoltageMaxPhaseCWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRmsVoltageMaxWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRmsVoltageMinPhaseBWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRmsVoltageMinPhaseCWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRmsVoltageMinWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRmsVoltagePhaseBWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRmsVoltagePhaseCWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRmsVoltageSagPeriodPhaseBWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRmsVoltageSagPeriodPhaseCWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRmsVoltageSagPeriodWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRmsVoltageSagWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRmsVoltageSwellPeriodPhaseBWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRmsVoltageSwellPeriodPhaseCWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRmsVoltageSwellPeriodWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRmsVoltageSwellWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRmsVoltageWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeTotalActivePowerWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeTotalApparentPowerWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeTotalReactivePowerWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeVoltageOverloadWithParams(params: MTRReadParams): NSDictionary<string, any>;

	writeAttributeAcOverloadAlarmsMaskWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeAcOverloadAlarmsMaskWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeAverageRmsUnderVoltageCounterWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeAverageRmsUnderVoltageCounterWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeAverageRmsVoltageMeasurementPeriodWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeAverageRmsVoltageMeasurementPeriodWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeOverloadAlarmsMaskWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeOverloadAlarmsMaskWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeRmsExtremeOverVoltagePeriodWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeRmsExtremeOverVoltagePeriodWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeRmsExtremeUnderVoltagePeriodWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeRmsExtremeUnderVoltagePeriodWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeRmsVoltageSagPeriodWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeRmsVoltageSagPeriodWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeRmsVoltageSwellPeriodWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeRmsVoltageSwellPeriodWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;
}

declare class MTRClusterEthernetNetworkDiagnostics extends MTRCluster {

	static alloc(): MTRClusterEthernetNetworkDiagnostics; // inherited from NSObject

	static new(): MTRClusterEthernetNetworkDiagnostics; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeCarrierDetectWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeCollisionCountWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFullDuplexWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeOverrunCountWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributePHYRateWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributePacketRxCountWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributePacketTxCountWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeTimeSinceResetWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeTxErrCountWithParams(params: MTRReadParams): NSDictionary<string, any>;

	resetCountsWithExpectedValuesExpectedValueIntervalCompletionHandler(expectedValues: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	resetCountsWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTREthernetNetworkDiagnosticsClusterResetCountsParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;
}

declare const enum MTRClusterEventIDType {

	AccessControlEventAccessControlEntryChangedID = 0,

	AccessControlEventAccessControlExtensionChangedID = 1,

	ActionsEventStateChangedID = 0,

	ActionsEventActionFailedID = 1,

	BasicEventStartUpID = 0,

	BasicEventShutDownID = 1,

	BasicEventLeaveID = 2,

	BasicEventReachableChangedID = 3,

	OtaSoftwareUpdateRequestorEventStateTransitionID = 0,

	OtaSoftwareUpdateRequestorEventVersionAppliedID = 1,

	OtaSoftwareUpdateRequestorEventDownloadErrorID = 2,

	GeneralDiagnosticsEventHardwareFaultChangeID = 0,

	GeneralDiagnosticsEventRadioFaultChangeID = 1,

	GeneralDiagnosticsEventNetworkFaultChangeID = 2,

	GeneralDiagnosticsEventBootReasonID = 3,

	SoftwareDiagnosticsEventSoftwareFaultID = 0,

	ThreadNetworkDiagnosticsEventConnectionStatusID = 0,

	ThreadNetworkDiagnosticsEventNetworkFaultChangeID = 1,

	WiFiNetworkDiagnosticsEventDisconnectionID = 0,

	WiFiNetworkDiagnosticsEventAssociationFailureID = 1,

	WiFiNetworkDiagnosticsEventConnectionStatusID = 2,

	BridgedDeviceBasicEventStartUpID = 0,

	BridgedDeviceBasicEventShutDownID = 1,

	BridgedDeviceBasicEventLeaveID = 2,

	BridgedDeviceBasicEventReachableChangedID = 3,

	SwitchEventSwitchLatchedID = 0,

	SwitchEventInitialPressID = 1,

	SwitchEventLongPressID = 2,

	SwitchEventShortReleaseID = 3,

	SwitchEventLongReleaseID = 4,

	SwitchEventMultiPressOngoingID = 5,

	SwitchEventMultiPressCompleteID = 6,

	BooleanStateEventStateChangeID = 0,

	DoorLockEventDoorLockAlarmID = 0,

	DoorLockEventDoorStateChangeID = 1,

	DoorLockEventLockOperationID = 2,

	DoorLockEventLockOperationErrorID = 3,

	DoorLockEventLockUserChangeID = 4,

	PumpConfigurationAndControlEventSupplyVoltageLowID = 0,

	PumpConfigurationAndControlEventSupplyVoltageHighID = 1,

	PumpConfigurationAndControlEventPowerMissingPhaseID = 2,

	PumpConfigurationAndControlEventSystemPressureLowID = 3,

	PumpConfigurationAndControlEventSystemPressureHighID = 4,

	PumpConfigurationAndControlEventDryRunningID = 5,

	PumpConfigurationAndControlEventMotorTemperatureHighID = 6,

	PumpConfigurationAndControlEventPumpMotorFatalFailureID = 7,

	PumpConfigurationAndControlEventElectronicTemperatureHighID = 8,

	PumpConfigurationAndControlEventPumpBlockedID = 9,

	PumpConfigurationAndControlEventSensorFailureID = 10,

	PumpConfigurationAndControlEventElectronicNonFatalFailureID = 11,

	PumpConfigurationAndControlEventElectronicFatalFailureID = 12,

	PumpConfigurationAndControlEventGeneralFaultID = 13,

	PumpConfigurationAndControlEventLeakageID = 14,

	PumpConfigurationAndControlEventAirDetectionID = 15,

	PumpConfigurationAndControlEventTurbineOperationID = 16,

	TestClusterEventTestEventID = 1,

	TestClusterEventTestFabricScopedEventID = 2
}

declare class MTRClusterFanControl extends MTRCluster {

	static alloc(): MTRClusterFanControl; // inherited from NSObject

	static new(): MTRClusterFanControl; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFanModeSequenceWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFanModeWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributePercentCurrentWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributePercentSettingWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRockSettingWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRockSupportWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeSpeedCurrentWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeSpeedMaxWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeSpeedSettingWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeWindSettingWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeWindSupportWithParams(params: MTRReadParams): NSDictionary<string, any>;

	writeAttributeFanModeSequenceWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeFanModeSequenceWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeFanModeWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeFanModeWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributePercentSettingWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributePercentSettingWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeRockSettingWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeRockSettingWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeSpeedSettingWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeSpeedSettingWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeWindSettingWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeWindSettingWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;
}

declare class MTRClusterFixedLabel extends MTRCluster {

	static alloc(): MTRClusterFixedLabel; // inherited from NSObject

	static new(): MTRClusterFixedLabel; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeLabelListWithParams(params: MTRReadParams): NSDictionary<string, any>;
}

declare class MTRClusterFlowMeasurement extends MTRCluster {

	static alloc(): MTRClusterFlowMeasurement; // inherited from NSObject

	static new(): MTRClusterFlowMeasurement; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMaxMeasuredValueWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMeasuredValueWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMinMeasuredValueWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeToleranceWithParams(params: MTRReadParams): NSDictionary<string, any>;
}

declare class MTRClusterGeneralCommissioning extends MTRCluster {

	static alloc(): MTRClusterGeneralCommissioning; // inherited from NSObject

	static new(): MTRClusterGeneralCommissioning; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	armFailSafeWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRGeneralCommissioningClusterArmFailSafeParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRGeneralCommissioningClusterArmFailSafeResponseParams, p2: NSError) => void): void;

	commissioningCompleteWithExpectedValuesExpectedValueIntervalCompletionHandler(expectedValues: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRGeneralCommissioningClusterCommissioningCompleteResponseParams, p2: NSError) => void): void;

	commissioningCompleteWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRGeneralCommissioningClusterCommissioningCompleteParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRGeneralCommissioningClusterCommissioningCompleteResponseParams, p2: NSError) => void): void;

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeBasicCommissioningInfoWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeBreadcrumbWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeLocationCapabilityWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRegulatoryConfigWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeSupportsConcurrentConnectionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	setRegulatoryConfigWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRGeneralCommissioningClusterSetRegulatoryConfigParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRGeneralCommissioningClusterSetRegulatoryConfigResponseParams, p2: NSError) => void): void;

	writeAttributeBreadcrumbWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeBreadcrumbWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;
}

declare class MTRClusterGeneralDiagnostics extends MTRCluster {

	static alloc(): MTRClusterGeneralDiagnostics; // inherited from NSObject

	static new(): MTRClusterGeneralDiagnostics; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeActiveHardwareFaultsWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeActiveNetworkFaultsWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeActiveRadioFaultsWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeBootReasonsWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeNetworkInterfacesWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRebootCountWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeTestEventTriggersEnabledWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeTotalOperationalHoursWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeUpTimeWithParams(params: MTRReadParams): NSDictionary<string, any>;

	testEventTriggerWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRGeneralDiagnosticsClusterTestEventTriggerParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;
}

declare class MTRClusterGroupKeyManagement extends MTRCluster {

	static alloc(): MTRClusterGroupKeyManagement; // inherited from NSObject

	static new(): MTRClusterGroupKeyManagement; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	keySetReadAllIndicesWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRGroupKeyManagementClusterKeySetReadAllIndicesParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRGroupKeyManagementClusterKeySetReadAllIndicesResponseParams, p2: NSError) => void): void;

	keySetReadWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRGroupKeyManagementClusterKeySetReadParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRGroupKeyManagementClusterKeySetReadResponseParams, p2: NSError) => void): void;

	keySetRemoveWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRGroupKeyManagementClusterKeySetRemoveParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	keySetWriteWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRGroupKeyManagementClusterKeySetWriteParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGroupKeyMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGroupTableWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMaxGroupKeysPerFabricWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMaxGroupsPerFabricWithParams(params: MTRReadParams): NSDictionary<string, any>;

	writeAttributeGroupKeyMapWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeGroupKeyMapWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;
}

declare class MTRClusterGroups extends MTRCluster {

	static alloc(): MTRClusterGroups; // inherited from NSObject

	static new(): MTRClusterGroups; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	addGroupIfIdentifyingWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRGroupsClusterAddGroupIfIdentifyingParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	addGroupWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRGroupsClusterAddGroupParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRGroupsClusterAddGroupResponseParams, p2: NSError) => void): void;

	getGroupMembershipWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRGroupsClusterGetGroupMembershipParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRGroupsClusterGetGroupMembershipResponseParams, p2: NSError) => void): void;

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeNameSupportWithParams(params: MTRReadParams): NSDictionary<string, any>;

	removeAllGroupsWithExpectedValuesExpectedValueIntervalCompletionHandler(expectedValues: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	removeAllGroupsWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRGroupsClusterRemoveAllGroupsParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	removeGroupWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRGroupsClusterRemoveGroupParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRGroupsClusterRemoveGroupResponseParams, p2: NSError) => void): void;

	viewGroupWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRGroupsClusterViewGroupParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRGroupsClusterViewGroupResponseParams, p2: NSError) => void): void;
}

declare const enum MTRClusterIDType {

	IdentifyID = 3,

	GroupsID = 4,

	ScenesID = 5,

	OnOffID = 6,

	OnOffSwitchConfigurationID = 7,

	LevelControlID = 8,

	BinaryInputBasicID = 15,

	PulseWidthModulationID = 28,

	DescriptorID = 29,

	BindingID = 30,

	AccessControlID = 31,

	ActionsID = 37,

	BasicID = 40,

	OtaSoftwareUpdateProviderID = 41,

	OtaSoftwareUpdateRequestorID = 42,

	LocalizationConfigurationID = 43,

	TimeFormatLocalizationID = 44,

	UnitLocalizationID = 45,

	PowerSourceConfigurationID = 46,

	PowerSourceID = 47,

	GeneralCommissioningID = 48,

	NetworkCommissioningID = 49,

	DiagnosticLogsID = 50,

	GeneralDiagnosticsID = 51,

	SoftwareDiagnosticsID = 52,

	ThreadNetworkDiagnosticsID = 53,

	WiFiNetworkDiagnosticsID = 54,

	EthernetNetworkDiagnosticsID = 55,

	TimeSynchronizationID = 56,

	BridgedDeviceBasicID = 57,

	SwitchID = 59,

	AdministratorCommissioningID = 60,

	OperationalCredentialsID = 62,

	GroupKeyManagementID = 63,

	FixedLabelID = 64,

	UserLabelID = 65,

	ProxyConfigurationID = 66,

	ProxyDiscoveryID = 67,

	ProxyValidID = 68,

	BooleanStateID = 69,

	ModeSelectID = 80,

	DoorLockID = 257,

	WindowCoveringID = 258,

	BarrierControlID = 259,

	PumpConfigurationAndControlID = 512,

	ThermostatID = 513,

	FanControlID = 514,

	ThermostatUserInterfaceConfigurationID = 516,

	ColorControlID = 768,

	BallastConfigurationID = 769,

	IlluminanceMeasurementID = 1024,

	TemperatureMeasurementID = 1026,

	PressureMeasurementID = 1027,

	FlowMeasurementID = 1028,

	RelativeHumidityMeasurementID = 1029,

	OccupancySensingID = 1030,

	WakeOnLanID = 1283,

	ChannelID = 1284,

	TargetNavigatorID = 1285,

	MediaPlaybackID = 1286,

	MediaInputID = 1287,

	LowPowerID = 1288,

	KeypadInputID = 1289,

	ContentLauncherID = 1290,

	AudioOutputID = 1291,

	ApplicationLauncherID = 1292,

	ApplicationBasicID = 1293,

	AccountLoginID = 1294,

	ElectricalMeasurementID = 2820,

	TestClusterID = 4294048773,

	FaultInjectionID = 4294048774
}

declare class MTRClusterIdentify extends MTRCluster {

	static alloc(): MTRClusterIdentify; // inherited from NSObject

	static new(): MTRClusterIdentify; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	identifyWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRIdentifyClusterIdentifyParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeIdentifyTimeWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeIdentifyTypeWithParams(params: MTRReadParams): NSDictionary<string, any>;

	triggerEffectWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRIdentifyClusterTriggerEffectParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeIdentifyTimeWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeIdentifyTimeWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;
}

declare class MTRClusterIlluminanceMeasurement extends MTRCluster {

	static alloc(): MTRClusterIlluminanceMeasurement; // inherited from NSObject

	static new(): MTRClusterIlluminanceMeasurement; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeLightSensorTypeWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMaxMeasuredValueWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMeasuredValueWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMinMeasuredValueWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeToleranceWithParams(params: MTRReadParams): NSDictionary<string, any>;
}

declare class MTRClusterKeypadInput extends MTRCluster {

	static alloc(): MTRClusterKeypadInput; // inherited from NSObject

	static new(): MTRClusterKeypadInput; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	sendKeyWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRKeypadInputClusterSendKeyParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRKeypadInputClusterSendKeyResponseParams, p2: NSError) => void): void;
}

declare class MTRClusterLevelControl extends MTRCluster {

	static alloc(): MTRClusterLevelControl; // inherited from NSObject

	static new(): MTRClusterLevelControl; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	moveToClosestFrequencyWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRLevelControlClusterMoveToClosestFrequencyParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	moveToLevelWithOnOffWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRLevelControlClusterMoveToLevelWithOnOffParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	moveToLevelWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRLevelControlClusterMoveToLevelParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	moveWithOnOffWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRLevelControlClusterMoveWithOnOffParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	moveWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRLevelControlClusterMoveParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeCurrentFrequencyWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeCurrentLevelWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeDefaultMoveRateWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMaxFrequencyWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMaxLevelWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMinFrequencyWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMinLevelWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeOffTransitionTimeWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeOnLevelWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeOnOffTransitionTimeWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeOnTransitionTimeWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeOptionsWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRemainingTimeWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeStartUpCurrentLevelWithParams(params: MTRReadParams): NSDictionary<string, any>;

	stepWithOnOffWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRLevelControlClusterStepWithOnOffParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	stepWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRLevelControlClusterStepParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	stopWithOnOffWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRLevelControlClusterStopWithOnOffParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	stopWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRLevelControlClusterStopParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeDefaultMoveRateWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeDefaultMoveRateWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeOffTransitionTimeWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeOffTransitionTimeWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeOnLevelWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeOnLevelWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeOnOffTransitionTimeWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeOnOffTransitionTimeWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeOnTransitionTimeWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeOnTransitionTimeWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeOptionsWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeOptionsWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeStartUpCurrentLevelWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeStartUpCurrentLevelWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;
}

declare class MTRClusterLocalizationConfiguration extends MTRCluster {

	static alloc(): MTRClusterLocalizationConfiguration; // inherited from NSObject

	static new(): MTRClusterLocalizationConfiguration; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeActiveLocaleWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeSupportedLocalesWithParams(params: MTRReadParams): NSDictionary<string, any>;

	writeAttributeActiveLocaleWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeActiveLocaleWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;
}

declare class MTRClusterLowPower extends MTRCluster {

	static alloc(): MTRClusterLowPower; // inherited from NSObject

	static new(): MTRClusterLowPower; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	sleepWithExpectedValuesExpectedValueIntervalCompletionHandler(expectedValues: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	sleepWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRLowPowerClusterSleepParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;
}

declare class MTRClusterMediaInput extends MTRCluster {

	static alloc(): MTRClusterMediaInput; // inherited from NSObject

	static new(): MTRClusterMediaInput; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	hideInputStatusWithExpectedValuesExpectedValueIntervalCompletionHandler(expectedValues: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	hideInputStatusWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRMediaInputClusterHideInputStatusParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeCurrentInputWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeInputListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	renameInputWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRMediaInputClusterRenameInputParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	selectInputWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRMediaInputClusterSelectInputParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	showInputStatusWithExpectedValuesExpectedValueIntervalCompletionHandler(expectedValues: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	showInputStatusWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRMediaInputClusterShowInputStatusParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;
}

declare class MTRClusterMediaPlayback extends MTRCluster {

	static alloc(): MTRClusterMediaPlayback; // inherited from NSObject

	static new(): MTRClusterMediaPlayback; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	fastForwardWithExpectedValuesExpectedValueIntervalCompletionHandler(expectedValues: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRMediaPlaybackClusterPlaybackResponseParams, p2: NSError) => void): void;

	fastForwardWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRMediaPlaybackClusterFastForwardParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRMediaPlaybackClusterPlaybackResponseParams, p2: NSError) => void): void;

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	nextWithExpectedValuesExpectedValueIntervalCompletionHandler(expectedValues: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRMediaPlaybackClusterPlaybackResponseParams, p2: NSError) => void): void;

	nextWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRMediaPlaybackClusterNextParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRMediaPlaybackClusterPlaybackResponseParams, p2: NSError) => void): void;

	pauseWithExpectedValuesExpectedValueIntervalCompletionHandler(expectedValues: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRMediaPlaybackClusterPlaybackResponseParams, p2: NSError) => void): void;

	pauseWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRMediaPlaybackClusterPauseParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRMediaPlaybackClusterPlaybackResponseParams, p2: NSError) => void): void;

	playWithExpectedValuesExpectedValueIntervalCompletionHandler(expectedValues: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRMediaPlaybackClusterPlaybackResponseParams, p2: NSError) => void): void;

	playWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRMediaPlaybackClusterPlayParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRMediaPlaybackClusterPlaybackResponseParams, p2: NSError) => void): void;

	previousWithExpectedValuesExpectedValueIntervalCompletionHandler(expectedValues: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRMediaPlaybackClusterPlaybackResponseParams, p2: NSError) => void): void;

	previousWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRMediaPlaybackClusterPreviousParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRMediaPlaybackClusterPlaybackResponseParams, p2: NSError) => void): void;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeCurrentStateWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeDurationWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributePlaybackSpeedWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeSampledPositionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeSeekRangeEndWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeSeekRangeStartWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeStartTimeWithParams(params: MTRReadParams): NSDictionary<string, any>;

	rewindWithExpectedValuesExpectedValueIntervalCompletionHandler(expectedValues: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRMediaPlaybackClusterPlaybackResponseParams, p2: NSError) => void): void;

	rewindWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRMediaPlaybackClusterRewindParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRMediaPlaybackClusterPlaybackResponseParams, p2: NSError) => void): void;

	seekWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRMediaPlaybackClusterSeekParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRMediaPlaybackClusterPlaybackResponseParams, p2: NSError) => void): void;

	skipBackwardWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRMediaPlaybackClusterSkipBackwardParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRMediaPlaybackClusterPlaybackResponseParams, p2: NSError) => void): void;

	skipForwardWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRMediaPlaybackClusterSkipForwardParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRMediaPlaybackClusterPlaybackResponseParams, p2: NSError) => void): void;

	startOverWithExpectedValuesExpectedValueIntervalCompletionHandler(expectedValues: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRMediaPlaybackClusterPlaybackResponseParams, p2: NSError) => void): void;

	startOverWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRMediaPlaybackClusterStartOverParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRMediaPlaybackClusterPlaybackResponseParams, p2: NSError) => void): void;

	stopPlaybackWithExpectedValuesExpectedValueIntervalCompletionHandler(expectedValues: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRMediaPlaybackClusterPlaybackResponseParams, p2: NSError) => void): void;

	stopPlaybackWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRMediaPlaybackClusterStopPlaybackParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRMediaPlaybackClusterPlaybackResponseParams, p2: NSError) => void): void;
}

declare class MTRClusterModeSelect extends MTRCluster {

	static alloc(): MTRClusterModeSelect; // inherited from NSObject

	static new(): MTRClusterModeSelect; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	changeToModeWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRModeSelectClusterChangeToModeParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeCurrentModeWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeDescriptionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeOnModeWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeStandardNamespaceWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeStartUpModeWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeSupportedModesWithParams(params: MTRReadParams): NSDictionary<string, any>;

	writeAttributeOnModeWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeOnModeWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeStartUpModeWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeStartUpModeWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;
}

declare class MTRClusterNetworkCommissioning extends MTRCluster {

	static alloc(): MTRClusterNetworkCommissioning; // inherited from NSObject

	static new(): MTRClusterNetworkCommissioning; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	addOrUpdateThreadNetworkWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRNetworkCommissioningClusterAddOrUpdateThreadNetworkParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRNetworkCommissioningClusterNetworkConfigResponseParams, p2: NSError) => void): void;

	addOrUpdateWiFiNetworkWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRNetworkCommissioningClusterAddOrUpdateWiFiNetworkParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRNetworkCommissioningClusterNetworkConfigResponseParams, p2: NSError) => void): void;

	connectNetworkWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRNetworkCommissioningClusterConnectNetworkParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRNetworkCommissioningClusterConnectNetworkResponseParams, p2: NSError) => void): void;

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeConnectMaxTimeSecondsWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeInterfaceEnabledWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeLastConnectErrorValueWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeLastNetworkIDWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeLastNetworkingStatusWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMaxNetworksWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeNetworksWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeScanMaxTimeSecondsWithParams(params: MTRReadParams): NSDictionary<string, any>;

	removeNetworkWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRNetworkCommissioningClusterRemoveNetworkParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRNetworkCommissioningClusterNetworkConfigResponseParams, p2: NSError) => void): void;

	reorderNetworkWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRNetworkCommissioningClusterReorderNetworkParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRNetworkCommissioningClusterNetworkConfigResponseParams, p2: NSError) => void): void;

	scanNetworksWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRNetworkCommissioningClusterScanNetworksParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRNetworkCommissioningClusterScanNetworksResponseParams, p2: NSError) => void): void;

	writeAttributeInterfaceEnabledWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeInterfaceEnabledWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;
}

declare class MTRClusterOccupancySensing extends MTRCluster {

	static alloc(): MTRClusterOccupancySensing; // inherited from NSObject

	static new(): MTRClusterOccupancySensing; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeOccupancySensorTypeBitmapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeOccupancySensorTypeWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeOccupancyWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributePhysicalContactOccupiedToUnoccupiedDelayWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributePhysicalContactUnoccupiedToOccupiedDelayWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributePhysicalContactUnoccupiedToOccupiedThresholdWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributePirOccupiedToUnoccupiedDelayWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributePirUnoccupiedToOccupiedDelayWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributePirUnoccupiedToOccupiedThresholdWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeUltrasonicOccupiedToUnoccupiedDelayWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeUltrasonicUnoccupiedToOccupiedDelayWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeUltrasonicUnoccupiedToOccupiedThresholdWithParams(params: MTRReadParams): NSDictionary<string, any>;

	writeAttributePhysicalContactOccupiedToUnoccupiedDelayWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributePhysicalContactOccupiedToUnoccupiedDelayWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributePhysicalContactUnoccupiedToOccupiedDelayWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributePhysicalContactUnoccupiedToOccupiedDelayWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributePhysicalContactUnoccupiedToOccupiedThresholdWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributePhysicalContactUnoccupiedToOccupiedThresholdWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributePirOccupiedToUnoccupiedDelayWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributePirOccupiedToUnoccupiedDelayWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributePirUnoccupiedToOccupiedDelayWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributePirUnoccupiedToOccupiedDelayWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributePirUnoccupiedToOccupiedThresholdWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributePirUnoccupiedToOccupiedThresholdWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeUltrasonicOccupiedToUnoccupiedDelayWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeUltrasonicOccupiedToUnoccupiedDelayWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeUltrasonicUnoccupiedToOccupiedDelayWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeUltrasonicUnoccupiedToOccupiedDelayWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeUltrasonicUnoccupiedToOccupiedThresholdWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeUltrasonicUnoccupiedToOccupiedThresholdWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;
}

declare class MTRClusterOnOff extends MTRCluster {

	static alloc(): MTRClusterOnOff; // inherited from NSObject

	static new(): MTRClusterOnOff; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	offWithEffectWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTROnOffClusterOffWithEffectParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	offWithExpectedValuesExpectedValueIntervalCompletionHandler(expectedValues: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	offWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTROnOffClusterOffParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	onWithExpectedValuesExpectedValueIntervalCompletionHandler(expectedValues: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	onWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTROnOffClusterOnParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	onWithRecallGlobalSceneWithExpectedValuesExpectedValueIntervalCompletionHandler(expectedValues: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	onWithRecallGlobalSceneWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTROnOffClusterOnWithRecallGlobalSceneParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	onWithTimedOffWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTROnOffClusterOnWithTimedOffParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGlobalSceneControlWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeOffWaitTimeWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeOnOffWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeOnTimeWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeStartUpOnOffWithParams(params: MTRReadParams): NSDictionary<string, any>;

	toggleWithExpectedValuesExpectedValueIntervalCompletionHandler(expectedValues: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	toggleWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTROnOffClusterToggleParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeOffWaitTimeWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeOffWaitTimeWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeOnTimeWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeOnTimeWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeStartUpOnOffWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeStartUpOnOffWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;
}

declare class MTRClusterOnOffSwitchConfiguration extends MTRCluster {

	static alloc(): MTRClusterOnOffSwitchConfiguration; // inherited from NSObject

	static new(): MTRClusterOnOffSwitchConfiguration; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeSwitchActionsWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeSwitchTypeWithParams(params: MTRReadParams): NSDictionary<string, any>;

	writeAttributeSwitchActionsWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeSwitchActionsWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;
}

declare class MTRClusterOperationalCredentials extends MTRCluster {

	static alloc(): MTRClusterOperationalCredentials; // inherited from NSObject

	static new(): MTRClusterOperationalCredentials; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	CSRRequestWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTROperationalCredentialsClusterCSRRequestParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTROperationalCredentialsClusterCSRResponseParams, p2: NSError) => void): void;

	addNOCWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTROperationalCredentialsClusterAddNOCParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTROperationalCredentialsClusterNOCResponseParams, p2: NSError) => void): void;

	addTrustedRootCertificateWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTROperationalCredentialsClusterAddTrustedRootCertificateParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	attestationRequestWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTROperationalCredentialsClusterAttestationRequestParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTROperationalCredentialsClusterAttestationResponseParams, p2: NSError) => void): void;

	certificateChainRequestWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTROperationalCredentialsClusterCertificateChainRequestParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTROperationalCredentialsClusterCertificateChainResponseParams, p2: NSError) => void): void;

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeCommissionedFabricsWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeCurrentFabricIndexWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFabricsWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeNOCsWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeSupportedFabricsWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeTrustedRootCertificatesWithParams(params: MTRReadParams): NSDictionary<string, any>;

	removeFabricWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTROperationalCredentialsClusterRemoveFabricParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTROperationalCredentialsClusterNOCResponseParams, p2: NSError) => void): void;

	updateFabricLabelWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTROperationalCredentialsClusterUpdateFabricLabelParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTROperationalCredentialsClusterNOCResponseParams, p2: NSError) => void): void;

	updateNOCWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTROperationalCredentialsClusterUpdateNOCParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTROperationalCredentialsClusterNOCResponseParams, p2: NSError) => void): void;
}

declare class MTRClusterOtaSoftwareUpdateProvider extends MTRCluster {

	static alloc(): MTRClusterOtaSoftwareUpdateProvider; // inherited from NSObject

	static new(): MTRClusterOtaSoftwareUpdateProvider; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	applyUpdateRequestWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTROtaSoftwareUpdateProviderClusterApplyUpdateRequestParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTROtaSoftwareUpdateProviderClusterApplyUpdateResponseParams, p2: NSError) => void): void;

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	notifyUpdateAppliedWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTROtaSoftwareUpdateProviderClusterNotifyUpdateAppliedParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	queryImageWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTROtaSoftwareUpdateProviderClusterQueryImageParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTROtaSoftwareUpdateProviderClusterQueryImageResponseParams, p2: NSError) => void): void;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;
}

declare class MTRClusterOtaSoftwareUpdateRequestor extends MTRCluster {

	static alloc(): MTRClusterOtaSoftwareUpdateRequestor; // inherited from NSObject

	static new(): MTRClusterOtaSoftwareUpdateRequestor; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	announceOtaProviderWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTROtaSoftwareUpdateRequestorClusterAnnounceOtaProviderParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeDefaultOtaProvidersWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeUpdatePossibleWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeUpdateStateProgressWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeUpdateStateWithParams(params: MTRReadParams): NSDictionary<string, any>;

	writeAttributeDefaultOtaProvidersWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeDefaultOtaProvidersWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;
}

declare class MTRClusterPowerSource extends MTRCluster {

	static alloc(): MTRClusterPowerSource; // inherited from NSObject

	static new(): MTRClusterPowerSource; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeActiveBatChargeFaultsWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeActiveBatFaultsWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeActiveWiredFaultsWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeBatANSIDesignationWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeBatApprovedChemistryWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeBatCapacityWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeBatChargeLevelWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeBatChargeStateWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeBatChargingCurrentWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeBatCommonDesignationWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeBatFunctionalWhileChargingWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeBatIECDesignationWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeBatPercentRemainingWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeBatPresentWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeBatQuantityWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeBatReplaceabilityWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeBatReplacementDescriptionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeBatReplacementNeededWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeBatTimeRemainingWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeBatTimeToFullChargeWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeBatVoltageWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeDescriptionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeOrderWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeStatusWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeWiredAssessedCurrentWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeWiredAssessedInputFrequencyWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeWiredAssessedInputVoltageWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeWiredCurrentTypeWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeWiredMaximumCurrentWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeWiredNominalVoltageWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeWiredPresentWithParams(params: MTRReadParams): NSDictionary<string, any>;
}

declare class MTRClusterPowerSourceConfiguration extends MTRCluster {

	static alloc(): MTRClusterPowerSourceConfiguration; // inherited from NSObject

	static new(): MTRClusterPowerSourceConfiguration; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeSourcesWithParams(params: MTRReadParams): NSDictionary<string, any>;
}

declare class MTRClusterPressureMeasurement extends MTRCluster {

	static alloc(): MTRClusterPressureMeasurement; // inherited from NSObject

	static new(): MTRClusterPressureMeasurement; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMaxMeasuredValueWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMaxScaledValueWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMeasuredValueWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMinMeasuredValueWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMinScaledValueWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeScaleWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeScaledToleranceWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeScaledValueWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeToleranceWithParams(params: MTRReadParams): NSDictionary<string, any>;
}

declare class MTRClusterPumpConfigurationAndControl extends MTRCluster {

	static alloc(): MTRClusterPumpConfigurationAndControl; // inherited from NSObject

	static new(): MTRClusterPumpConfigurationAndControl; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeCapacityWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeControlModeWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeEffectiveControlModeWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeEffectiveOperationModeWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeLifetimeEnergyConsumedWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeLifetimeRunningHoursWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMaxCompPressureWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMaxConstFlowWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMaxConstPressureWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMaxConstSpeedWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMaxConstTempWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMaxFlowWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMaxPressureWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMaxSpeedWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMinCompPressureWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMinConstFlowWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMinConstPressureWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMinConstSpeedWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMinConstTempWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeOperationModeWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributePowerWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributePumpStatusWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeSpeedWithParams(params: MTRReadParams): NSDictionary<string, any>;

	writeAttributeControlModeWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeControlModeWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeLifetimeEnergyConsumedWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeLifetimeEnergyConsumedWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeLifetimeRunningHoursWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeLifetimeRunningHoursWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeOperationModeWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeOperationModeWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;
}

declare class MTRClusterRelativeHumidityMeasurement extends MTRCluster {

	static alloc(): MTRClusterRelativeHumidityMeasurement; // inherited from NSObject

	static new(): MTRClusterRelativeHumidityMeasurement; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMaxMeasuredValueWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMeasuredValueWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMinMeasuredValueWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeToleranceWithParams(params: MTRReadParams): NSDictionary<string, any>;
}

declare class MTRClusterScenes extends MTRCluster {

	static alloc(): MTRClusterScenes; // inherited from NSObject

	static new(): MTRClusterScenes; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	addSceneWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRScenesClusterAddSceneParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRScenesClusterAddSceneResponseParams, p2: NSError) => void): void;

	copySceneWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRScenesClusterCopySceneParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRScenesClusterCopySceneResponseParams, p2: NSError) => void): void;

	enhancedAddSceneWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRScenesClusterEnhancedAddSceneParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRScenesClusterEnhancedAddSceneResponseParams, p2: NSError) => void): void;

	enhancedViewSceneWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRScenesClusterEnhancedViewSceneParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRScenesClusterEnhancedViewSceneResponseParams, p2: NSError) => void): void;

	getSceneMembershipWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRScenesClusterGetSceneMembershipParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRScenesClusterGetSceneMembershipResponseParams, p2: NSError) => void): void;

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeCurrentGroupWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeCurrentSceneWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeLastConfiguredByWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeNameSupportWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeSceneCountWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeSceneValidWithParams(params: MTRReadParams): NSDictionary<string, any>;

	recallSceneWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRScenesClusterRecallSceneParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	removeAllScenesWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRScenesClusterRemoveAllScenesParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRScenesClusterRemoveAllScenesResponseParams, p2: NSError) => void): void;

	removeSceneWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRScenesClusterRemoveSceneParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRScenesClusterRemoveSceneResponseParams, p2: NSError) => void): void;

	storeSceneWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRScenesClusterStoreSceneParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRScenesClusterStoreSceneResponseParams, p2: NSError) => void): void;

	viewSceneWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRScenesClusterViewSceneParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRScenesClusterViewSceneResponseParams, p2: NSError) => void): void;
}

declare class MTRClusterSoftwareDiagnostics extends MTRCluster {

	static alloc(): MTRClusterSoftwareDiagnostics; // inherited from NSObject

	static new(): MTRClusterSoftwareDiagnostics; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeCurrentHeapFreeWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeCurrentHeapHighWatermarkWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeCurrentHeapUsedWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeThreadMetricsWithParams(params: MTRReadParams): NSDictionary<string, any>;

	resetWatermarksWithExpectedValuesExpectedValueIntervalCompletionHandler(expectedValues: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	resetWatermarksWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRSoftwareDiagnosticsClusterResetWatermarksParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;
}

declare class MTRClusterSwitch extends MTRCluster {

	static alloc(): MTRClusterSwitch; // inherited from NSObject

	static new(): MTRClusterSwitch; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeCurrentPositionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMultiPressMaxWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeNumberOfPositionsWithParams(params: MTRReadParams): NSDictionary<string, any>;
}

declare class MTRClusterTargetNavigator extends MTRCluster {

	static alloc(): MTRClusterTargetNavigator; // inherited from NSObject

	static new(): MTRClusterTargetNavigator; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	navigateTargetWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRTargetNavigatorClusterNavigateTargetParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRTargetNavigatorClusterNavigateTargetResponseParams, p2: NSError) => void): void;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeCurrentTargetWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeTargetListWithParams(params: MTRReadParams): NSDictionary<string, any>;
}

declare class MTRClusterTemperatureMeasurement extends MTRCluster {

	static alloc(): MTRClusterTemperatureMeasurement; // inherited from NSObject

	static new(): MTRClusterTemperatureMeasurement; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMaxMeasuredValueWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMeasuredValueWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMinMeasuredValueWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeToleranceWithParams(params: MTRReadParams): NSDictionary<string, any>;
}

declare class MTRClusterTestCluster extends MTRCluster {

	static alloc(): MTRClusterTestCluster; // inherited from NSObject

	static new(): MTRClusterTestCluster; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeBitmap16WithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeBitmap32WithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeBitmap64WithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeBitmap8WithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeBooleanWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeCharStringWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterErrorBooleanWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeEnum16WithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeEnum8WithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeEnumAttrWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeEpochSWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeEpochUsWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFloatDoubleWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFloatSingleWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneralErrorBooleanWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeInt16sWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeInt16uWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeInt24sWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeInt24uWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeInt32sWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeInt32uWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeInt40sWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeInt40uWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeInt48sWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeInt48uWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeInt56sWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeInt56uWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeInt64sWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeInt64uWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeInt8sWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeInt8uWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeListFabricScopedWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeListInt8uWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeListLongOctetStringWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeListNullablesAndOptionalsStructWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeListOctetStringWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeListStructOctetStringWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeLongCharStringWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeLongOctetStringWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeNullableBitmap16WithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeNullableBitmap32WithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeNullableBitmap64WithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeNullableBitmap8WithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeNullableBooleanWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeNullableCharStringWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeNullableEnum16WithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeNullableEnum8WithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeNullableEnumAttrWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeNullableFloatDoubleWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeNullableFloatSingleWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeNullableInt16sWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeNullableInt16uWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeNullableInt24sWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeNullableInt24uWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeNullableInt32sWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeNullableInt32uWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeNullableInt40sWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeNullableInt40uWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeNullableInt48sWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeNullableInt48uWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeNullableInt56sWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeNullableInt56uWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeNullableInt64sWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeNullableInt64uWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeNullableInt8sWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeNullableInt8uWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeNullableOctetStringWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeNullableRangeRestrictedInt16sWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeNullableRangeRestrictedInt16uWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeNullableRangeRestrictedInt8sWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeNullableRangeRestrictedInt8uWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeNullableStructWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeOctetStringWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRangeRestrictedInt16sWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRangeRestrictedInt16uWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRangeRestrictedInt8sWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRangeRestrictedInt8uWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeStructAttrWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeTimedWriteBooleanWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeUnsupportedWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeVendorIdWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeWriteOnlyInt8uWithParams(params: MTRReadParams): NSDictionary<string, any>;

	simpleStructEchoRequestWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRTestClusterClusterSimpleStructEchoRequestParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRTestClusterClusterSimpleStructResponseParams, p2: NSError) => void): void;

	testAddArgumentsWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRTestClusterClusterTestAddArgumentsParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRTestClusterClusterTestAddArgumentsResponseParams, p2: NSError) => void): void;

	testComplexNullableOptionalRequestWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRTestClusterClusterTestComplexNullableOptionalRequestParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRTestClusterClusterTestComplexNullableOptionalResponseParams, p2: NSError) => void): void;

	testEmitTestEventRequestWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRTestClusterClusterTestEmitTestEventRequestParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRTestClusterClusterTestEmitTestEventResponseParams, p2: NSError) => void): void;

	testEmitTestFabricScopedEventRequestWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRTestClusterClusterTestEmitTestFabricScopedEventRequestParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRTestClusterClusterTestEmitTestFabricScopedEventResponseParams, p2: NSError) => void): void;

	testEnumsRequestWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRTestClusterClusterTestEnumsRequestParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRTestClusterClusterTestEnumsResponseParams, p2: NSError) => void): void;

	testListInt8UArgumentRequestWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRTestClusterClusterTestListInt8UArgumentRequestParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRTestClusterClusterBooleanResponseParams, p2: NSError) => void): void;

	testListInt8UReverseRequestWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRTestClusterClusterTestListInt8UReverseRequestParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRTestClusterClusterTestListInt8UReverseResponseParams, p2: NSError) => void): void;

	testListNestedStructListArgumentRequestWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRTestClusterClusterTestListNestedStructListArgumentRequestParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRTestClusterClusterBooleanResponseParams, p2: NSError) => void): void;

	testListStructArgumentRequestWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRTestClusterClusterTestListStructArgumentRequestParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRTestClusterClusterBooleanResponseParams, p2: NSError) => void): void;

	testNestedStructArgumentRequestWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRTestClusterClusterTestNestedStructArgumentRequestParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRTestClusterClusterBooleanResponseParams, p2: NSError) => void): void;

	testNestedStructListArgumentRequestWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRTestClusterClusterTestNestedStructListArgumentRequestParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRTestClusterClusterBooleanResponseParams, p2: NSError) => void): void;

	testNotHandledWithExpectedValuesExpectedValueIntervalCompletionHandler(expectedValues: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	testNotHandledWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRTestClusterClusterTestNotHandledParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	testNullableOptionalRequestWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRTestClusterClusterTestNullableOptionalRequestParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRTestClusterClusterTestNullableOptionalResponseParams, p2: NSError) => void): void;

	testSimpleArgumentRequestWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRTestClusterClusterTestSimpleArgumentRequestParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRTestClusterClusterTestSimpleArgumentResponseParams, p2: NSError) => void): void;

	testSimpleOptionalArgumentRequestWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRTestClusterClusterTestSimpleOptionalArgumentRequestParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	testSpecificWithExpectedValuesExpectedValueIntervalCompletionHandler(expectedValues: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRTestClusterClusterTestSpecificResponseParams, p2: NSError) => void): void;

	testSpecificWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRTestClusterClusterTestSpecificParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRTestClusterClusterTestSpecificResponseParams, p2: NSError) => void): void;

	testStructArgumentRequestWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRTestClusterClusterTestStructArgumentRequestParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRTestClusterClusterBooleanResponseParams, p2: NSError) => void): void;

	testStructArrayArgumentRequestWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRTestClusterClusterTestStructArrayArgumentRequestParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRTestClusterClusterTestStructArrayArgumentResponseParams, p2: NSError) => void): void;

	testUnknownCommandWithExpectedValuesExpectedValueIntervalCompletionHandler(expectedValues: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	testUnknownCommandWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRTestClusterClusterTestUnknownCommandParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	testWithExpectedValuesExpectedValueIntervalCompletionHandler(expectedValues: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	testWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRTestClusterClusterTestParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	timedInvokeRequestWithExpectedValuesExpectedValueIntervalCompletionHandler(expectedValues: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	timedInvokeRequestWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRTestClusterClusterTimedInvokeRequestParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeBitmap16WithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeBitmap16WithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeBitmap32WithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeBitmap32WithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeBitmap64WithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeBitmap64WithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeBitmap8WithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeBitmap8WithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeBooleanWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeBooleanWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeCharStringWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeCharStringWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeClusterErrorBooleanWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeClusterErrorBooleanWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeEnum16WithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeEnum16WithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeEnum8WithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeEnum8WithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeEnumAttrWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeEnumAttrWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeEpochSWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeEpochSWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeEpochUsWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeEpochUsWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeFloatDoubleWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeFloatDoubleWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeFloatSingleWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeFloatSingleWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeGeneralErrorBooleanWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeGeneralErrorBooleanWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeInt16sWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeInt16sWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeInt16uWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeInt16uWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeInt24sWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeInt24sWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeInt24uWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeInt24uWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeInt32sWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeInt32sWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeInt32uWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeInt32uWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeInt40sWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeInt40sWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeInt40uWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeInt40uWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeInt48sWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeInt48sWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeInt48uWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeInt48uWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeInt56sWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeInt56sWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeInt56uWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeInt56uWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeInt64sWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeInt64sWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeInt64uWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeInt64uWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeInt8sWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeInt8sWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeInt8uWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeInt8uWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeListFabricScopedWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeListFabricScopedWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeListInt8uWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeListInt8uWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeListLongOctetStringWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeListLongOctetStringWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeListNullablesAndOptionalsStructWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeListNullablesAndOptionalsStructWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeListOctetStringWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeListOctetStringWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeListStructOctetStringWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeListStructOctetStringWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeLongCharStringWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeLongCharStringWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeLongOctetStringWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeLongOctetStringWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeNullableBitmap16WithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeNullableBitmap16WithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeNullableBitmap32WithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeNullableBitmap32WithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeNullableBitmap64WithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeNullableBitmap64WithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeNullableBitmap8WithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeNullableBitmap8WithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeNullableBooleanWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeNullableBooleanWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeNullableCharStringWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeNullableCharStringWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeNullableEnum16WithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeNullableEnum16WithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeNullableEnum8WithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeNullableEnum8WithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeNullableEnumAttrWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeNullableEnumAttrWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeNullableFloatDoubleWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeNullableFloatDoubleWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeNullableFloatSingleWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeNullableFloatSingleWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeNullableInt16sWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeNullableInt16sWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeNullableInt16uWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeNullableInt16uWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeNullableInt24sWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeNullableInt24sWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeNullableInt24uWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeNullableInt24uWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeNullableInt32sWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeNullableInt32sWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeNullableInt32uWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeNullableInt32uWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeNullableInt40sWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeNullableInt40sWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeNullableInt40uWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeNullableInt40uWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeNullableInt48sWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeNullableInt48sWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeNullableInt48uWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeNullableInt48uWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeNullableInt56sWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeNullableInt56sWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeNullableInt56uWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeNullableInt56uWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeNullableInt64sWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeNullableInt64sWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeNullableInt64uWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeNullableInt64uWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeNullableInt8sWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeNullableInt8sWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeNullableInt8uWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeNullableInt8uWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeNullableOctetStringWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeNullableOctetStringWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeNullableRangeRestrictedInt16sWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeNullableRangeRestrictedInt16sWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeNullableRangeRestrictedInt16uWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeNullableRangeRestrictedInt16uWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeNullableRangeRestrictedInt8sWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeNullableRangeRestrictedInt8sWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeNullableRangeRestrictedInt8uWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeNullableRangeRestrictedInt8uWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeNullableStructWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeNullableStructWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeOctetStringWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeOctetStringWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeRangeRestrictedInt16sWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeRangeRestrictedInt16sWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeRangeRestrictedInt16uWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeRangeRestrictedInt16uWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeRangeRestrictedInt8sWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeRangeRestrictedInt8sWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeRangeRestrictedInt8uWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeRangeRestrictedInt8uWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeStructAttrWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeStructAttrWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeTimedWriteBooleanWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeTimedWriteBooleanWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeUnsupportedWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeUnsupportedWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeVendorIdWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeVendorIdWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeWriteOnlyInt8uWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeWriteOnlyInt8uWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;
}

declare class MTRClusterThermostat extends MTRCluster {

	static alloc(): MTRClusterThermostat; // inherited from NSObject

	static new(): MTRClusterThermostat; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	clearWeeklyScheduleWithExpectedValuesExpectedValueIntervalCompletionHandler(expectedValues: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	clearWeeklyScheduleWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRThermostatClusterClearWeeklyScheduleParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	getWeeklyScheduleWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRThermostatClusterGetWeeklyScheduleParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: MTRThermostatClusterGetWeeklyScheduleResponseParams, p2: NSError) => void): void;

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	readAttributeACCapacityWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeACCapacityformatWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeACCoilTemperatureWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeACCompressorTypeWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeACErrorCodeWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeACLouverPositionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeACRefrigerantTypeWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeACTypeWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAbsMaxCoolSetpointLimitWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAbsMaxHeatSetpointLimitWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAbsMinCoolSetpointLimitWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAbsMinHeatSetpointLimitWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeControlSequenceOfOperationWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeEmergencyHeatDeltaWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeHVACSystemTypeConfigurationWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeLocalTemperatureCalibrationWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeLocalTemperatureWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMaxCoolSetpointLimitWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMaxHeatSetpointLimitWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMinCoolSetpointLimitWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMinHeatSetpointLimitWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMinSetpointDeadBandWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeNumberOfDailyTransitionsWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeNumberOfWeeklyTransitionsWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeOccupancyWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeOccupiedCoolingSetpointWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeOccupiedHeatingSetpointWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeOccupiedSetbackMaxWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeOccupiedSetbackMinWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeOccupiedSetbackWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeOutdoorTemperatureWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributePICoolingDemandWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributePIHeatingDemandWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRemoteSensingWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeSetpointChangeAmountWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeSetpointChangeSourceTimestampWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeSetpointChangeSourceWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeStartOfWeekWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeSystemModeWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeTemperatureSetpointHoldDurationWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeTemperatureSetpointHoldWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeThermostatProgrammingOperationModeWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeThermostatRunningModeWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeThermostatRunningStateWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeUnoccupiedCoolingSetpointWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeUnoccupiedHeatingSetpointWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeUnoccupiedSetbackMaxWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeUnoccupiedSetbackMinWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeUnoccupiedSetbackWithParams(params: MTRReadParams): NSDictionary<string, any>;

	setWeeklyScheduleWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRThermostatClusterSetWeeklyScheduleParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	setpointRaiseLowerWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRThermostatClusterSetpointRaiseLowerParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeACCapacityWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeACCapacityWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeACCapacityformatWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeACCapacityformatWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeACCompressorTypeWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeACCompressorTypeWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeACErrorCodeWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeACErrorCodeWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeACLouverPositionWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeACLouverPositionWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeACRefrigerantTypeWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeACRefrigerantTypeWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeACTypeWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeACTypeWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeControlSequenceOfOperationWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeControlSequenceOfOperationWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeEmergencyHeatDeltaWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeEmergencyHeatDeltaWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeHVACSystemTypeConfigurationWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeHVACSystemTypeConfigurationWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeLocalTemperatureCalibrationWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeLocalTemperatureCalibrationWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeMaxCoolSetpointLimitWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeMaxCoolSetpointLimitWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeMaxHeatSetpointLimitWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeMaxHeatSetpointLimitWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeMinCoolSetpointLimitWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeMinCoolSetpointLimitWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeMinHeatSetpointLimitWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeMinHeatSetpointLimitWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeMinSetpointDeadBandWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeMinSetpointDeadBandWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeOccupiedCoolingSetpointWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeOccupiedCoolingSetpointWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeOccupiedHeatingSetpointWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeOccupiedHeatingSetpointWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeOccupiedSetbackWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeOccupiedSetbackWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeRemoteSensingWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeRemoteSensingWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeSystemModeWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeSystemModeWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeTemperatureSetpointHoldDurationWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeTemperatureSetpointHoldDurationWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeTemperatureSetpointHoldWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeTemperatureSetpointHoldWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeThermostatProgrammingOperationModeWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeThermostatProgrammingOperationModeWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeUnoccupiedCoolingSetpointWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeUnoccupiedCoolingSetpointWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeUnoccupiedHeatingSetpointWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeUnoccupiedHeatingSetpointWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeUnoccupiedSetbackWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeUnoccupiedSetbackWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;
}

declare class MTRClusterThermostatUserInterfaceConfiguration extends MTRCluster {

	static alloc(): MTRClusterThermostatUserInterfaceConfiguration; // inherited from NSObject

	static new(): MTRClusterThermostatUserInterfaceConfiguration; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeKeypadLockoutWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeScheduleProgrammingVisibilityWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeTemperatureDisplayModeWithParams(params: MTRReadParams): NSDictionary<string, any>;

	writeAttributeKeypadLockoutWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeKeypadLockoutWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeScheduleProgrammingVisibilityWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeScheduleProgrammingVisibilityWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeTemperatureDisplayModeWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeTemperatureDisplayModeWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;
}

declare class MTRClusterThreadNetworkDiagnostics extends MTRCluster {

	static alloc(): MTRClusterThreadNetworkDiagnostics; // inherited from NSObject

	static new(): MTRClusterThreadNetworkDiagnostics; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeActiveNetworkFaultsListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeActiveTimestampWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttachAttemptCountWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeBetterPartitionAttachAttemptCountWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeChannelPage0MaskWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeChannelWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeChildRoleCountWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeDataVersionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeDelayWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeDetachedRoleCountWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeExtendedPanIdWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeLeaderRoleCountWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeLeaderRouterIdWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMeshLocalPrefixWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeNeighborTableListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeNetworkNameWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeOperationalDatasetComponentsWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeOverrunCountWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributePanIdWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeParentChangeCountWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributePartitionIdChangeCountWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributePartitionIdWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributePendingTimestampWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRouteTableListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRouterRoleCountWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRoutingRoleWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRxAddressFilteredCountWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRxBeaconCountWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRxBeaconRequestCountWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRxBroadcastCountWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRxDataCountWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRxDataPollCountWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRxDestAddrFilteredCountWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRxDuplicatedCountWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRxErrFcsCountWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRxErrInvalidSrcAddrCountWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRxErrNoFrameCountWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRxErrOtherCountWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRxErrSecCountWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRxErrUnknownNeighborCountWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRxOtherCountWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRxTotalCountWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRxUnicastCountWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeSecurityPolicyWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeStableDataVersionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeTxAckRequestedCountWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeTxAckedCountWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeTxBeaconCountWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeTxBeaconRequestCountWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeTxBroadcastCountWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeTxDataCountWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeTxDataPollCountWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeTxDirectMaxRetryExpiryCountWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeTxErrAbortCountWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeTxErrBusyChannelCountWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeTxErrCcaCountWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeTxIndirectMaxRetryExpiryCountWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeTxNoAckRequestedCountWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeTxOtherCountWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeTxRetryCountWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeTxTotalCountWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeTxUnicastCountWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeWeightingWithParams(params: MTRReadParams): NSDictionary<string, any>;

	resetCountsWithExpectedValuesExpectedValueIntervalCompletionHandler(expectedValues: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	resetCountsWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRThreadNetworkDiagnosticsClusterResetCountsParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;
}

declare class MTRClusterTimeFormatLocalization extends MTRCluster {

	static alloc(): MTRClusterTimeFormatLocalization; // inherited from NSObject

	static new(): MTRClusterTimeFormatLocalization; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeActiveCalendarTypeWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeHourFormatWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeSupportedCalendarTypesWithParams(params: MTRReadParams): NSDictionary<string, any>;

	writeAttributeActiveCalendarTypeWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeActiveCalendarTypeWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;

	writeAttributeHourFormatWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeHourFormatWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;
}

declare class MTRClusterUnitLocalization extends MTRCluster {

	static alloc(): MTRClusterUnitLocalization; // inherited from NSObject

	static new(): MTRClusterUnitLocalization; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeTemperatureUnitWithParams(params: MTRReadParams): NSDictionary<string, any>;

	writeAttributeTemperatureUnitWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeTemperatureUnitWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;
}

declare class MTRClusterUserLabel extends MTRCluster {

	static alloc(): MTRClusterUserLabel; // inherited from NSObject

	static new(): MTRClusterUserLabel; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeLabelListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	writeAttributeLabelListWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeLabelListWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;
}

declare class MTRClusterWakeOnLan extends MTRCluster {

	static alloc(): MTRClusterWakeOnLan; // inherited from NSObject

	static new(): MTRClusterWakeOnLan; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeMACAddressWithParams(params: MTRReadParams): NSDictionary<string, any>;
}

declare class MTRClusterWiFiNetworkDiagnostics extends MTRCluster {

	static alloc(): MTRClusterWiFiNetworkDiagnostics; // inherited from NSObject

	static new(): MTRClusterWiFiNetworkDiagnostics; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeBeaconLostCountWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeBeaconRxCountWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeBssidWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeChannelNumberWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeCurrentMaxRateWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeOverrunCountWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributePacketMulticastRxCountWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributePacketMulticastTxCountWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributePacketUnicastRxCountWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributePacketUnicastTxCountWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeRssiWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeSecurityTypeWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeWiFiVersionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	resetCountsWithExpectedValuesExpectedValueIntervalCompletionHandler(expectedValues: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	resetCountsWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRWiFiNetworkDiagnosticsClusterResetCountsParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;
}

declare class MTRClusterWindowCovering extends MTRCluster {

	static alloc(): MTRClusterWindowCovering; // inherited from NSObject

	static new(): MTRClusterWindowCovering; // inherited from NSObject

	constructor(o: { device: MTRDevice; endpoint: number; queue: NSObject; });

	downOrCloseWithExpectedValuesExpectedValueIntervalCompletionHandler(expectedValues: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	downOrCloseWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRWindowCoveringClusterDownOrCloseParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	goToLiftPercentageWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRWindowCoveringClusterGoToLiftPercentageParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	goToLiftValueWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRWindowCoveringClusterGoToLiftValueParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	goToTiltPercentageWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRWindowCoveringClusterGoToTiltPercentageParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	goToTiltValueWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRWindowCoveringClusterGoToTiltValueParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	initWithDeviceEndpointQueue(device: MTRDevice, endpoint: number, queue: NSObject): this;

	readAttributeAcceptedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeAttributeListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeClusterRevisionWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeConfigStatusWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeCurrentPositionLiftPercent100thsWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeCurrentPositionLiftPercentageWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeCurrentPositionLiftWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeCurrentPositionTiltPercent100thsWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeCurrentPositionTiltPercentageWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeCurrentPositionTiltWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeEndProductTypeWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeFeatureMapWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeGeneratedCommandListWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeInstalledClosedLimitLiftWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeInstalledClosedLimitTiltWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeInstalledOpenLimitLiftWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeInstalledOpenLimitTiltWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeModeWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeNumberOfActuationsLiftWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeNumberOfActuationsTiltWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeOperationalStatusWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributePhysicalClosedLimitLiftWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributePhysicalClosedLimitTiltWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeSafetyStatusWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeTargetPositionLiftPercent100thsWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeTargetPositionTiltPercent100thsWithParams(params: MTRReadParams): NSDictionary<string, any>;

	readAttributeTypeWithParams(params: MTRReadParams): NSDictionary<string, any>;

	stopMotionWithExpectedValuesExpectedValueIntervalCompletionHandler(expectedValues: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	stopMotionWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRWindowCoveringClusterStopMotionParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	upOrOpenWithExpectedValuesExpectedValueIntervalCompletionHandler(expectedValues: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	upOrOpenWithParamsExpectedValuesExpectedValueIntervalCompletionHandler(params: MTRWindowCoveringClusterUpOrOpenParams, expectedDataValueDictionaries: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueIntervalMs: number, completionHandler: (p1: NSError) => void): void;

	writeAttributeModeWithValueExpectedValueInterval(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number): void;

	writeAttributeModeWithValueExpectedValueIntervalParams(dataValueDictionary: NSDictionary<string, any>, expectedValueIntervalMs: number, params: MTRWriteParams): void;
}

declare class MTRColorControlClusterColorLoopSetParams extends NSObject implements NSCopying {

	static alloc(): MTRColorControlClusterColorLoopSetParams; // inherited from NSObject

	static new(): MTRColorControlClusterColorLoopSetParams; // inherited from NSObject

	action: number;

	direction: number;

	optionsMask: number;

	optionsOverride: number;

	startHue: number;

	time: number;

	timedInvokeTimeoutMs: number;

	updateFlags: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRColorControlClusterEnhancedMoveHueParams extends NSObject implements NSCopying {

	static alloc(): MTRColorControlClusterEnhancedMoveHueParams; // inherited from NSObject

	static new(): MTRColorControlClusterEnhancedMoveHueParams; // inherited from NSObject

	moveMode: number;

	optionsMask: number;

	optionsOverride: number;

	rate: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRColorControlClusterEnhancedMoveToHueAndSaturationParams extends NSObject implements NSCopying {

	static alloc(): MTRColorControlClusterEnhancedMoveToHueAndSaturationParams; // inherited from NSObject

	static new(): MTRColorControlClusterEnhancedMoveToHueAndSaturationParams; // inherited from NSObject

	enhancedHue: number;

	optionsMask: number;

	optionsOverride: number;

	saturation: number;

	timedInvokeTimeoutMs: number;

	transitionTime: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRColorControlClusterEnhancedMoveToHueParams extends NSObject implements NSCopying {

	static alloc(): MTRColorControlClusterEnhancedMoveToHueParams; // inherited from NSObject

	static new(): MTRColorControlClusterEnhancedMoveToHueParams; // inherited from NSObject

	direction: number;

	enhancedHue: number;

	optionsMask: number;

	optionsOverride: number;

	timedInvokeTimeoutMs: number;

	transitionTime: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRColorControlClusterEnhancedStepHueParams extends NSObject implements NSCopying {

	static alloc(): MTRColorControlClusterEnhancedStepHueParams; // inherited from NSObject

	static new(): MTRColorControlClusterEnhancedStepHueParams; // inherited from NSObject

	optionsMask: number;

	optionsOverride: number;

	stepMode: number;

	stepSize: number;

	timedInvokeTimeoutMs: number;

	transitionTime: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRColorControlClusterMoveColorParams extends NSObject implements NSCopying {

	static alloc(): MTRColorControlClusterMoveColorParams; // inherited from NSObject

	static new(): MTRColorControlClusterMoveColorParams; // inherited from NSObject

	optionsMask: number;

	optionsOverride: number;

	rateX: number;

	rateY: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRColorControlClusterMoveColorTemperatureParams extends NSObject implements NSCopying {

	static alloc(): MTRColorControlClusterMoveColorTemperatureParams; // inherited from NSObject

	static new(): MTRColorControlClusterMoveColorTemperatureParams; // inherited from NSObject

	colorTemperatureMaximumMireds: number;

	colorTemperatureMinimumMireds: number;

	moveMode: number;

	optionsMask: number;

	optionsOverride: number;

	rate: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRColorControlClusterMoveHueParams extends NSObject implements NSCopying {

	static alloc(): MTRColorControlClusterMoveHueParams; // inherited from NSObject

	static new(): MTRColorControlClusterMoveHueParams; // inherited from NSObject

	moveMode: number;

	optionsMask: number;

	optionsOverride: number;

	rate: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRColorControlClusterMoveSaturationParams extends NSObject implements NSCopying {

	static alloc(): MTRColorControlClusterMoveSaturationParams; // inherited from NSObject

	static new(): MTRColorControlClusterMoveSaturationParams; // inherited from NSObject

	moveMode: number;

	optionsMask: number;

	optionsOverride: number;

	rate: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRColorControlClusterMoveToColorParams extends NSObject implements NSCopying {

	static alloc(): MTRColorControlClusterMoveToColorParams; // inherited from NSObject

	static new(): MTRColorControlClusterMoveToColorParams; // inherited from NSObject

	colorX: number;

	colorY: number;

	optionsMask: number;

	optionsOverride: number;

	timedInvokeTimeoutMs: number;

	transitionTime: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRColorControlClusterMoveToColorTemperatureParams extends NSObject implements NSCopying {

	static alloc(): MTRColorControlClusterMoveToColorTemperatureParams; // inherited from NSObject

	static new(): MTRColorControlClusterMoveToColorTemperatureParams; // inherited from NSObject

	colorTemperature: number;

	optionsMask: number;

	optionsOverride: number;

	timedInvokeTimeoutMs: number;

	transitionTime: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRColorControlClusterMoveToHueAndSaturationParams extends NSObject implements NSCopying {

	static alloc(): MTRColorControlClusterMoveToHueAndSaturationParams; // inherited from NSObject

	static new(): MTRColorControlClusterMoveToHueAndSaturationParams; // inherited from NSObject

	hue: number;

	optionsMask: number;

	optionsOverride: number;

	saturation: number;

	timedInvokeTimeoutMs: number;

	transitionTime: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRColorControlClusterMoveToHueParams extends NSObject implements NSCopying {

	static alloc(): MTRColorControlClusterMoveToHueParams; // inherited from NSObject

	static new(): MTRColorControlClusterMoveToHueParams; // inherited from NSObject

	direction: number;

	hue: number;

	optionsMask: number;

	optionsOverride: number;

	timedInvokeTimeoutMs: number;

	transitionTime: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRColorControlClusterMoveToSaturationParams extends NSObject implements NSCopying {

	static alloc(): MTRColorControlClusterMoveToSaturationParams; // inherited from NSObject

	static new(): MTRColorControlClusterMoveToSaturationParams; // inherited from NSObject

	optionsMask: number;

	optionsOverride: number;

	saturation: number;

	timedInvokeTimeoutMs: number;

	transitionTime: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRColorControlClusterStepColorParams extends NSObject implements NSCopying {

	static alloc(): MTRColorControlClusterStepColorParams; // inherited from NSObject

	static new(): MTRColorControlClusterStepColorParams; // inherited from NSObject

	optionsMask: number;

	optionsOverride: number;

	stepX: number;

	stepY: number;

	timedInvokeTimeoutMs: number;

	transitionTime: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRColorControlClusterStepColorTemperatureParams extends NSObject implements NSCopying {

	static alloc(): MTRColorControlClusterStepColorTemperatureParams; // inherited from NSObject

	static new(): MTRColorControlClusterStepColorTemperatureParams; // inherited from NSObject

	colorTemperatureMaximumMireds: number;

	colorTemperatureMinimumMireds: number;

	optionsMask: number;

	optionsOverride: number;

	stepMode: number;

	stepSize: number;

	timedInvokeTimeoutMs: number;

	transitionTime: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRColorControlClusterStepHueParams extends NSObject implements NSCopying {

	static alloc(): MTRColorControlClusterStepHueParams; // inherited from NSObject

	static new(): MTRColorControlClusterStepHueParams; // inherited from NSObject

	optionsMask: number;

	optionsOverride: number;

	stepMode: number;

	stepSize: number;

	timedInvokeTimeoutMs: number;

	transitionTime: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRColorControlClusterStepSaturationParams extends NSObject implements NSCopying {

	static alloc(): MTRColorControlClusterStepSaturationParams; // inherited from NSObject

	static new(): MTRColorControlClusterStepSaturationParams; // inherited from NSObject

	optionsMask: number;

	optionsOverride: number;

	stepMode: number;

	stepSize: number;

	timedInvokeTimeoutMs: number;

	transitionTime: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRColorControlClusterStopMoveStepParams extends NSObject implements NSCopying {

	static alloc(): MTRColorControlClusterStopMoveStepParams; // inherited from NSObject

	static new(): MTRColorControlClusterStopMoveStepParams; // inherited from NSObject

	optionsMask: number;

	optionsOverride: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare const enum MTRColorControlColorCapabilities {

	HueSaturationSupported = 1,

	EnhancedHueSupported = 2,

	ColorLoopSupported = 4,

	XYAttributesSupported = 8,

	ColorTemperatureSupported = 16
}

declare const enum MTRColorControlColorLoopAction {

	Deactivate = 0,

	ActivateFromColorLoopStartEnhancedHue = 1,

	ActivateFromEnhancedCurrentHue = 2
}

declare const enum MTRColorControlColorLoopDirection {

	DecrementHue = 0,

	IncrementHue = 1
}

declare const enum MTRColorControlColorLoopUpdateFlags {

	UpdateAction = 1,

	UpdateDirection = 2,

	UpdateTime = 4,

	UpdateStartHue = 8
}

declare const enum MTRColorControlColorMode {

	CurrentHueAndCurrentSaturation = 0,

	CurrentXAndCurrentY = 1,

	ColorTemperature = 2
}

declare const enum MTRColorControlFeature {

	HueAndSaturation = 1,

	EnhancedHue = 2,

	ColorLoop = 4,

	XY = 8,

	ColorTemperature = 16
}

declare const enum MTRColorControlHueDirection {

	ShortestDistance = 0,

	LongestDistance = 1,

	Up = 2,

	Down = 3
}

declare const enum MTRColorControlHueMoveMode {

	Stop = 0,

	Up = 1,

	Down = 3
}

declare const enum MTRColorControlHueStepMode {

	Up = 1,

	Down = 3
}

declare const enum MTRColorControlSaturationMoveMode {

	Stop = 0,

	Up = 1,

	Down = 3
}

declare const enum MTRColorControlSaturationStepMode {

	Up = 1,

	Down = 3
}

declare class MTRCommandPath extends NSObject {

	static alloc(): MTRCommandPath; // inherited from NSObject

	static commandPathWithEndpointIdClusterIdCommandId(endpoint: number, clusterId: number, commandId: number): MTRCommandPath;

	static new(): MTRCommandPath; // inherited from NSObject

	readonly cluster: number;

	readonly command: number;

	readonly endpoint: number;
}

declare var MTRCommandPathKey: string;

declare const enum MTRCommissioningFlow {

	Standard = 0,

	UserActionRequired = 1,

	Custom = 2,

	Invalid = 3
}

declare class MTRCommissioningParameters extends NSObject {

	static alloc(): MTRCommissioningParameters; // inherited from NSObject

	static new(): MTRCommissioningParameters; // inherited from NSObject

	CSRNonce: NSData;

	attestationNonce: NSData;

	deviceAttestationDelegate: MTRDeviceAttestationDelegate;

	failSafeExpiryTimeoutSecs: number;

	threadOperationalDataset: NSData;

	wifiCredentials: NSData;

	wifiSSID: NSData;
}

declare class MTRContentLauncherClusterAdditionalInfo extends NSObject implements NSCopying {

	static alloc(): MTRContentLauncherClusterAdditionalInfo; // inherited from NSObject

	static new(): MTRContentLauncherClusterAdditionalInfo; // inherited from NSObject

	name: string;

	value: string;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRContentLauncherClusterBrandingInformation extends NSObject implements NSCopying {

	static alloc(): MTRContentLauncherClusterBrandingInformation; // inherited from NSObject

	static new(): MTRContentLauncherClusterBrandingInformation; // inherited from NSObject

	background: MTRContentLauncherClusterStyleInformation;

	logo: MTRContentLauncherClusterStyleInformation;

	progressBar: MTRContentLauncherClusterStyleInformation;

	providerName: string;

	splash: MTRContentLauncherClusterStyleInformation;

	waterMark: MTRContentLauncherClusterStyleInformation;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRContentLauncherClusterContentSearch extends NSObject implements NSCopying {

	static alloc(): MTRContentLauncherClusterContentSearch; // inherited from NSObject

	static new(): MTRContentLauncherClusterContentSearch; // inherited from NSObject

	parameterList: NSArray<any>;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRContentLauncherClusterDimension extends NSObject implements NSCopying {

	static alloc(): MTRContentLauncherClusterDimension; // inherited from NSObject

	static new(): MTRContentLauncherClusterDimension; // inherited from NSObject

	height: number;

	metric: number;

	width: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRContentLauncherClusterLaunchContentParams extends NSObject implements NSCopying {

	static alloc(): MTRContentLauncherClusterLaunchContentParams; // inherited from NSObject

	static new(): MTRContentLauncherClusterLaunchContentParams; // inherited from NSObject

	autoPlay: number;

	data: string;

	search: MTRContentLauncherClusterContentSearch;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRContentLauncherClusterLaunchResponseParams extends NSObject implements NSCopying {

	static alloc(): MTRContentLauncherClusterLaunchResponseParams; // inherited from NSObject

	static new(): MTRContentLauncherClusterLaunchResponseParams; // inherited from NSObject

	data: string;

	status: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRContentLauncherClusterLaunchURLParams extends NSObject implements NSCopying {

	static alloc(): MTRContentLauncherClusterLaunchURLParams; // inherited from NSObject

	static new(): MTRContentLauncherClusterLaunchURLParams; // inherited from NSObject

	brandingInformation: MTRContentLauncherClusterBrandingInformation;

	contentURL: string;

	displayString: string;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRContentLauncherClusterParameter extends NSObject implements NSCopying {

	static alloc(): MTRContentLauncherClusterParameter; // inherited from NSObject

	static new(): MTRContentLauncherClusterParameter; // inherited from NSObject

	externalIDList: NSArray<any>;

	type: number;

	value: string;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRContentLauncherClusterStyleInformation extends NSObject implements NSCopying {

	static alloc(): MTRContentLauncherClusterStyleInformation; // inherited from NSObject

	static new(): MTRContentLauncherClusterStyleInformation; // inherited from NSObject

	color: string;

	imageUrl: string;

	size: MTRContentLauncherClusterDimension;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare const enum MTRContentLauncherContentLaunchStatus {

	Success = 0,

	UrlNotAvailable = 1,

	AuthFailed = 2
}

declare const enum MTRContentLauncherFeature {

	ContentSearch = 1,

	URLPlayback = 2
}

declare const enum MTRContentLauncherMetricType {

	PIXELS = 0,

	PERCENTAGE = 1
}

declare const enum MTRContentLauncherParameter {

	Actor = 0,

	Channel = 1,

	Character = 2,

	Director = 3,

	Event = 4,

	Franchise = 5,

	Genre = 6,

	League = 7,

	Popularity = 8,

	Provider = 9,

	Sport = 10,

	SportsTeam = 11,

	Type = 12
}

declare const enum MTRContentLauncherSupportedStreamingProtocol {

	DASH = 1,

	HLS = 2
}

declare var MTRContextTagKey: string;

declare class MTRControllerFactory extends NSObject {

	static alloc(): MTRControllerFactory; // inherited from NSObject

	static new(): MTRControllerFactory; // inherited from NSObject

	static sharedInstance(): MTRControllerFactory;

	readonly isRunning: boolean;

	shutdown(): void;

	startControllerOnExistingFabric(startupParams: MTRDeviceControllerStartupParams): MTRDeviceController;

	startControllerOnNewFabric(startupParams: MTRDeviceControllerStartupParams): MTRDeviceController;

	startup(startupParams: MTRControllerFactoryParams): boolean;
}

declare class MTRControllerFactoryParams extends NSObject {

	static alloc(): MTRControllerFactoryParams; // inherited from NSObject

	static new(): MTRControllerFactoryParams; // inherited from NSObject

	cdCerts: NSArray<NSData>;

	otaProviderDelegate: MTROTAProviderDelegate;

	paaCerts: NSArray<NSData>;

	port: number;

	startServer: boolean;

	readonly storageDelegate: MTRPersistentStorageDelegate;

	constructor(o: { storage: MTRPersistentStorageDelegate; });

	initWithStorage(storageDelegate: MTRPersistentStorageDelegate): this;
}

declare var MTRDataKey: string;

declare class MTRDescriptorClusterDeviceType extends NSObject implements NSCopying {

	static alloc(): MTRDescriptorClusterDeviceType; // inherited from NSObject

	static new(): MTRDescriptorClusterDeviceType; // inherited from NSObject

	revision: number;

	type: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRDescriptorClusterDeviceTypeStruct extends NSObject implements NSCopying {

	static alloc(): MTRDescriptorClusterDeviceTypeStruct; // inherited from NSObject

	static new(): MTRDescriptorClusterDeviceTypeStruct; // inherited from NSObject

	revision: number;

	type: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRDevice extends NSObject {

	static alloc(): MTRDevice; // inherited from NSObject

	static deviceWithNodeIDDeviceController(nodeID: number, deviceController: MTRDeviceController): MTRDevice;

	static new(): MTRDevice; // inherited from NSObject

	readonly state: MTRDeviceState;

	invokeCommandWithEndpointIDClusterIDCommandIDCommandFieldsExpectedValuesExpectedValueIntervalTimedInvokeTimeoutClientQueueCompletion(endpointID: number, clusterID: number, commandID: number, commandFields: any, expectedValues: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[], expectedValueInterval: number, timeout: number, clientQueue: NSObject, completion: (p1: NSArray<NSDictionary<string, any>>, p2: NSError) => void): void;

	openCommissioningWindowWithSetupPasscodeDiscriminatorDurationQueueCompletion(setupPasscode: number, discriminator: number, duration: number, queue: NSObject, completion: (p1: MTRSetupPayload, p2: NSError) => void): void;

	readAttributeWithEndpointIDClusterIDAttributeIDParams(endpointID: number, clusterID: number, attributeID: number, params: MTRReadParams): NSDictionary<string, any>;

	setDelegateQueue(delegate: MTRDeviceDelegate, queue: NSObject): void;

	writeAttributeWithEndpointIDClusterIDAttributeIDValueExpectedValueIntervalTimedWriteTimeout(endpointID: number, clusterID: number, attributeID: number, value: any, expectedValueInterval: number, timeout: number): void;
}

interface MTRDeviceAttestationDelegate extends NSObjectProtocol {

	deviceAttestationCompletedForDeviceAttestationDeviceInfoError?(controller: MTRDeviceController, device: interop.Pointer | interop.Reference<any>, attestationDeviceInfo: MTRDeviceAttestationDeviceInfo, error: NSError): void;

	deviceAttestationFailedForDeviceError?(controller: MTRDeviceController, device: interop.Pointer | interop.Reference<any>, error: NSError): void;
}
declare var MTRDeviceAttestationDelegate: {

	prototype: MTRDeviceAttestationDelegate;
};

declare class MTRDeviceAttestationDeviceInfo extends NSObject {

	static alloc(): MTRDeviceAttestationDeviceInfo; // inherited from NSObject

	static new(): MTRDeviceAttestationDeviceInfo; // inherited from NSObject

	readonly certificateDeclaration: NSData;

	readonly dacCertificate: NSData;

	readonly dacPAICertificate: NSData;
}

declare class MTRDeviceController extends NSObject {

	static alloc(): MTRDeviceController; // inherited from NSObject

	static decodeXPCReadParams(params: NSDictionary<string, any>): MTRReadParams;

	static decodeXPCResponseValues(values: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[]): NSArray<NSDictionary<string, any>>;

	static decodeXPCSubscribeParams(params: NSDictionary<string, any>): MTRSubscribeParams;

	static encodeXPCReadParams(params: MTRReadParams): NSDictionary<string, any>;

	static encodeXPCResponseValues(values: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[]): NSArray<NSDictionary<string, any>>;

	static encodeXPCSubscribeParams(params: MTRSubscribeParams): NSDictionary<string, any>;

	static new(): MTRDeviceController; // inherited from NSObject

	static sharedControllerWithIdXpcConnectBlock(controllerId: any, connectBlock: () => NSXPCConnection): MTRDeviceController;

	readonly controllerNodeId: number;

	readonly isRunning: boolean;

	commissionDeviceCommissioningParamsError(deviceId: number, commissioningParams: MTRCommissioningParameters): boolean;

	computePaseVerifierIterationsSalt(setupPincode: number, iterations: number, salt: NSData): NSData;

	continueCommissioningDeviceIgnoreAttestationFailureError(device: interop.Pointer | interop.Reference<any>, ignoreAttestationFailure: boolean): boolean;

	fetchAttestationChallengeForDeviceId(deviceId: number): NSData;

	getBaseDeviceQueueCompletionHandler(deviceID: number, queue: NSObject, completionHandler: (p1: MTRBaseDevice, p2: NSError) => void): boolean;

	getDeviceBeingCommissionedError(deviceId: number): MTRBaseDevice;

	openPairingWindowDurationError(deviceID: number, duration: number): boolean;

	openPairingWindowWithPINDurationDiscriminatorSetupPINError(deviceID: number, duration: number, discriminator: number, setupPIN: number): string;

	pairDeviceAddressPortSetupPINCodeError(deviceID: number, address: string, port: number, setupPINCode: number): boolean;

	pairDeviceDiscriminatorSetupPINCodeError(deviceID: number, discriminator: number, setupPINCode: number): boolean;

	pairDeviceOnboardingPayloadError(deviceID: number, onboardingPayload: string): boolean;

	setNocChainIssuerQueue(nocChainIssuer: MTRNOCChainIssuer, queue: NSObject): void;

	setPairingDelegateQueue(delegate: MTRDevicePairingDelegate, queue: NSObject): void;

	setupCommissioningSessionWithPayloadNewNodeIDError(payload: MTRSetupPayload, newNodeID: number): boolean;

	shutdown(): void;

	stopDevicePairingError(deviceID: number): boolean;
}

interface MTRDeviceControllerClientProtocol extends NSObjectProtocol {

	handleReportWithControllerNodeIdValuesError(controller: any, nodeId: number, values: any, error: NSError): void;
}
declare var MTRDeviceControllerClientProtocol: {

	prototype: MTRDeviceControllerClientProtocol;
};

interface MTRDeviceControllerServerProtocol extends NSObjectProtocol {

	getAnyDeviceControllerWithCompletion(completion: (p1: any, p2: NSError) => void): void;

	getDeviceControllerWithFabricIdCompletion(fabricId: number, completion: (p1: any, p2: NSError) => void): void;

	invokeCommandWithControllerNodeIdEndpointIdClusterIdCommandIdFieldsTimedInvokeTimeoutCompletion(controller: any, nodeId: number, endpointId: number, clusterId: number, commandId: number, fields: any, timeoutMs: number, completion: (p1: any, p2: NSError) => void): void;

	readAttributeCacheWithControllerNodeIdEndpointIdClusterIdAttributeIdCompletion(controller: any, nodeId: number, endpointId: number, clusterId: number, attributeId: number, completion: (p1: any, p2: NSError) => void): void;

	readAttributeWithControllerNodeIdEndpointIdClusterIdAttributeIdParamsCompletion(controller: any, nodeId: number, endpointId: number, clusterId: number, attributeId: number, params: NSDictionary<string, any>, completion: (p1: any, p2: NSError) => void): void;

	stopReportsWithControllerNodeIdCompletion(controller: any, nodeId: number, completion: () => void): void;

	subscribeAttributeWithControllerNodeIdEndpointIdClusterIdAttributeIdMinIntervalMaxIntervalParamsEstablishedHandler(controller: any, nodeId: number, endpointId: number, clusterId: number, attributeId: number, minInterval: number, maxInterval: number, params: NSDictionary<string, any>, establishedHandler: () => void): void;

	subscribeWithControllerNodeIdMinIntervalMaxIntervalParamsShouldCacheCompletion(controller: any, nodeId: number, minInterval: number, maxInterval: number, params: NSDictionary<string, any>, shouldCache: boolean, completion: (p1: NSError) => void): void;

	writeAttributeWithControllerNodeIdEndpointIdClusterIdAttributeIdValueTimedWriteTimeoutCompletion(controller: any, nodeId: number, endpointId: number, clusterId: number, attributeId: number, value: any, timeoutMs: number, completion: (p1: any, p2: NSError) => void): void;
}
declare var MTRDeviceControllerServerProtocol: {

	prototype: MTRDeviceControllerServerProtocol;
};

declare class MTRDeviceControllerStartupParams extends NSObject {

	static alloc(): MTRDeviceControllerStartupParams; // inherited from NSObject

	static new(): MTRDeviceControllerStartupParams; // inherited from NSObject

	readonly fabricId: number;

	intermediateCertificate: NSData;

	readonly ipk: NSData;

	readonly nocSigner: MTRKeypair;

	nodeId: number;

	readonly operationalCertificate: NSData;

	operationalKeypair: MTRKeypair;

	rootCertificate: NSData;

	vendorId: number;

	constructor(o: { operationalKeypair: MTRKeypair; operationalCertificate: NSData; intermediateCertificate: NSData; rootCertificate: NSData; ipk: NSData; });

	constructor(o: { signingKeypair: MTRKeypair; fabricId: number; ipk: NSData; });

	initWithOperationalKeypairOperationalCertificateIntermediateCertificateRootCertificateIpk(operationalKeypair: MTRKeypair, operationalCertificate: NSData, intermediateCertificate: NSData, rootCertificate: NSData, ipk: NSData): this;

	initWithSigningKeypairFabricIdIpk(nocSigner: MTRKeypair, fabricId: number, ipk: NSData): this;
}

interface MTRDeviceDelegate extends NSObjectProtocol {

	deviceReceivedAttributeReport(device: MTRDevice, attributeReport: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[]): void;

	deviceReceivedEventReport(device: MTRDevice, eventReport: NSArray<NSDictionary<string, any>> | NSDictionary<string, any>[]): void;

	deviceStateChanged(device: MTRDevice, state: MTRDeviceState): void;
}
declare var MTRDeviceDelegate: {

	prototype: MTRDeviceDelegate;
};

interface MTRDevicePairingDelegate extends NSObjectProtocol {

	onCommissioningComplete?(error: NSError): void;

	onPairingComplete?(error: NSError): void;

	onPairingDeleted?(error: NSError): void;

	onStatusUpdate?(status: MTRPairingStatus): void;
}
declare var MTRDevicePairingDelegate: {

	prototype: MTRDevicePairingDelegate;
};

declare const enum MTRDeviceState {

	Unknown = 0,

	Reachable = 1,

	Unreachable = 2
}

declare class MTRDiagnosticLogsClusterRetrieveLogsRequestParams extends NSObject implements NSCopying {

	static alloc(): MTRDiagnosticLogsClusterRetrieveLogsRequestParams; // inherited from NSObject

	static new(): MTRDiagnosticLogsClusterRetrieveLogsRequestParams; // inherited from NSObject

	intent: number;

	requestedProtocol: number;

	timedInvokeTimeoutMs: number;

	transferFileDesignator: NSData;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRDiagnosticLogsClusterRetrieveLogsResponseParams extends NSObject implements NSCopying {

	static alloc(): MTRDiagnosticLogsClusterRetrieveLogsResponseParams; // inherited from NSObject

	static new(): MTRDiagnosticLogsClusterRetrieveLogsResponseParams; // inherited from NSObject

	content: NSData;

	status: number;

	timeSinceBoot: number;

	timeStamp: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare const enum MTRDiagnosticLogsLogsIntent {

	EndUserSupport = 0,

	NetworkDiag = 1,

	CrashLogs = 2
}

declare const enum MTRDiagnosticLogsLogsStatus {

	Success = 0,

	Exhausted = 1,

	NoLogs = 2,

	Busy = 3,

	Denied = 4
}

declare const enum MTRDiagnosticLogsLogsTransferProtocol {

	ResponsePayload = 0,

	BDX = 1
}

declare const enum MTRDiscoveryCapabilities {

	None = 0,

	SoftAP = 1,

	BLE = 2,

	OnNetwork = 4,

	AllMask = 7
}

declare class MTRDoorLockClusterClearCredentialParams extends NSObject implements NSCopying {

	static alloc(): MTRDoorLockClusterClearCredentialParams; // inherited from NSObject

	static new(): MTRDoorLockClusterClearCredentialParams; // inherited from NSObject

	credential: MTRDoorLockClusterDlCredential;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRDoorLockClusterClearHolidayScheduleParams extends NSObject implements NSCopying {

	static alloc(): MTRDoorLockClusterClearHolidayScheduleParams; // inherited from NSObject

	static new(): MTRDoorLockClusterClearHolidayScheduleParams; // inherited from NSObject

	holidayIndex: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRDoorLockClusterClearUserParams extends NSObject implements NSCopying {

	static alloc(): MTRDoorLockClusterClearUserParams; // inherited from NSObject

	static new(): MTRDoorLockClusterClearUserParams; // inherited from NSObject

	timedInvokeTimeoutMs: number;

	userIndex: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRDoorLockClusterClearWeekDayScheduleParams extends NSObject implements NSCopying {

	static alloc(): MTRDoorLockClusterClearWeekDayScheduleParams; // inherited from NSObject

	static new(): MTRDoorLockClusterClearWeekDayScheduleParams; // inherited from NSObject

	timedInvokeTimeoutMs: number;

	userIndex: number;

	weekDayIndex: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRDoorLockClusterClearYearDayScheduleParams extends NSObject implements NSCopying {

	static alloc(): MTRDoorLockClusterClearYearDayScheduleParams; // inherited from NSObject

	static new(): MTRDoorLockClusterClearYearDayScheduleParams; // inherited from NSObject

	timedInvokeTimeoutMs: number;

	userIndex: number;

	yearDayIndex: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRDoorLockClusterDlCredential extends NSObject implements NSCopying {

	static alloc(): MTRDoorLockClusterDlCredential; // inherited from NSObject

	static new(): MTRDoorLockClusterDlCredential; // inherited from NSObject

	credentialIndex: number;

	credentialType: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRDoorLockClusterDoorLockAlarmEvent extends NSObject implements NSCopying {

	static alloc(): MTRDoorLockClusterDoorLockAlarmEvent; // inherited from NSObject

	static new(): MTRDoorLockClusterDoorLockAlarmEvent; // inherited from NSObject

	alarmCode: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRDoorLockClusterDoorStateChangeEvent extends NSObject implements NSCopying {

	static alloc(): MTRDoorLockClusterDoorStateChangeEvent; // inherited from NSObject

	static new(): MTRDoorLockClusterDoorStateChangeEvent; // inherited from NSObject

	doorState: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRDoorLockClusterGetCredentialStatusParams extends NSObject implements NSCopying {

	static alloc(): MTRDoorLockClusterGetCredentialStatusParams; // inherited from NSObject

	static new(): MTRDoorLockClusterGetCredentialStatusParams; // inherited from NSObject

	credential: MTRDoorLockClusterDlCredential;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRDoorLockClusterGetCredentialStatusResponseParams extends NSObject implements NSCopying {

	static alloc(): MTRDoorLockClusterGetCredentialStatusResponseParams; // inherited from NSObject

	static new(): MTRDoorLockClusterGetCredentialStatusResponseParams; // inherited from NSObject

	creatorFabricIndex: number;

	credentialExists: number;

	lastModifiedFabricIndex: number;

	nextCredentialIndex: number;

	timedInvokeTimeoutMs: number;

	userIndex: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRDoorLockClusterGetHolidayScheduleParams extends NSObject implements NSCopying {

	static alloc(): MTRDoorLockClusterGetHolidayScheduleParams; // inherited from NSObject

	static new(): MTRDoorLockClusterGetHolidayScheduleParams; // inherited from NSObject

	holidayIndex: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRDoorLockClusterGetHolidayScheduleResponseParams extends NSObject implements NSCopying {

	static alloc(): MTRDoorLockClusterGetHolidayScheduleResponseParams; // inherited from NSObject

	static new(): MTRDoorLockClusterGetHolidayScheduleResponseParams; // inherited from NSObject

	holidayIndex: number;

	localEndTime: number;

	localStartTime: number;

	operatingMode: number;

	status: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRDoorLockClusterGetUserParams extends NSObject implements NSCopying {

	static alloc(): MTRDoorLockClusterGetUserParams; // inherited from NSObject

	static new(): MTRDoorLockClusterGetUserParams; // inherited from NSObject

	timedInvokeTimeoutMs: number;

	userIndex: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRDoorLockClusterGetUserResponseParams extends NSObject implements NSCopying {

	static alloc(): MTRDoorLockClusterGetUserResponseParams; // inherited from NSObject

	static new(): MTRDoorLockClusterGetUserResponseParams; // inherited from NSObject

	creatorFabricIndex: number;

	credentialRule: number;

	credentials: NSArray<any>;

	lastModifiedFabricIndex: number;

	nextUserIndex: number;

	timedInvokeTimeoutMs: number;

	userIndex: number;

	userName: string;

	userStatus: number;

	userType: number;

	userUniqueId: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRDoorLockClusterGetWeekDayScheduleParams extends NSObject implements NSCopying {

	static alloc(): MTRDoorLockClusterGetWeekDayScheduleParams; // inherited from NSObject

	static new(): MTRDoorLockClusterGetWeekDayScheduleParams; // inherited from NSObject

	timedInvokeTimeoutMs: number;

	userIndex: number;

	weekDayIndex: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRDoorLockClusterGetWeekDayScheduleResponseParams extends NSObject implements NSCopying {

	static alloc(): MTRDoorLockClusterGetWeekDayScheduleResponseParams; // inherited from NSObject

	static new(): MTRDoorLockClusterGetWeekDayScheduleResponseParams; // inherited from NSObject

	daysMask: number;

	endHour: number;

	endMinute: number;

	startHour: number;

	startMinute: number;

	status: number;

	timedInvokeTimeoutMs: number;

	userIndex: number;

	weekDayIndex: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRDoorLockClusterGetYearDayScheduleParams extends NSObject implements NSCopying {

	static alloc(): MTRDoorLockClusterGetYearDayScheduleParams; // inherited from NSObject

	static new(): MTRDoorLockClusterGetYearDayScheduleParams; // inherited from NSObject

	timedInvokeTimeoutMs: number;

	userIndex: number;

	yearDayIndex: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRDoorLockClusterGetYearDayScheduleResponseParams extends NSObject implements NSCopying {

	static alloc(): MTRDoorLockClusterGetYearDayScheduleResponseParams; // inherited from NSObject

	static new(): MTRDoorLockClusterGetYearDayScheduleResponseParams; // inherited from NSObject

	localEndTime: number;

	localStartTime: number;

	status: number;

	timedInvokeTimeoutMs: number;

	userIndex: number;

	yearDayIndex: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRDoorLockClusterLockDoorParams extends NSObject implements NSCopying {

	static alloc(): MTRDoorLockClusterLockDoorParams; // inherited from NSObject

	static new(): MTRDoorLockClusterLockDoorParams; // inherited from NSObject

	pinCode: NSData;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRDoorLockClusterLockOperationErrorEvent extends NSObject implements NSCopying {

	static alloc(): MTRDoorLockClusterLockOperationErrorEvent; // inherited from NSObject

	static new(): MTRDoorLockClusterLockOperationErrorEvent; // inherited from NSObject

	credentials: NSArray<any>;

	fabricIndex: number;

	lockOperationType: number;

	operationError: number;

	operationSource: number;

	sourceNode: number;

	userIndex: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRDoorLockClusterLockOperationEvent extends NSObject implements NSCopying {

	static alloc(): MTRDoorLockClusterLockOperationEvent; // inherited from NSObject

	static new(): MTRDoorLockClusterLockOperationEvent; // inherited from NSObject

	credentials: NSArray<any>;

	fabricIndex: number;

	lockOperationType: number;

	operationSource: number;

	sourceNode: number;

	userIndex: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRDoorLockClusterLockUserChangeEvent extends NSObject implements NSCopying {

	static alloc(): MTRDoorLockClusterLockUserChangeEvent; // inherited from NSObject

	static new(): MTRDoorLockClusterLockUserChangeEvent; // inherited from NSObject

	dataIndex: number;

	dataOperationType: number;

	fabricIndex: number;

	lockDataType: number;

	operationSource: number;

	sourceNode: number;

	userIndex: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRDoorLockClusterSetCredentialParams extends NSObject implements NSCopying {

	static alloc(): MTRDoorLockClusterSetCredentialParams; // inherited from NSObject

	static new(): MTRDoorLockClusterSetCredentialParams; // inherited from NSObject

	credential: MTRDoorLockClusterDlCredential;

	credentialData: NSData;

	operationType: number;

	timedInvokeTimeoutMs: number;

	userIndex: number;

	userStatus: number;

	userType: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRDoorLockClusterSetCredentialResponseParams extends NSObject implements NSCopying {

	static alloc(): MTRDoorLockClusterSetCredentialResponseParams; // inherited from NSObject

	static new(): MTRDoorLockClusterSetCredentialResponseParams; // inherited from NSObject

	nextCredentialIndex: number;

	status: number;

	timedInvokeTimeoutMs: number;

	userIndex: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRDoorLockClusterSetHolidayScheduleParams extends NSObject implements NSCopying {

	static alloc(): MTRDoorLockClusterSetHolidayScheduleParams; // inherited from NSObject

	static new(): MTRDoorLockClusterSetHolidayScheduleParams; // inherited from NSObject

	holidayIndex: number;

	localEndTime: number;

	localStartTime: number;

	operatingMode: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRDoorLockClusterSetUserParams extends NSObject implements NSCopying {

	static alloc(): MTRDoorLockClusterSetUserParams; // inherited from NSObject

	static new(): MTRDoorLockClusterSetUserParams; // inherited from NSObject

	credentialRule: number;

	operationType: number;

	timedInvokeTimeoutMs: number;

	userIndex: number;

	userName: string;

	userStatus: number;

	userType: number;

	userUniqueId: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRDoorLockClusterSetWeekDayScheduleParams extends NSObject implements NSCopying {

	static alloc(): MTRDoorLockClusterSetWeekDayScheduleParams; // inherited from NSObject

	static new(): MTRDoorLockClusterSetWeekDayScheduleParams; // inherited from NSObject

	daysMask: number;

	endHour: number;

	endMinute: number;

	startHour: number;

	startMinute: number;

	timedInvokeTimeoutMs: number;

	userIndex: number;

	weekDayIndex: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRDoorLockClusterSetYearDayScheduleParams extends NSObject implements NSCopying {

	static alloc(): MTRDoorLockClusterSetYearDayScheduleParams; // inherited from NSObject

	static new(): MTRDoorLockClusterSetYearDayScheduleParams; // inherited from NSObject

	localEndTime: number;

	localStartTime: number;

	timedInvokeTimeoutMs: number;

	userIndex: number;

	yearDayIndex: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRDoorLockClusterUnlockDoorParams extends NSObject implements NSCopying {

	static alloc(): MTRDoorLockClusterUnlockDoorParams; // inherited from NSObject

	static new(): MTRDoorLockClusterUnlockDoorParams; // inherited from NSObject

	pinCode: NSData;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRDoorLockClusterUnlockWithTimeoutParams extends NSObject implements NSCopying {

	static alloc(): MTRDoorLockClusterUnlockWithTimeoutParams; // inherited from NSObject

	static new(): MTRDoorLockClusterUnlockWithTimeoutParams; // inherited from NSObject

	pinCode: NSData;

	timedInvokeTimeoutMs: number;

	timeout: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare const enum MTRDoorLockDayOfWeek {

	Sunday = 1,

	Monday = 2,

	Tuesday = 4,

	Wednesday = 8,

	Thursday = 16,

	Friday = 32,

	Saturday = 64
}

declare const enum MTRDoorLockDlAlarmCode {

	LockJammed = 0,

	LockFactoryReset = 1,

	LockRadioPowerCycled = 3,

	WrongCodeEntryLimit = 4,

	FrontEsceutcheonRemoved = 5,

	DoorForcedOpen = 6,

	DoorAjar = 7,

	ForcedUser = 8
}

declare const enum MTRDoorLockDlCredentialRule {

	Single = 0,

	Double = 1,

	Tri = 2
}

declare const enum MTRDoorLockDlCredentialRuleMask {

	Single = 1,

	Dual = 2,

	Tri = 4
}

declare const enum MTRDoorLockDlCredentialRulesSupport {

	Single = 1,

	Dual = 2,

	Tri = 4
}

declare const enum MTRDoorLockDlCredentialType {

	ProgrammingPIN = 0,

	PIN = 1,

	RFID = 2,

	Fingerprint = 3,

	FingerVein = 4,

	Face = 5
}

declare const enum MTRDoorLockDlDataOperationType {

	Add = 0,

	Clear = 1,

	Modify = 2
}

declare const enum MTRDoorLockDlDaysMaskMap {

	Sunday = 1,

	Monday = 2,

	Tuesday = 4,

	Wednesday = 8,

	Thursday = 16,

	Friday = 32,

	Saturday = 64
}

declare const enum MTRDoorLockDlDefaultConfigurationRegister {

	EnableLocalProgrammingEnabled = 1,

	KeypadInterfaceDefaultAccessEnabled = 2,

	RemoteInterfaceDefaultAccessIsEnabled = 4,

	SoundEnabled = 32,

	AutoRelockTimeSet = 64,

	LEDSettingsSet = 128
}

declare const enum MTRDoorLockDlDoorState {

	DoorOpen = 0,

	DoorClosed = 1,

	DoorJammed = 2,

	DoorForcedOpen = 3,

	DoorUnspecifiedError = 4,

	DoorAjar = 5
}

declare const enum MTRDoorLockDlKeypadOperationEventMask {

	Unknown = 1,

	Lock = 2,

	Unlock = 4,

	LockInvalidPIN = 8,

	LockInvalidSchedule = 16,

	UnlockInvalidCode = 32,

	UnlockInvalidSchedule = 64,

	NonAccessUserOpEvent = 128
}

declare const enum MTRDoorLockDlKeypadProgrammingEventMask {

	Unknown = 1,

	ProgrammingPINChanged = 2,

	PINAdded = 4,

	PINCleared = 8,

	PINChanged = 16
}

declare const enum MTRDoorLockDlLocalProgrammingFeatures {

	AddUsersCredentialsSchedulesLocally = 1,

	ModifyUsersCredentialsSchedulesLocally = 2,

	ClearUsersCredentialsSchedulesLocally = 4,

	AdjustLockSettingsLocally = 8
}

declare const enum MTRDoorLockDlLockDataType {

	Unspecified = 0,

	ProgrammingCode = 1,

	UserIndex = 2,

	WeekDaySchedule = 3,

	YearDaySchedule = 4,

	HolidaySchedule = 5,

	PIN = 6,

	RFID = 7,

	Fingerprint = 8
}

declare const enum MTRDoorLockDlLockOperationType {

	Lock = 0,

	Unlock = 1,

	NonAccessUserEvent = 2,

	ForcedUserEvent = 3
}

declare const enum MTRDoorLockDlLockState {

	NotFullyLocked = 0,

	Locked = 1,

	Unlocked = 2
}

declare const enum MTRDoorLockDlLockType {

	DeadBolt = 0,

	Magnetic = 1,

	Other = 2,

	Mortise = 3,

	Rim = 4,

	LatchBolt = 5,

	CylindricalLock = 6,

	TubularLock = 7,

	InterconnectedLock = 8,

	DeadLatch = 9,

	DoorFurniture = 10
}

declare const enum MTRDoorLockDlManualOperationEventMask {

	Unknown = 1,

	ThumbturnLock = 2,

	ThumbturnUnlock = 4,

	OneTouchLock = 8,

	KeyLock = 16,

	KeyUnlock = 32,

	AutoLock = 64,

	ScheduleLock = 128,

	ScheduleUnlock = 256,

	ManualLock = 512,

	ManualUnlock = 1024
}

declare const enum MTRDoorLockDlOperatingMode {

	Normal = 0,

	Vacation = 1,

	Privacy = 2,

	NoRemoteLockUnlock = 3,

	Passage = 4
}

declare const enum MTRDoorLockDlOperationError {

	Unspecified = 0,

	InvalidCredential = 1,

	DisabledUserDenied = 2,

	Restricted = 3,

	InsufficientBattery = 4
}

declare const enum MTRDoorLockDlOperationSource {

	Unspecified = 0,

	Manual = 1,

	ProprietaryRemote = 2,

	Keypad = 3,

	Auto = 4,

	Button = 5,

	Schedule = 6,

	Remote = 7,

	RFID = 8,

	Biometric = 9
}

declare const enum MTRDoorLockDlRFIDOperationEventMask {

	Unknown = 1,

	Lock = 2,

	Unlock = 4,

	LockInvalidRFID = 8,

	LockInvalidSchedule = 16,

	UnlockInvalidRFID = 32,

	UnlockInvalidSchedule = 64
}

declare const enum MTRDoorLockDlRFIDProgrammingEventMask {

	Unknown = 1,

	RFIDCodeAdded = 32,

	RFIDCodeCleared = 64
}

declare const enum MTRDoorLockDlRemoteOperationEventMask {

	Unknown = 1,

	Lock = 2,

	Unlock = 4,

	LockInvalidCode = 8,

	LockInvalidSchedule = 16,

	UnlockInvalidCode = 32,

	UnlockInvalidSchedule = 64
}

declare const enum MTRDoorLockDlRemoteProgrammingEventMask {

	Unknown = 1,

	ProgrammingPINChanged = 2,

	PINAdded = 4,

	PINCleared = 8,

	PINChanged = 16,

	RFIDCodeAdded = 32,

	RFIDCodeCleared = 64
}

declare const enum MTRDoorLockDlStatus {

	Success = 0,

	Failure = 1,

	Duplicate = 2,

	Occupied = 3,

	InvalidField = 133,

	ResourceExhausted = 137,

	NotFound = 139
}

declare const enum MTRDoorLockDlSupportedOperatingModes {

	Normal = 1,

	Vacation = 2,

	Privacy = 4,

	NoRemoteLockUnlock = 8,

	Passage = 16
}

declare const enum MTRDoorLockDlUserStatus {

	Available = 0,

	OccupiedEnabled = 1,

	OccupiedDisabled = 3
}

declare const enum MTRDoorLockDlUserType {

	UnrestrictedUser = 0,

	YearDayScheduleUser = 1,

	WeekDayScheduleUser = 2,

	ProgrammingUser = 3,

	NonAccessUser = 4,

	ForcedUser = 5,

	DisposableUser = 6,

	ExpiringUser = 7,

	ScheduleRestrictedUser = 8,

	RemoteOnlyUser = 9
}

declare const enum MTRDoorLockFeature {

	PINCredentials = 1,

	RFIDCredentials = 2,

	FingerCredentials = 4,

	Logging = 8,

	WeekDaySchedules = 16,

	DoorPositionSensor = 32,

	FaceCredentials = 64,

	CredentialsOTA = 128,

	UsersManagement = 256,

	Notifications = 512,

	YearDaySchedules = 1024,

	HolidaySchedules = 2048
}

declare const enum MTRDoorLockOperationEventCode {

	UnknownOrMfgSpecific = 0,

	Lock = 1,

	Unlock = 2,

	LockInvalidPinOrId = 3,

	LockInvalidSchedule = 4,

	UnlockInvalidPinOrId = 5,

	UnlockInvalidSchedule = 6,

	OneTouchLock = 7,

	KeyLock = 8,

	KeyUnlock = 9,

	AutoLock = 10,

	ScheduleLock = 11,

	ScheduleUnlock = 12,

	ManualLock = 13,

	ManualUnlock = 14
}

declare const enum MTRDoorLockProgrammingEventCode {

	UnknownOrMfgSpecific = 0,

	MasterCodeChanged = 1,

	PinAdded = 2,

	PinDeleted = 3,

	PinChanged = 4,

	IdAdded = 5,

	IdDeleted = 6
}

declare const enum MTRDoorLockSetPinOrIdStatus {

	Success = 0,

	GeneralFailure = 1,

	MemoryFull = 2,

	DuplicateCodeError = 3
}

declare const enum MTRDoorLockUserStatus {

	Available = 0,

	OccupiedEnabled = 1,

	OccupiedDisabled = 3,

	NotSupported = 255
}

declare const enum MTRDoorLockUserType {

	Unrestricted = 0,

	YearDayScheduleUser = 1,

	WeekDayScheduleUser = 2,

	MasterUser = 3,

	NonAccessUser = 4,

	NotSupported = 255
}

declare var MTRDoubleValueType: string;

declare class MTRElectricalMeasurementClusterGetMeasurementProfileCommandParams extends NSObject implements NSCopying {

	static alloc(): MTRElectricalMeasurementClusterGetMeasurementProfileCommandParams; // inherited from NSObject

	static new(): MTRElectricalMeasurementClusterGetMeasurementProfileCommandParams; // inherited from NSObject

	attributeId: number;

	numberOfIntervals: number;

	startTime: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRElectricalMeasurementClusterGetMeasurementProfileResponseCommandParams extends NSObject implements NSCopying {

	static alloc(): MTRElectricalMeasurementClusterGetMeasurementProfileResponseCommandParams; // inherited from NSObject

	static new(): MTRElectricalMeasurementClusterGetMeasurementProfileResponseCommandParams; // inherited from NSObject

	attributeId: number;

	intervals: NSArray<any>;

	numberOfIntervalsDelivered: number;

	profileIntervalPeriod: number;

	startTime: number;

	status: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRElectricalMeasurementClusterGetProfileInfoCommandParams extends NSObject implements NSCopying {

	static alloc(): MTRElectricalMeasurementClusterGetProfileInfoCommandParams; // inherited from NSObject

	static new(): MTRElectricalMeasurementClusterGetProfileInfoCommandParams; // inherited from NSObject

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRElectricalMeasurementClusterGetProfileInfoResponseCommandParams extends NSObject implements NSCopying {

	static alloc(): MTRElectricalMeasurementClusterGetProfileInfoResponseCommandParams; // inherited from NSObject

	static new(): MTRElectricalMeasurementClusterGetProfileInfoResponseCommandParams; // inherited from NSObject

	listOfAttributes: NSArray<any>;

	maxNumberOfIntervals: number;

	profileCount: number;

	profileIntervalPeriod: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare const enum MTRErrorCode {

	GeneralError = 1,

	InvalidStringLength = 2,

	InvalidIntegerValue = 3,

	InvalidArgument = 4,

	InvalidMessageLength = 5,

	InvalidState = 6,

	WrongAddressType = 7,

	IntegrityCheckFailed = 8,

	Timeout = 9,

	BufferTooSmall = 10,

	FabricExists = 11
}

declare var MTRErrorDomain: string;

declare var MTRErrorKey: string;

declare class MTREthernetNetworkDiagnosticsClusterResetCountsParams extends NSObject implements NSCopying {

	static alloc(): MTREthernetNetworkDiagnosticsClusterResetCountsParams; // inherited from NSObject

	static new(): MTREthernetNetworkDiagnosticsClusterResetCountsParams; // inherited from NSObject

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare const enum MTREthernetNetworkDiagnosticsPHYRateType {

	Type10M = 0,

	Type100M = 1,

	Type1000M = 2,

	Type25G = 3,

	Type5G = 4,

	Type10G = 5,

	Type40G = 6,

	Type100G = 7,

	Type200G = 8,

	Type400G = 9
}

declare class MTREventPath extends NSObject {

	static alloc(): MTREventPath; // inherited from NSObject

	static eventPathWithEndpointIdClusterIdEventId(endpoint: number, clusterId: number, eventId: number): MTREventPath;

	static new(): MTREventPath; // inherited from NSObject

	readonly cluster: number;

	readonly endpoint: number;

	readonly event: number;
}

declare var MTREventPathKey: string;

declare class MTREventReport extends NSObject {

	static alloc(): MTREventReport; // inherited from NSObject

	static new(): MTREventReport; // inherited from NSObject

	readonly error: NSError;

	readonly eventNumber: number;

	readonly path: MTREventPath;

	readonly priority: number;

	readonly timestamp: number;

	readonly value: any;
}

declare const enum MTRFanControlFanModeSequenceType {

	OffLowMedHigh = 0,

	OffLowHigh = 1,

	OffLowMedHighAuto = 2,

	OffLowHighAuto = 3,

	OffOnAuto = 4,

	OffOn = 5
}

declare const enum MTRFanControlFanModeType {

	Off = 0,

	Low = 1,

	Medium = 2,

	High = 3,

	On = 4,

	Auto = 5,

	Smart = 6
}

declare const enum MTRFanControlFeature {

	MultiSpeed = 1,

	Auto = 2,

	Rocking = 4,

	Wind = 8
}

declare const enum MTRFanControlRockSupportMask {

	RockLeftRight = 1,

	RockUpDown = 2,

	RockRound = 4
}

declare const enum MTRFanControlWindSettingMask {

	SleepWind = 1,

	NaturalWind = 2
}

declare const enum MTRFanControlWindSupportMask {

	SleepWind = 1,

	NaturalWind = 2
}

declare class MTRFaultInjectionClusterFailAtFaultParams extends NSObject implements NSCopying {

	static alloc(): MTRFaultInjectionClusterFailAtFaultParams; // inherited from NSObject

	static new(): MTRFaultInjectionClusterFailAtFaultParams; // inherited from NSObject

	id: number;

	numCallsToFail: number;

	numCallsToSkip: number;

	takeMutex: number;

	timedInvokeTimeoutMs: number;

	type: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRFaultInjectionClusterFailRandomlyAtFaultParams extends NSObject implements NSCopying {

	static alloc(): MTRFaultInjectionClusterFailRandomlyAtFaultParams; // inherited from NSObject

	static new(): MTRFaultInjectionClusterFailRandomlyAtFaultParams; // inherited from NSObject

	id: number;

	percentage: number;

	timedInvokeTimeoutMs: number;

	type: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare const enum MTRFaultInjectionFaultType {

	Unspecified = 0,

	SystemFault = 1,

	InetFault = 2,

	ChipFault = 3,

	CertFault = 4
}

declare class MTRFixedLabelClusterLabelStruct extends NSObject implements NSCopying {

	static alloc(): MTRFixedLabelClusterLabelStruct; // inherited from NSObject

	static new(): MTRFixedLabelClusterLabelStruct; // inherited from NSObject

	label: string;

	value: string;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare var MTRFloatValueType: string;

declare class MTRGeneralCommissioningClusterArmFailSafeParams extends NSObject implements NSCopying {

	static alloc(): MTRGeneralCommissioningClusterArmFailSafeParams; // inherited from NSObject

	static new(): MTRGeneralCommissioningClusterArmFailSafeParams; // inherited from NSObject

	breadcrumb: number;

	expiryLengthSeconds: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRGeneralCommissioningClusterArmFailSafeResponseParams extends NSObject implements NSCopying {

	static alloc(): MTRGeneralCommissioningClusterArmFailSafeResponseParams; // inherited from NSObject

	static new(): MTRGeneralCommissioningClusterArmFailSafeResponseParams; // inherited from NSObject

	debugText: string;

	errorCode: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRGeneralCommissioningClusterBasicCommissioningInfo extends NSObject implements NSCopying {

	static alloc(): MTRGeneralCommissioningClusterBasicCommissioningInfo; // inherited from NSObject

	static new(): MTRGeneralCommissioningClusterBasicCommissioningInfo; // inherited from NSObject

	failSafeExpiryLengthSeconds: number;

	maxCumulativeFailsafeSeconds: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRGeneralCommissioningClusterCommissioningCompleteParams extends NSObject implements NSCopying {

	static alloc(): MTRGeneralCommissioningClusterCommissioningCompleteParams; // inherited from NSObject

	static new(): MTRGeneralCommissioningClusterCommissioningCompleteParams; // inherited from NSObject

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRGeneralCommissioningClusterCommissioningCompleteResponseParams extends NSObject implements NSCopying {

	static alloc(): MTRGeneralCommissioningClusterCommissioningCompleteResponseParams; // inherited from NSObject

	static new(): MTRGeneralCommissioningClusterCommissioningCompleteResponseParams; // inherited from NSObject

	debugText: string;

	errorCode: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRGeneralCommissioningClusterSetRegulatoryConfigParams extends NSObject implements NSCopying {

	static alloc(): MTRGeneralCommissioningClusterSetRegulatoryConfigParams; // inherited from NSObject

	static new(): MTRGeneralCommissioningClusterSetRegulatoryConfigParams; // inherited from NSObject

	breadcrumb: number;

	countryCode: string;

	newRegulatoryConfig: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRGeneralCommissioningClusterSetRegulatoryConfigResponseParams extends NSObject implements NSCopying {

	static alloc(): MTRGeneralCommissioningClusterSetRegulatoryConfigResponseParams; // inherited from NSObject

	static new(): MTRGeneralCommissioningClusterSetRegulatoryConfigResponseParams; // inherited from NSObject

	debugText: string;

	errorCode: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare const enum MTRGeneralCommissioningCommissioningError {

	Ok = 0,

	ValueOutsideRange = 1,

	InvalidAuthentication = 2,

	NoFailSafe = 3,

	BusyWithOtherAdmin = 4
}

declare const enum MTRGeneralCommissioningRegulatoryLocationType {

	Indoor = 0,

	Outdoor = 1,

	IndoorOutdoor = 2
}

declare const enum MTRGeneralDiagnosticsBootReasonType {

	Unspecified = 0,

	PowerOnReboot = 1,

	BrownOutReset = 2,

	SoftwareWatchdogReset = 3,

	HardwareWatchdogReset = 4,

	SoftwareUpdateCompleted = 5,

	SoftwareReset = 6
}

declare class MTRGeneralDiagnosticsClusterBootReasonEvent extends NSObject implements NSCopying {

	static alloc(): MTRGeneralDiagnosticsClusterBootReasonEvent; // inherited from NSObject

	static new(): MTRGeneralDiagnosticsClusterBootReasonEvent; // inherited from NSObject

	bootReason: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRGeneralDiagnosticsClusterHardwareFaultChangeEvent extends NSObject implements NSCopying {

	static alloc(): MTRGeneralDiagnosticsClusterHardwareFaultChangeEvent; // inherited from NSObject

	static new(): MTRGeneralDiagnosticsClusterHardwareFaultChangeEvent; // inherited from NSObject

	current: NSArray<any>;

	previous: NSArray<any>;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRGeneralDiagnosticsClusterNetworkFaultChangeEvent extends NSObject implements NSCopying {

	static alloc(): MTRGeneralDiagnosticsClusterNetworkFaultChangeEvent; // inherited from NSObject

	static new(): MTRGeneralDiagnosticsClusterNetworkFaultChangeEvent; // inherited from NSObject

	current: NSArray<any>;

	previous: NSArray<any>;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRGeneralDiagnosticsClusterNetworkInterfaceType extends NSObject implements NSCopying {

	static alloc(): MTRGeneralDiagnosticsClusterNetworkInterfaceType; // inherited from NSObject

	static new(): MTRGeneralDiagnosticsClusterNetworkInterfaceType; // inherited from NSObject

	hardwareAddress: NSData;

	iPv4Addresses: NSArray<any>;

	iPv6Addresses: NSArray<any>;

	isOperational: number;

	name: string;

	offPremiseServicesReachableIPv4: number;

	offPremiseServicesReachableIPv6: number;

	type: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRGeneralDiagnosticsClusterRadioFaultChangeEvent extends NSObject implements NSCopying {

	static alloc(): MTRGeneralDiagnosticsClusterRadioFaultChangeEvent; // inherited from NSObject

	static new(): MTRGeneralDiagnosticsClusterRadioFaultChangeEvent; // inherited from NSObject

	current: NSArray<any>;

	previous: NSArray<any>;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRGeneralDiagnosticsClusterTestEventTriggerParams extends NSObject implements NSCopying {

	static alloc(): MTRGeneralDiagnosticsClusterTestEventTriggerParams; // inherited from NSObject

	static new(): MTRGeneralDiagnosticsClusterTestEventTriggerParams; // inherited from NSObject

	enableKey: NSData;

	eventTrigger: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare const enum MTRGeneralDiagnosticsHardwareFaultType {

	Unspecified = 0,

	Radio = 1,

	Sensor = 2,

	ResettableOverTemp = 3,

	NonResettableOverTemp = 4,

	PowerSource = 5,

	VisualDisplayFault = 6,

	AudioOutputFault = 7,

	UserInterfaceFault = 8,

	NonVolatileMemoryError = 9,

	TamperDetected = 10
}

declare const enum MTRGeneralDiagnosticsInterfaceType {

	Unspecified = 0,

	WiFi = 1,

	Ethernet = 2,

	Cellular = 3,

	Thread = 4
}

declare const enum MTRGeneralDiagnosticsNetworkFaultType {

	Unspecified = 0,

	HardwareFailure = 1,

	NetworkJammed = 2,

	ConnectionFailed = 3
}

declare const enum MTRGeneralDiagnosticsRadioFaultType {

	Unspecified = 0,

	WiFiFault = 1,

	CellularFault = 2,

	ThreadFault = 3,

	NFCFault = 4,

	BLEFault = 5,

	EthernetFault = 6
}

declare class MTRGroupKeyManagementClusterGroupInfoMapStruct extends NSObject implements NSCopying {

	static alloc(): MTRGroupKeyManagementClusterGroupInfoMapStruct; // inherited from NSObject

	static new(): MTRGroupKeyManagementClusterGroupInfoMapStruct; // inherited from NSObject

	endpoints: NSArray<any>;

	fabricIndex: number;

	groupId: number;

	groupName: string;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRGroupKeyManagementClusterGroupKeyMapStruct extends NSObject implements NSCopying {

	static alloc(): MTRGroupKeyManagementClusterGroupKeyMapStruct; // inherited from NSObject

	static new(): MTRGroupKeyManagementClusterGroupKeyMapStruct; // inherited from NSObject

	fabricIndex: number;

	groupId: number;

	groupKeySetID: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRGroupKeyManagementClusterGroupKeySetStruct extends NSObject implements NSCopying {

	static alloc(): MTRGroupKeyManagementClusterGroupKeySetStruct; // inherited from NSObject

	static new(): MTRGroupKeyManagementClusterGroupKeySetStruct; // inherited from NSObject

	epochKey0: NSData;

	epochKey1: NSData;

	epochKey2: NSData;

	epochStartTime0: number;

	epochStartTime1: number;

	epochStartTime2: number;

	groupKeySecurityPolicy: number;

	groupKeySetID: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRGroupKeyManagementClusterKeySetReadAllIndicesParams extends NSObject implements NSCopying {

	static alloc(): MTRGroupKeyManagementClusterKeySetReadAllIndicesParams; // inherited from NSObject

	static new(): MTRGroupKeyManagementClusterKeySetReadAllIndicesParams; // inherited from NSObject

	groupKeySetIDs: NSArray<any>;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRGroupKeyManagementClusterKeySetReadAllIndicesResponseParams extends NSObject implements NSCopying {

	static alloc(): MTRGroupKeyManagementClusterKeySetReadAllIndicesResponseParams; // inherited from NSObject

	static new(): MTRGroupKeyManagementClusterKeySetReadAllIndicesResponseParams; // inherited from NSObject

	groupKeySetIDs: NSArray<any>;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRGroupKeyManagementClusterKeySetReadParams extends NSObject implements NSCopying {

	static alloc(): MTRGroupKeyManagementClusterKeySetReadParams; // inherited from NSObject

	static new(): MTRGroupKeyManagementClusterKeySetReadParams; // inherited from NSObject

	groupKeySetID: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRGroupKeyManagementClusterKeySetReadResponseParams extends NSObject implements NSCopying {

	static alloc(): MTRGroupKeyManagementClusterKeySetReadResponseParams; // inherited from NSObject

	static new(): MTRGroupKeyManagementClusterKeySetReadResponseParams; // inherited from NSObject

	groupKeySet: MTRGroupKeyManagementClusterGroupKeySetStruct;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRGroupKeyManagementClusterKeySetRemoveParams extends NSObject implements NSCopying {

	static alloc(): MTRGroupKeyManagementClusterKeySetRemoveParams; // inherited from NSObject

	static new(): MTRGroupKeyManagementClusterKeySetRemoveParams; // inherited from NSObject

	groupKeySetID: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRGroupKeyManagementClusterKeySetWriteParams extends NSObject implements NSCopying {

	static alloc(): MTRGroupKeyManagementClusterKeySetWriteParams; // inherited from NSObject

	static new(): MTRGroupKeyManagementClusterKeySetWriteParams; // inherited from NSObject

	groupKeySet: MTRGroupKeyManagementClusterGroupKeySetStruct;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare const enum MTRGroupKeyManagementGroupKeySecurityPolicy {

	TrustFirst = 0,

	CacheAndSync = 1
}

declare class MTRGroupsClusterAddGroupIfIdentifyingParams extends NSObject implements NSCopying {

	static alloc(): MTRGroupsClusterAddGroupIfIdentifyingParams; // inherited from NSObject

	static new(): MTRGroupsClusterAddGroupIfIdentifyingParams; // inherited from NSObject

	groupId: number;

	groupName: string;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRGroupsClusterAddGroupParams extends NSObject implements NSCopying {

	static alloc(): MTRGroupsClusterAddGroupParams; // inherited from NSObject

	static new(): MTRGroupsClusterAddGroupParams; // inherited from NSObject

	groupId: number;

	groupName: string;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRGroupsClusterAddGroupResponseParams extends NSObject implements NSCopying {

	static alloc(): MTRGroupsClusterAddGroupResponseParams; // inherited from NSObject

	static new(): MTRGroupsClusterAddGroupResponseParams; // inherited from NSObject

	groupId: number;

	status: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRGroupsClusterGetGroupMembershipParams extends NSObject implements NSCopying {

	static alloc(): MTRGroupsClusterGetGroupMembershipParams; // inherited from NSObject

	static new(): MTRGroupsClusterGetGroupMembershipParams; // inherited from NSObject

	groupList: NSArray<any>;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRGroupsClusterGetGroupMembershipResponseParams extends NSObject implements NSCopying {

	static alloc(): MTRGroupsClusterGetGroupMembershipResponseParams; // inherited from NSObject

	static new(): MTRGroupsClusterGetGroupMembershipResponseParams; // inherited from NSObject

	capacity: number;

	groupList: NSArray<any>;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRGroupsClusterRemoveAllGroupsParams extends NSObject implements NSCopying {

	static alloc(): MTRGroupsClusterRemoveAllGroupsParams; // inherited from NSObject

	static new(): MTRGroupsClusterRemoveAllGroupsParams; // inherited from NSObject

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRGroupsClusterRemoveGroupParams extends NSObject implements NSCopying {

	static alloc(): MTRGroupsClusterRemoveGroupParams; // inherited from NSObject

	static new(): MTRGroupsClusterRemoveGroupParams; // inherited from NSObject

	groupId: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRGroupsClusterRemoveGroupResponseParams extends NSObject implements NSCopying {

	static alloc(): MTRGroupsClusterRemoveGroupResponseParams; // inherited from NSObject

	static new(): MTRGroupsClusterRemoveGroupResponseParams; // inherited from NSObject

	groupId: number;

	status: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRGroupsClusterViewGroupParams extends NSObject implements NSCopying {

	static alloc(): MTRGroupsClusterViewGroupParams; // inherited from NSObject

	static new(): MTRGroupsClusterViewGroupParams; // inherited from NSObject

	groupId: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRGroupsClusterViewGroupResponseParams extends NSObject implements NSCopying {

	static alloc(): MTRGroupsClusterViewGroupResponseParams; // inherited from NSObject

	static new(): MTRGroupsClusterViewGroupResponseParams; // inherited from NSObject

	groupId: number;

	groupName: string;

	status: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare const enum MTRGroupsGroupClusterFeature {

	GroupNames = 1
}

declare class MTRIdentifyClusterIdentifyParams extends NSObject implements NSCopying {

	static alloc(): MTRIdentifyClusterIdentifyParams; // inherited from NSObject

	static new(): MTRIdentifyClusterIdentifyParams; // inherited from NSObject

	identifyTime: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRIdentifyClusterTriggerEffectParams extends NSObject implements NSCopying {

	static alloc(): MTRIdentifyClusterTriggerEffectParams; // inherited from NSObject

	static new(): MTRIdentifyClusterTriggerEffectParams; // inherited from NSObject

	effectIdentifier: number;

	effectVariant: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare const enum MTRIdentifyEffectIdentifier {

	Blink = 0,

	Breathe = 1,

	Okay = 2,

	ChannelChange = 11,

	FinishEffect = 254,

	StopEffect = 255
}

declare const enum MTRIdentifyEffectVariant {

	Default = 0
}

declare const enum MTRIdentifyType {

	None = 0,

	VisibleLight = 1,

	VisibleLED = 2,

	AudibleBeep = 3,

	Display = 4,

	Actuator = 5
}

declare const enum MTRIlluminanceMeasurementLightSensorType {

	Photodiode = 0,

	CMOS = 1
}

declare const enum MTRInteractionErrorCode {

	Failure = 1,

	InvalidSubscription = 125,

	UnsupportedAccess = 126,

	UnsupportedEndpoint = 127,

	InvalidAction = 128,

	UnsupportedCommand = 129,

	InvalidCommand = 133,

	UnsupportedAttribute = 134,

	ConstraintError = 135,

	UnsupportedWrite = 136,

	ResourceExhausted = 137,

	NotFound = 139,

	UnreportableAttribute = 140,

	InvalidDataType = 141,

	UnsupportedRead = 143,

	DataVersionMismatch = 146,

	Timeout = 148,

	Busy = 156,

	UnsupportedCluster = 195,

	NoUpstreamSubscription = 197,

	NeedsTimedInteraction = 198,

	UnsupportedEvent = 199,

	PathsExhausted = 200,

	TimedRequestMismatch = 201,

	FailsafeRequired = 202
}

declare var MTRInteractionErrorDomain: string;

declare const enum MTRKeypadInputCecKeyCode {

	Select = 0,

	Up = 1,

	Down = 2,

	Left = 3,

	Right = 4,

	RightUp = 5,

	RightDown = 6,

	LeftUp = 7,

	LeftDown = 8,

	RootMenu = 9,

	SetupMenu = 10,

	ContentsMenu = 11,

	FavoriteMenu = 12,

	Exit = 13,

	MediaTopMenu = 16,

	MediaContextSensitiveMenu = 17,

	NumberEntryMode = 29,

	Number11 = 30,

	Number12 = 31,

	Number0OrNumber10 = 32,

	Numbers1 = 33,

	Numbers2 = 34,

	Numbers3 = 35,

	Numbers4 = 36,

	Numbers5 = 37,

	Numbers6 = 38,

	Numbers7 = 39,

	Numbers8 = 40,

	Numbers9 = 41,

	Dot = 42,

	Enter = 43,

	Clear = 44,

	NextFavorite = 47,

	ChannelUp = 48,

	ChannelDown = 49,

	PreviousChannel = 50,

	SoundSelect = 51,

	InputSelect = 52,

	DisplayInformation = 53,

	Help = 54,

	PageUp = 55,

	PageDown = 56,

	Power = 64,

	VolumeUp = 65,

	VolumeDown = 66,

	Mute = 67,

	Play = 68,

	Stop = 69,

	Pause = 70,

	Record = 71,

	Rewind = 72,

	FastForward = 73,

	Eject = 74,

	Forward = 75,

	Backward = 76,

	StopRecord = 77,

	PauseRecord = 78,

	Reserved = 79,

	Angle = 80,

	SubPicture = 81,

	VideoOnDemand = 82,

	ElectronicProgramGuide = 83,

	TimerProgramming = 84,

	InitialConfiguration = 85,

	SelectBroadcastType = 86,

	SelectSoundPresentation = 87,

	PlayFunction = 96,

	PausePlayFunction = 97,

	RecordFunction = 98,

	PauseRecordFunction = 99,

	StopFunction = 100,

	MuteFunction = 101,

	RestoreVolumeFunction = 102,

	TuneFunction = 103,

	SelectMediaFunction = 104,

	SelectAvInputFunction = 105,

	SelectAudioInputFunction = 106,

	PowerToggleFunction = 107,

	PowerOffFunction = 108,

	PowerOnFunction = 109,

	F1Blue = 113,

	F2Red = 114,

	F3Green = 115,

	F4Yellow = 116,

	F5 = 117,

	Data = 118
}

declare class MTRKeypadInputClusterSendKeyParams extends NSObject implements NSCopying {

	static alloc(): MTRKeypadInputClusterSendKeyParams; // inherited from NSObject

	static new(): MTRKeypadInputClusterSendKeyParams; // inherited from NSObject

	keyCode: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRKeypadInputClusterSendKeyResponseParams extends NSObject implements NSCopying {

	static alloc(): MTRKeypadInputClusterSendKeyResponseParams; // inherited from NSObject

	static new(): MTRKeypadInputClusterSendKeyResponseParams; // inherited from NSObject

	status: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare const enum MTRKeypadInputFeature {

	NavigationKeyCodes = 1,

	LocationKeys = 2,

	NumberKeys = 4
}

declare const enum MTRKeypadInputStatus {

	Success = 0,

	UnsupportedKey = 1,

	InvalidKeyInCurrentState = 2
}

interface MTRKeypair extends NSObjectProtocol {

	publicKey(): any;

	signMessageECDSA_DER?(message: NSData): NSData;

	signMessageECDSA_RAW?(message: NSData): NSData;
}
declare var MTRKeypair: {

	prototype: MTRKeypair;
};

declare class MTRLevelControlClusterMoveParams extends NSObject implements NSCopying {

	static alloc(): MTRLevelControlClusterMoveParams; // inherited from NSObject

	static new(): MTRLevelControlClusterMoveParams; // inherited from NSObject

	moveMode: number;

	optionsMask: number;

	optionsOverride: number;

	rate: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRLevelControlClusterMoveToClosestFrequencyParams extends NSObject implements NSCopying {

	static alloc(): MTRLevelControlClusterMoveToClosestFrequencyParams; // inherited from NSObject

	static new(): MTRLevelControlClusterMoveToClosestFrequencyParams; // inherited from NSObject

	frequency: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRLevelControlClusterMoveToLevelParams extends NSObject implements NSCopying {

	static alloc(): MTRLevelControlClusterMoveToLevelParams; // inherited from NSObject

	static new(): MTRLevelControlClusterMoveToLevelParams; // inherited from NSObject

	level: number;

	optionsMask: number;

	optionsOverride: number;

	timedInvokeTimeoutMs: number;

	transitionTime: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRLevelControlClusterMoveToLevelWithOnOffParams extends NSObject implements NSCopying {

	static alloc(): MTRLevelControlClusterMoveToLevelWithOnOffParams; // inherited from NSObject

	static new(): MTRLevelControlClusterMoveToLevelWithOnOffParams; // inherited from NSObject

	level: number;

	optionsMask: number;

	optionsOverride: number;

	timedInvokeTimeoutMs: number;

	transitionTime: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRLevelControlClusterMoveWithOnOffParams extends NSObject implements NSCopying {

	static alloc(): MTRLevelControlClusterMoveWithOnOffParams; // inherited from NSObject

	static new(): MTRLevelControlClusterMoveWithOnOffParams; // inherited from NSObject

	moveMode: number;

	optionsMask: number;

	optionsOverride: number;

	rate: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRLevelControlClusterStepParams extends NSObject implements NSCopying {

	static alloc(): MTRLevelControlClusterStepParams; // inherited from NSObject

	static new(): MTRLevelControlClusterStepParams; // inherited from NSObject

	optionsMask: number;

	optionsOverride: number;

	stepMode: number;

	stepSize: number;

	timedInvokeTimeoutMs: number;

	transitionTime: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRLevelControlClusterStepWithOnOffParams extends NSObject implements NSCopying {

	static alloc(): MTRLevelControlClusterStepWithOnOffParams; // inherited from NSObject

	static new(): MTRLevelControlClusterStepWithOnOffParams; // inherited from NSObject

	optionsMask: number;

	optionsOverride: number;

	stepMode: number;

	stepSize: number;

	timedInvokeTimeoutMs: number;

	transitionTime: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRLevelControlClusterStopParams extends NSObject implements NSCopying {

	static alloc(): MTRLevelControlClusterStopParams; // inherited from NSObject

	static new(): MTRLevelControlClusterStopParams; // inherited from NSObject

	optionsMask: number;

	optionsOverride: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRLevelControlClusterStopWithOnOffParams extends NSObject implements NSCopying {

	static alloc(): MTRLevelControlClusterStopWithOnOffParams; // inherited from NSObject

	static new(): MTRLevelControlClusterStopWithOnOffParams; // inherited from NSObject

	optionsMask: number;

	optionsOverride: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare const enum MTRLevelControlFeature {

	OnOff = 1,

	Lighting = 2,

	Frequency = 4
}

declare const enum MTRLevelControlMoveMode {

	Up = 0,

	Down = 1
}

declare const enum MTRLevelControlStepMode {

	Up = 0,

	Down = 1
}

declare class MTRLowPowerClusterSleepParams extends NSObject implements NSCopying {

	static alloc(): MTRLowPowerClusterSleepParams; // inherited from NSObject

	static new(): MTRLowPowerClusterSleepParams; // inherited from NSObject

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRManualSetupPayloadParser extends NSObject {

	static alloc(): MTRManualSetupPayloadParser; // inherited from NSObject

	static new(): MTRManualSetupPayloadParser; // inherited from NSObject

	constructor(o: { decimalStringRepresentation: string; });

	initWithDecimalStringRepresentation(decimalStringRepresentation: string): this;

	populatePayload(): MTRSetupPayload;
}

declare class MTRMediaInputClusterHideInputStatusParams extends NSObject implements NSCopying {

	static alloc(): MTRMediaInputClusterHideInputStatusParams; // inherited from NSObject

	static new(): MTRMediaInputClusterHideInputStatusParams; // inherited from NSObject

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRMediaInputClusterInputInfo extends NSObject implements NSCopying {

	static alloc(): MTRMediaInputClusterInputInfo; // inherited from NSObject

	static new(): MTRMediaInputClusterInputInfo; // inherited from NSObject

	descriptionString: string;

	index: number;

	inputType: number;

	name: string;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRMediaInputClusterRenameInputParams extends NSObject implements NSCopying {

	static alloc(): MTRMediaInputClusterRenameInputParams; // inherited from NSObject

	static new(): MTRMediaInputClusterRenameInputParams; // inherited from NSObject

	index: number;

	name: string;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRMediaInputClusterSelectInputParams extends NSObject implements NSCopying {

	static alloc(): MTRMediaInputClusterSelectInputParams; // inherited from NSObject

	static new(): MTRMediaInputClusterSelectInputParams; // inherited from NSObject

	index: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRMediaInputClusterShowInputStatusParams extends NSObject implements NSCopying {

	static alloc(): MTRMediaInputClusterShowInputStatusParams; // inherited from NSObject

	static new(): MTRMediaInputClusterShowInputStatusParams; // inherited from NSObject

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare const enum MTRMediaInputFeature {

	NameUpdates = 1
}

declare const enum MTRMediaInputInputType {

	Internal = 0,

	Aux = 1,

	Coax = 2,

	Composite = 3,

	Hdmi = 4,

	Input = 5,

	Line = 6,

	Optical = 7,

	Video = 8,

	Scart = 9,

	Usb = 10,

	Other = 11
}

declare class MTRMediaPlaybackClusterFastForwardParams extends NSObject implements NSCopying {

	static alloc(): MTRMediaPlaybackClusterFastForwardParams; // inherited from NSObject

	static new(): MTRMediaPlaybackClusterFastForwardParams; // inherited from NSObject

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRMediaPlaybackClusterNextParams extends NSObject implements NSCopying {

	static alloc(): MTRMediaPlaybackClusterNextParams; // inherited from NSObject

	static new(): MTRMediaPlaybackClusterNextParams; // inherited from NSObject

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRMediaPlaybackClusterPauseParams extends NSObject implements NSCopying {

	static alloc(): MTRMediaPlaybackClusterPauseParams; // inherited from NSObject

	static new(): MTRMediaPlaybackClusterPauseParams; // inherited from NSObject

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRMediaPlaybackClusterPlayParams extends NSObject implements NSCopying {

	static alloc(): MTRMediaPlaybackClusterPlayParams; // inherited from NSObject

	static new(): MTRMediaPlaybackClusterPlayParams; // inherited from NSObject

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRMediaPlaybackClusterPlaybackPosition extends NSObject implements NSCopying {

	static alloc(): MTRMediaPlaybackClusterPlaybackPosition; // inherited from NSObject

	static new(): MTRMediaPlaybackClusterPlaybackPosition; // inherited from NSObject

	position: number;

	updatedAt: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRMediaPlaybackClusterPlaybackResponseParams extends NSObject implements NSCopying {

	static alloc(): MTRMediaPlaybackClusterPlaybackResponseParams; // inherited from NSObject

	static new(): MTRMediaPlaybackClusterPlaybackResponseParams; // inherited from NSObject

	data: string;

	status: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRMediaPlaybackClusterPreviousParams extends NSObject implements NSCopying {

	static alloc(): MTRMediaPlaybackClusterPreviousParams; // inherited from NSObject

	static new(): MTRMediaPlaybackClusterPreviousParams; // inherited from NSObject

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRMediaPlaybackClusterRewindParams extends NSObject implements NSCopying {

	static alloc(): MTRMediaPlaybackClusterRewindParams; // inherited from NSObject

	static new(): MTRMediaPlaybackClusterRewindParams; // inherited from NSObject

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRMediaPlaybackClusterSeekParams extends NSObject implements NSCopying {

	static alloc(): MTRMediaPlaybackClusterSeekParams; // inherited from NSObject

	static new(): MTRMediaPlaybackClusterSeekParams; // inherited from NSObject

	position: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRMediaPlaybackClusterSkipBackwardParams extends NSObject implements NSCopying {

	static alloc(): MTRMediaPlaybackClusterSkipBackwardParams; // inherited from NSObject

	static new(): MTRMediaPlaybackClusterSkipBackwardParams; // inherited from NSObject

	deltaPositionMilliseconds: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRMediaPlaybackClusterSkipForwardParams extends NSObject implements NSCopying {

	static alloc(): MTRMediaPlaybackClusterSkipForwardParams; // inherited from NSObject

	static new(): MTRMediaPlaybackClusterSkipForwardParams; // inherited from NSObject

	deltaPositionMilliseconds: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRMediaPlaybackClusterStartOverParams extends NSObject implements NSCopying {

	static alloc(): MTRMediaPlaybackClusterStartOverParams; // inherited from NSObject

	static new(): MTRMediaPlaybackClusterStartOverParams; // inherited from NSObject

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRMediaPlaybackClusterStopPlaybackParams extends NSObject implements NSCopying {

	static alloc(): MTRMediaPlaybackClusterStopPlaybackParams; // inherited from NSObject

	static new(): MTRMediaPlaybackClusterStopPlaybackParams; // inherited from NSObject

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare const enum MTRMediaPlaybackFeature {

	AdvancedSeek = 1,

	VariableSpeed = 2
}

declare const enum MTRMediaPlaybackPlaybackState {

	Playing = 0,

	Paused = 1,

	NotPlaying = 2,

	Buffering = 3
}

declare const enum MTRMediaPlaybackStatus {

	Success = 0,

	InvalidStateForCommand = 1,

	NotAllowed = 2,

	NotActive = 3,

	SpeedOutOfRange = 4,

	SeekOutOfRange = 5
}

declare class MTRModeSelectClusterChangeToModeParams extends NSObject implements NSCopying {

	static alloc(): MTRModeSelectClusterChangeToModeParams; // inherited from NSObject

	static new(): MTRModeSelectClusterChangeToModeParams; // inherited from NSObject

	newMode: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRModeSelectClusterModeOptionStruct extends NSObject implements NSCopying {

	static alloc(): MTRModeSelectClusterModeOptionStruct; // inherited from NSObject

	static new(): MTRModeSelectClusterModeOptionStruct; // inherited from NSObject

	label: string;

	mode: number;

	semanticTags: NSArray<any>;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRModeSelectClusterSemanticTag extends NSObject implements NSCopying {

	static alloc(): MTRModeSelectClusterSemanticTag; // inherited from NSObject

	static new(): MTRModeSelectClusterSemanticTag; // inherited from NSObject

	mfgCode: number;

	value: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare const enum MTRModeSelectFeature {

	DEPONOFF = 1
}

interface MTRNOCChainIssuer extends NSObjectProtocol {

	onNOCChainGenerationNeededAttestationInfoOnNOCChainGenerationComplete(csrInfo: CSRInfo, attestationInfo: AttestationInfo, onNOCChainGenerationComplete: (p1: NSData, p2: NSData, p3: NSData, p4: NSData, p5: number, p6: interop.Pointer | interop.Reference<NSError>) => void): void;
}
declare var MTRNOCChainIssuer: {

	prototype: MTRNOCChainIssuer;
};

declare class MTRNetworkCommissioningClusterAddOrUpdateThreadNetworkParams extends NSObject implements NSCopying {

	static alloc(): MTRNetworkCommissioningClusterAddOrUpdateThreadNetworkParams; // inherited from NSObject

	static new(): MTRNetworkCommissioningClusterAddOrUpdateThreadNetworkParams; // inherited from NSObject

	breadcrumb: number;

	operationalDataset: NSData;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRNetworkCommissioningClusterAddOrUpdateWiFiNetworkParams extends NSObject implements NSCopying {

	static alloc(): MTRNetworkCommissioningClusterAddOrUpdateWiFiNetworkParams; // inherited from NSObject

	static new(): MTRNetworkCommissioningClusterAddOrUpdateWiFiNetworkParams; // inherited from NSObject

	breadcrumb: number;

	credentials: NSData;

	ssid: NSData;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRNetworkCommissioningClusterConnectNetworkParams extends NSObject implements NSCopying {

	static alloc(): MTRNetworkCommissioningClusterConnectNetworkParams; // inherited from NSObject

	static new(): MTRNetworkCommissioningClusterConnectNetworkParams; // inherited from NSObject

	breadcrumb: number;

	networkID: NSData;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRNetworkCommissioningClusterConnectNetworkResponseParams extends NSObject implements NSCopying {

	static alloc(): MTRNetworkCommissioningClusterConnectNetworkResponseParams; // inherited from NSObject

	static new(): MTRNetworkCommissioningClusterConnectNetworkResponseParams; // inherited from NSObject

	debugText: string;

	errorValue: number;

	networkingStatus: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRNetworkCommissioningClusterNetworkConfigResponseParams extends NSObject implements NSCopying {

	static alloc(): MTRNetworkCommissioningClusterNetworkConfigResponseParams; // inherited from NSObject

	static new(): MTRNetworkCommissioningClusterNetworkConfigResponseParams; // inherited from NSObject

	debugText: string;

	networkIndex: number;

	networkingStatus: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRNetworkCommissioningClusterNetworkInfo extends NSObject implements NSCopying {

	static alloc(): MTRNetworkCommissioningClusterNetworkInfo; // inherited from NSObject

	static new(): MTRNetworkCommissioningClusterNetworkInfo; // inherited from NSObject

	connected: number;

	networkID: NSData;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRNetworkCommissioningClusterRemoveNetworkParams extends NSObject implements NSCopying {

	static alloc(): MTRNetworkCommissioningClusterRemoveNetworkParams; // inherited from NSObject

	static new(): MTRNetworkCommissioningClusterRemoveNetworkParams; // inherited from NSObject

	breadcrumb: number;

	networkID: NSData;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRNetworkCommissioningClusterReorderNetworkParams extends NSObject implements NSCopying {

	static alloc(): MTRNetworkCommissioningClusterReorderNetworkParams; // inherited from NSObject

	static new(): MTRNetworkCommissioningClusterReorderNetworkParams; // inherited from NSObject

	breadcrumb: number;

	networkID: NSData;

	networkIndex: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRNetworkCommissioningClusterScanNetworksParams extends NSObject implements NSCopying {

	static alloc(): MTRNetworkCommissioningClusterScanNetworksParams; // inherited from NSObject

	static new(): MTRNetworkCommissioningClusterScanNetworksParams; // inherited from NSObject

	breadcrumb: number;

	ssid: NSData;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRNetworkCommissioningClusterScanNetworksResponseParams extends NSObject implements NSCopying {

	static alloc(): MTRNetworkCommissioningClusterScanNetworksResponseParams; // inherited from NSObject

	static new(): MTRNetworkCommissioningClusterScanNetworksResponseParams; // inherited from NSObject

	debugText: string;

	networkingStatus: number;

	threadScanResults: NSArray<any>;

	timedInvokeTimeoutMs: number;

	wiFiScanResults: NSArray<any>;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRNetworkCommissioningClusterThreadInterfaceScanResult extends NSObject implements NSCopying {

	static alloc(): MTRNetworkCommissioningClusterThreadInterfaceScanResult; // inherited from NSObject

	static new(): MTRNetworkCommissioningClusterThreadInterfaceScanResult; // inherited from NSObject

	channel: number;

	extendedAddress: NSData;

	extendedPanId: number;

	lqi: number;

	networkName: string;

	panId: number;

	rssi: number;

	version: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRNetworkCommissioningClusterWiFiInterfaceScanResult extends NSObject implements NSCopying {

	static alloc(): MTRNetworkCommissioningClusterWiFiInterfaceScanResult; // inherited from NSObject

	static new(): MTRNetworkCommissioningClusterWiFiInterfaceScanResult; // inherited from NSObject

	bssid: NSData;

	channel: number;

	rssi: number;

	security: number;

	ssid: NSData;

	wiFiBand: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare const enum MTRNetworkCommissioningFeature {

	WiFiNetworkInterface = 1,

	ThreadNetworkInterface = 2,

	EthernetNetworkInterface = 4
}

declare const enum MTRNetworkCommissioningStatus {

	Success = 0,

	OutOfRange = 1,

	BoundsExceeded = 2,

	NetworkIDNotFound = 3,

	DuplicateNetworkID = 4,

	NetworkNotFound = 5,

	RegulatoryError = 6,

	AuthFailure = 7,

	UnsupportedSecurity = 8,

	OtherConnectionFailure = 9,

	IPV6Failed = 10,

	IPBindFailed = 11,

	UnknownError = 12
}

declare const enum MTRNetworkCommissioningWiFiBand {

	Band2G4 = 0,

	Band3G65 = 1,

	Band5G = 2,

	Band6G = 3,

	Band60G = 4
}

declare const enum MTRNetworkCommissioningWiFiSecurity {

	Unencrypted = 1,

	WepPersonal = 2,

	WpaPersonal = 4,

	Wpa2Personal = 8,

	Wpa3Personal = 16
}

declare var MTRNullValueType: string;

declare class MTROTAHeader extends NSObject {

	static alloc(): MTROTAHeader; // inherited from NSObject

	static new(): MTROTAHeader; // inherited from NSObject

	imageDigest: NSData;

	imageDigestType: MTROTAImageDigestType;

	maxApplicableVersion: number;

	minApplicableVersion: number;

	payloadSize: number;

	productID: number;

	releaseNotesURL: string;

	softwareVersion: number;

	softwareVersionString: string;

	vendorID: number;
}

declare class MTROTAHeaderParser extends NSObject {

	static alloc(): MTROTAHeaderParser; // inherited from NSObject

	static headerFromDataError(data: NSData): MTROTAHeader;

	static new(): MTROTAHeaderParser; // inherited from NSObject
}

declare const enum MTROTAImageDigestType {

	Sha256 = 1,

	Sha256_128 = 2,

	Sha256_120 = 3,

	Sha256_96 = 4,

	Sha256_64 = 5,

	Sha256_32 = 6,

	Sha384 = 7,

	Sha512 = 8,

	Sha3_224 = 9,

	Sha3_256 = 10,

	Sha3_384 = 11,

	Sha3_512 = 12
}

interface MTROTAProviderDelegate extends NSObjectProtocol {

	handleApplyUpdateRequestForNodeIDControllerParamsCompletionHandler(nodeID: number, controller: MTRDeviceController, params: MTROtaSoftwareUpdateProviderClusterApplyUpdateRequestParams, completionHandler: (p1: MTROtaSoftwareUpdateProviderClusterApplyUpdateResponseParams, p2: NSError) => void): void;

	handleBDXQueryForNodeIDControllerBlockSizeBlockIndexBytesToSkipCompletionHandler(nodeID: number, controller: MTRDeviceController, blockSize: number, blockIndex: number, bytesToSkip: number, completionHandler: (p1: NSData, p2: boolean) => void): void;

	handleBDXTransferSessionBeginForNodeIDControllerFileDesignatorOffsetCompletionHandler(nodeID: number, controller: MTRDeviceController, fileDesignator: string, offset: number, completionHandler: (p1: NSError) => void): void;

	handleBDXTransferSessionEndForNodeIDControllerError(nodeID: number, controller: MTRDeviceController, error: NSError): void;

	handleNotifyUpdateAppliedForNodeIDControllerParamsCompletionHandler(nodeID: number, controller: MTRDeviceController, params: MTROtaSoftwareUpdateProviderClusterNotifyUpdateAppliedParams, completionHandler: (p1: NSError) => void): void;

	handleQueryImageForNodeIDControllerParamsCompletionHandler(nodeID: number, controller: MTRDeviceController, params: MTROtaSoftwareUpdateProviderClusterQueryImageParams, completionHandler: (p1: MTROtaSoftwareUpdateProviderClusterQueryImageResponseParams, p2: NSError) => void): void;
}
declare var MTROTAProviderDelegate: {

	prototype: MTROTAProviderDelegate;
};

declare var MTROctetStringValueType: string;

declare class MTROnOffClusterOffParams extends NSObject implements NSCopying {

	static alloc(): MTROnOffClusterOffParams; // inherited from NSObject

	static new(): MTROnOffClusterOffParams; // inherited from NSObject

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTROnOffClusterOffWithEffectParams extends NSObject implements NSCopying {

	static alloc(): MTROnOffClusterOffWithEffectParams; // inherited from NSObject

	static new(): MTROnOffClusterOffWithEffectParams; // inherited from NSObject

	effectId: number;

	effectVariant: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTROnOffClusterOnParams extends NSObject implements NSCopying {

	static alloc(): MTROnOffClusterOnParams; // inherited from NSObject

	static new(): MTROnOffClusterOnParams; // inherited from NSObject

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTROnOffClusterOnWithRecallGlobalSceneParams extends NSObject implements NSCopying {

	static alloc(): MTROnOffClusterOnWithRecallGlobalSceneParams; // inherited from NSObject

	static new(): MTROnOffClusterOnWithRecallGlobalSceneParams; // inherited from NSObject

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTROnOffClusterOnWithTimedOffParams extends NSObject implements NSCopying {

	static alloc(): MTROnOffClusterOnWithTimedOffParams; // inherited from NSObject

	static new(): MTROnOffClusterOnWithTimedOffParams; // inherited from NSObject

	offWaitTime: number;

	onOffControl: number;

	onTime: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTROnOffClusterToggleParams extends NSObject implements NSCopying {

	static alloc(): MTROnOffClusterToggleParams; // inherited from NSObject

	static new(): MTROnOffClusterToggleParams; // inherited from NSObject

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare const enum MTROnOffControl {

	AcceptOnlyWhenOn = 1
}

declare const enum MTROnOffDelayedAllOffEffectVariant {

	VariantFadeToOffIn0p8Seconds = 0,

	VariantNoFade = 1,

	Variant50PercentDimDownIn0p8SecondsThenFadeToOffIn12Seconds = 2
}

declare const enum MTROnOffDyingLightEffectVariant {

	Variant20PercenterDimUpIn0p5SecondsThenFadeToOffIn1Second = 0
}

declare const enum MTROnOffEffectIdentifier {

	DelayedAllOff = 0,

	DyingLight = 1
}

declare const enum MTROnOffFeature {

	Lighting = 1
}

declare const enum MTROnOffSceneFeatures {

	SceneNames = 1
}

declare const enum MTROnOffStartUpOnOff {

	Off = 0,

	On = 1,

	TogglePreviousOnOff = 2
}

declare class MTROnboardingPayloadParser extends NSObject {

	static alloc(): MTROnboardingPayloadParser; // inherited from NSObject

	static new(): MTROnboardingPayloadParser; // inherited from NSObject

	static setupPayloadForOnboardingPayloadError(onboardingPayload: string): MTRSetupPayload;
}

declare const enum MTROnboardingPayloadType {

	QRCode = 0,

	ManualCode = 1,

	NFC = 2
}

declare class MTROperationalCredentialsClusterAddNOCParams extends NSObject implements NSCopying {

	static alloc(): MTROperationalCredentialsClusterAddNOCParams; // inherited from NSObject

	static new(): MTROperationalCredentialsClusterAddNOCParams; // inherited from NSObject

	adminVendorId: number;

	caseAdminSubject: number;

	icacValue: NSData;

	ipkValue: NSData;

	nocValue: NSData;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTROperationalCredentialsClusterAddTrustedRootCertificateParams extends NSObject implements NSCopying {

	static alloc(): MTROperationalCredentialsClusterAddTrustedRootCertificateParams; // inherited from NSObject

	static new(): MTROperationalCredentialsClusterAddTrustedRootCertificateParams; // inherited from NSObject

	rootCertificate: NSData;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTROperationalCredentialsClusterAttestationRequestParams extends NSObject implements NSCopying {

	static alloc(): MTROperationalCredentialsClusterAttestationRequestParams; // inherited from NSObject

	static new(): MTROperationalCredentialsClusterAttestationRequestParams; // inherited from NSObject

	attestationNonce: NSData;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTROperationalCredentialsClusterAttestationResponseParams extends NSObject implements NSCopying {

	static alloc(): MTROperationalCredentialsClusterAttestationResponseParams; // inherited from NSObject

	static new(): MTROperationalCredentialsClusterAttestationResponseParams; // inherited from NSObject

	attestationElements: NSData;

	signature: NSData;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTROperationalCredentialsClusterCSRRequestParams extends NSObject implements NSCopying {

	static alloc(): MTROperationalCredentialsClusterCSRRequestParams; // inherited from NSObject

	static new(): MTROperationalCredentialsClusterCSRRequestParams; // inherited from NSObject

	csrNonce: NSData;

	isForUpdateNOC: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTROperationalCredentialsClusterCSRResponseParams extends NSObject implements NSCopying {

	static alloc(): MTROperationalCredentialsClusterCSRResponseParams; // inherited from NSObject

	static new(): MTROperationalCredentialsClusterCSRResponseParams; // inherited from NSObject

	attestationSignature: NSData;

	nocsrElements: NSData;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTROperationalCredentialsClusterCertificateChainRequestParams extends NSObject implements NSCopying {

	static alloc(): MTROperationalCredentialsClusterCertificateChainRequestParams; // inherited from NSObject

	static new(): MTROperationalCredentialsClusterCertificateChainRequestParams; // inherited from NSObject

	certificateType: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTROperationalCredentialsClusterCertificateChainResponseParams extends NSObject implements NSCopying {

	static alloc(): MTROperationalCredentialsClusterCertificateChainResponseParams; // inherited from NSObject

	static new(): MTROperationalCredentialsClusterCertificateChainResponseParams; // inherited from NSObject

	certificate: NSData;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTROperationalCredentialsClusterFabricDescriptor extends NSObject implements NSCopying {

	static alloc(): MTROperationalCredentialsClusterFabricDescriptor; // inherited from NSObject

	static new(): MTROperationalCredentialsClusterFabricDescriptor; // inherited from NSObject

	fabricId: number;

	fabricIndex: number;

	label: string;

	nodeId: number;

	rootPublicKey: NSData;

	vendorId: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTROperationalCredentialsClusterNOCResponseParams extends NSObject implements NSCopying {

	static alloc(): MTROperationalCredentialsClusterNOCResponseParams; // inherited from NSObject

	static new(): MTROperationalCredentialsClusterNOCResponseParams; // inherited from NSObject

	debugText: string;

	fabricIndex: number;

	statusCode: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTROperationalCredentialsClusterNOCStruct extends NSObject implements NSCopying {

	static alloc(): MTROperationalCredentialsClusterNOCStruct; // inherited from NSObject

	static new(): MTROperationalCredentialsClusterNOCStruct; // inherited from NSObject

	fabricIndex: number;

	icac: NSData;

	noc: NSData;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTROperationalCredentialsClusterRemoveFabricParams extends NSObject implements NSCopying {

	static alloc(): MTROperationalCredentialsClusterRemoveFabricParams; // inherited from NSObject

	static new(): MTROperationalCredentialsClusterRemoveFabricParams; // inherited from NSObject

	fabricIndex: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTROperationalCredentialsClusterUpdateFabricLabelParams extends NSObject implements NSCopying {

	static alloc(): MTROperationalCredentialsClusterUpdateFabricLabelParams; // inherited from NSObject

	static new(): MTROperationalCredentialsClusterUpdateFabricLabelParams; // inherited from NSObject

	label: string;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTROperationalCredentialsClusterUpdateNOCParams extends NSObject implements NSCopying {

	static alloc(): MTROperationalCredentialsClusterUpdateNOCParams; // inherited from NSObject

	static new(): MTROperationalCredentialsClusterUpdateNOCParams; // inherited from NSObject

	icacValue: NSData;

	nocValue: NSData;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare const enum MTROperationalCredentialsOperationalCertStatus {

	SUCCESS = 0,

	InvalidPublicKey = 1,

	InvalidNodeOpId = 2,

	InvalidNOC = 3,

	MissingCsr = 4,

	TableFull = 5,

	InvalidAdminSubject = 6,

	FabricConflict = 9,

	LabelConflict = 10,

	InvalidFabricIndex = 11
}

declare class MTROptionalQRCodeInfo extends NSObject {

	static alloc(): MTROptionalQRCodeInfo; // inherited from NSObject

	static new(): MTROptionalQRCodeInfo; // inherited from NSObject

	infoType: number;

	integerValue: number;

	stringValue: string;

	tag: number;
}

declare const enum MTROptionalQRCodeInfoType {

	Unknown = 0,

	String = 1,

	Int32 = 2
}

declare class MTROtaSoftwareUpdateProviderClusterApplyUpdateRequestParams extends NSObject implements NSCopying {

	static alloc(): MTROtaSoftwareUpdateProviderClusterApplyUpdateRequestParams; // inherited from NSObject

	static new(): MTROtaSoftwareUpdateProviderClusterApplyUpdateRequestParams; // inherited from NSObject

	newVersion: number;

	timedInvokeTimeoutMs: number;

	updateToken: NSData;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTROtaSoftwareUpdateProviderClusterApplyUpdateResponseParams extends NSObject implements NSCopying {

	static alloc(): MTROtaSoftwareUpdateProviderClusterApplyUpdateResponseParams; // inherited from NSObject

	static new(): MTROtaSoftwareUpdateProviderClusterApplyUpdateResponseParams; // inherited from NSObject

	action: number;

	delayedActionTime: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTROtaSoftwareUpdateProviderClusterNotifyUpdateAppliedParams extends NSObject implements NSCopying {

	static alloc(): MTROtaSoftwareUpdateProviderClusterNotifyUpdateAppliedParams; // inherited from NSObject

	static new(): MTROtaSoftwareUpdateProviderClusterNotifyUpdateAppliedParams; // inherited from NSObject

	softwareVersion: number;

	timedInvokeTimeoutMs: number;

	updateToken: NSData;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTROtaSoftwareUpdateProviderClusterQueryImageParams extends NSObject implements NSCopying {

	static alloc(): MTROtaSoftwareUpdateProviderClusterQueryImageParams; // inherited from NSObject

	static new(): MTROtaSoftwareUpdateProviderClusterQueryImageParams; // inherited from NSObject

	hardwareVersion: number;

	location: string;

	metadataForProvider: NSData;

	productId: number;

	protocolsSupported: NSArray<any>;

	requestorCanConsent: number;

	softwareVersion: number;

	timedInvokeTimeoutMs: number;

	vendorId: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTROtaSoftwareUpdateProviderClusterQueryImageResponseParams extends NSObject implements NSCopying {

	static alloc(): MTROtaSoftwareUpdateProviderClusterQueryImageResponseParams; // inherited from NSObject

	static new(): MTROtaSoftwareUpdateProviderClusterQueryImageResponseParams; // inherited from NSObject

	delayedActionTime: number;

	imageURI: string;

	metadataForRequestor: NSData;

	softwareVersion: number;

	softwareVersionString: string;

	status: number;

	timedInvokeTimeoutMs: number;

	updateToken: NSData;

	userConsentNeeded: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare const enum MTROtaSoftwareUpdateProviderOTAApplyUpdateAction {

	Proceed = 0,

	AwaitNextAction = 1,

	Discontinue = 2
}

declare const enum MTROtaSoftwareUpdateProviderOTADownloadProtocol {

	BDXSynchronous = 0,

	BDXAsynchronous = 1,

	HTTPS = 2,

	VendorSpecific = 3
}

declare const enum MTROtaSoftwareUpdateProviderOTAQueryStatus {

	UpdateAvailable = 0,

	Busy = 1,

	NotAvailable = 2,

	DownloadProtocolNotSupported = 3
}

declare class MTROtaSoftwareUpdateRequestorClusterAnnounceOtaProviderParams extends NSObject implements NSCopying {

	static alloc(): MTROtaSoftwareUpdateRequestorClusterAnnounceOtaProviderParams; // inherited from NSObject

	static new(): MTROtaSoftwareUpdateRequestorClusterAnnounceOtaProviderParams; // inherited from NSObject

	announcementReason: number;

	endpoint: number;

	metadataForNode: NSData;

	providerNodeId: number;

	timedInvokeTimeoutMs: number;

	vendorId: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTROtaSoftwareUpdateRequestorClusterDownloadErrorEvent extends NSObject implements NSCopying {

	static alloc(): MTROtaSoftwareUpdateRequestorClusterDownloadErrorEvent; // inherited from NSObject

	static new(): MTROtaSoftwareUpdateRequestorClusterDownloadErrorEvent; // inherited from NSObject

	bytesDownloaded: number;

	platformCode: number;

	progressPercent: number;

	softwareVersion: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTROtaSoftwareUpdateRequestorClusterProviderLocation extends NSObject implements NSCopying {

	static alloc(): MTROtaSoftwareUpdateRequestorClusterProviderLocation; // inherited from NSObject

	static new(): MTROtaSoftwareUpdateRequestorClusterProviderLocation; // inherited from NSObject

	endpoint: number;

	fabricIndex: number;

	providerNodeID: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTROtaSoftwareUpdateRequestorClusterStateTransitionEvent extends NSObject implements NSCopying {

	static alloc(): MTROtaSoftwareUpdateRequestorClusterStateTransitionEvent; // inherited from NSObject

	static new(): MTROtaSoftwareUpdateRequestorClusterStateTransitionEvent; // inherited from NSObject

	newState: number;

	previousState: number;

	reason: number;

	targetSoftwareVersion: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTROtaSoftwareUpdateRequestorClusterVersionAppliedEvent extends NSObject implements NSCopying {

	static alloc(): MTROtaSoftwareUpdateRequestorClusterVersionAppliedEvent; // inherited from NSObject

	static new(): MTROtaSoftwareUpdateRequestorClusterVersionAppliedEvent; // inherited from NSObject

	productID: number;

	softwareVersion: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare const enum MTROtaSoftwareUpdateRequestorOTAAnnouncementReason {

	SimpleAnnouncement = 0,

	UpdateAvailable = 1,

	UrgentUpdateAvailable = 2
}

declare const enum MTROtaSoftwareUpdateRequestorOTAChangeReason {

	Unknown = 0,

	Success = 1,

	Failure = 2,

	TimeOut = 3,

	DelayByProvider = 4
}

declare const enum MTROtaSoftwareUpdateRequestorOTAUpdateState {

	Unknown = 0,

	Idle = 1,

	Querying = 2,

	DelayedOnQuery = 3,

	Downloading = 4,

	Applying = 5,

	DelayedOnApply = 6,

	RollingBack = 7,

	DelayedOnUserConsent = 8
}

declare const enum MTRPairingStatus {

	Unknown = 0,

	Success = 1,

	Failed = 2,

	DiscoveringMoreDevices = 3
}

interface MTRPersistentStorageDelegate extends NSObjectProtocol {

	removeStorageDataForKey(key: string): boolean;

	setStorageDataForKey(value: NSData, key: string): boolean;

	storageDataForKey(key: string): NSData;
}
declare var MTRPersistentStorageDelegate: {

	prototype: MTRPersistentStorageDelegate;
};

declare const enum MTRPowerSourceBatChargeFault {

	Unspecfied = 0,

	AmbientTooHot = 1,

	AmbientTooCold = 2,

	BatteryTooHot = 3,

	BatteryTooCold = 4,

	BatteryAbsent = 5,

	BatteryOverVoltage = 6,

	BatteryUnderVoltage = 7,

	ChargerOverVoltage = 8,

	ChargerUnderVoltage = 9,

	SafetyTimeout = 10
}

declare const enum MTRPowerSourceBatChargeLevel {

	Ok = 0,

	Warning = 1,

	Critical = 2
}

declare const enum MTRPowerSourceBatChargeState {

	Unknown = 0,

	IsCharging = 1,

	IsAtFullCharge = 2,

	IsNotCharging = 3
}

declare const enum MTRPowerSourceBatFault {

	Unspecfied = 0,

	OverTemp = 1,

	UnderTemp = 2
}

declare const enum MTRPowerSourceBatReplaceability {

	Unspecified = 0,

	NotReplaceable = 1,

	UserReplaceable = 2,

	FactoryReplaceable = 3
}

declare class MTRPowerSourceClusterBatChargeFaultChangeType extends NSObject implements NSCopying {

	static alloc(): MTRPowerSourceClusterBatChargeFaultChangeType; // inherited from NSObject

	static new(): MTRPowerSourceClusterBatChargeFaultChangeType; // inherited from NSObject

	current: NSArray<any>;

	previous: NSArray<any>;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRPowerSourceClusterBatFaultChangeType extends NSObject implements NSCopying {

	static alloc(): MTRPowerSourceClusterBatFaultChangeType; // inherited from NSObject

	static new(): MTRPowerSourceClusterBatFaultChangeType; // inherited from NSObject

	current: NSArray<any>;

	previous: NSArray<any>;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRPowerSourceClusterWiredFaultChangeType extends NSObject implements NSCopying {

	static alloc(): MTRPowerSourceClusterWiredFaultChangeType; // inherited from NSObject

	static new(): MTRPowerSourceClusterWiredFaultChangeType; // inherited from NSObject

	current: NSArray<any>;

	previous: NSArray<any>;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare const enum MTRPowerSourceFeature {

	Wired = 1,

	Battery = 2,

	Rechargeable = 4,

	Replaceable = 8
}

declare const enum MTRPowerSourceStatus {

	Unspecfied = 0,

	Active = 1,

	Standby = 2,

	Unavailable = 3
}

declare const enum MTRPowerSourceWiredCurrentType {

	AC = 0,

	DC = 1
}

declare const enum MTRPowerSourceWiredFault {

	Unspecfied = 0,

	OverVoltage = 1,

	UnderVoltage = 2
}

declare const enum MTRPressureMeasurementPressureFeature {

	EXT = 1
}

declare class MTRPumpConfigurationAndControlClusterAirDetectionEvent extends NSObject implements NSCopying {

	static alloc(): MTRPumpConfigurationAndControlClusterAirDetectionEvent; // inherited from NSObject

	static new(): MTRPumpConfigurationAndControlClusterAirDetectionEvent; // inherited from NSObject

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRPumpConfigurationAndControlClusterDryRunningEvent extends NSObject implements NSCopying {

	static alloc(): MTRPumpConfigurationAndControlClusterDryRunningEvent; // inherited from NSObject

	static new(): MTRPumpConfigurationAndControlClusterDryRunningEvent; // inherited from NSObject

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRPumpConfigurationAndControlClusterElectronicFatalFailureEvent extends NSObject implements NSCopying {

	static alloc(): MTRPumpConfigurationAndControlClusterElectronicFatalFailureEvent; // inherited from NSObject

	static new(): MTRPumpConfigurationAndControlClusterElectronicFatalFailureEvent; // inherited from NSObject

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRPumpConfigurationAndControlClusterElectronicNonFatalFailureEvent extends NSObject implements NSCopying {

	static alloc(): MTRPumpConfigurationAndControlClusterElectronicNonFatalFailureEvent; // inherited from NSObject

	static new(): MTRPumpConfigurationAndControlClusterElectronicNonFatalFailureEvent; // inherited from NSObject

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRPumpConfigurationAndControlClusterElectronicTemperatureHighEvent extends NSObject implements NSCopying {

	static alloc(): MTRPumpConfigurationAndControlClusterElectronicTemperatureHighEvent; // inherited from NSObject

	static new(): MTRPumpConfigurationAndControlClusterElectronicTemperatureHighEvent; // inherited from NSObject

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRPumpConfigurationAndControlClusterGeneralFaultEvent extends NSObject implements NSCopying {

	static alloc(): MTRPumpConfigurationAndControlClusterGeneralFaultEvent; // inherited from NSObject

	static new(): MTRPumpConfigurationAndControlClusterGeneralFaultEvent; // inherited from NSObject

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRPumpConfigurationAndControlClusterLeakageEvent extends NSObject implements NSCopying {

	static alloc(): MTRPumpConfigurationAndControlClusterLeakageEvent; // inherited from NSObject

	static new(): MTRPumpConfigurationAndControlClusterLeakageEvent; // inherited from NSObject

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRPumpConfigurationAndControlClusterMotorTemperatureHighEvent extends NSObject implements NSCopying {

	static alloc(): MTRPumpConfigurationAndControlClusterMotorTemperatureHighEvent; // inherited from NSObject

	static new(): MTRPumpConfigurationAndControlClusterMotorTemperatureHighEvent; // inherited from NSObject

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRPumpConfigurationAndControlClusterPowerMissingPhaseEvent extends NSObject implements NSCopying {

	static alloc(): MTRPumpConfigurationAndControlClusterPowerMissingPhaseEvent; // inherited from NSObject

	static new(): MTRPumpConfigurationAndControlClusterPowerMissingPhaseEvent; // inherited from NSObject

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRPumpConfigurationAndControlClusterPumpBlockedEvent extends NSObject implements NSCopying {

	static alloc(): MTRPumpConfigurationAndControlClusterPumpBlockedEvent; // inherited from NSObject

	static new(): MTRPumpConfigurationAndControlClusterPumpBlockedEvent; // inherited from NSObject

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRPumpConfigurationAndControlClusterPumpMotorFatalFailureEvent extends NSObject implements NSCopying {

	static alloc(): MTRPumpConfigurationAndControlClusterPumpMotorFatalFailureEvent; // inherited from NSObject

	static new(): MTRPumpConfigurationAndControlClusterPumpMotorFatalFailureEvent; // inherited from NSObject

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRPumpConfigurationAndControlClusterSensorFailureEvent extends NSObject implements NSCopying {

	static alloc(): MTRPumpConfigurationAndControlClusterSensorFailureEvent; // inherited from NSObject

	static new(): MTRPumpConfigurationAndControlClusterSensorFailureEvent; // inherited from NSObject

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRPumpConfigurationAndControlClusterSupplyVoltageHighEvent extends NSObject implements NSCopying {

	static alloc(): MTRPumpConfigurationAndControlClusterSupplyVoltageHighEvent; // inherited from NSObject

	static new(): MTRPumpConfigurationAndControlClusterSupplyVoltageHighEvent; // inherited from NSObject

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRPumpConfigurationAndControlClusterSupplyVoltageLowEvent extends NSObject implements NSCopying {

	static alloc(): MTRPumpConfigurationAndControlClusterSupplyVoltageLowEvent; // inherited from NSObject

	static new(): MTRPumpConfigurationAndControlClusterSupplyVoltageLowEvent; // inherited from NSObject

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRPumpConfigurationAndControlClusterSystemPressureHighEvent extends NSObject implements NSCopying {

	static alloc(): MTRPumpConfigurationAndControlClusterSystemPressureHighEvent; // inherited from NSObject

	static new(): MTRPumpConfigurationAndControlClusterSystemPressureHighEvent; // inherited from NSObject

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRPumpConfigurationAndControlClusterSystemPressureLowEvent extends NSObject implements NSCopying {

	static alloc(): MTRPumpConfigurationAndControlClusterSystemPressureLowEvent; // inherited from NSObject

	static new(): MTRPumpConfigurationAndControlClusterSystemPressureLowEvent; // inherited from NSObject

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRPumpConfigurationAndControlClusterTurbineOperationEvent extends NSObject implements NSCopying {

	static alloc(): MTRPumpConfigurationAndControlClusterTurbineOperationEvent; // inherited from NSObject

	static new(): MTRPumpConfigurationAndControlClusterTurbineOperationEvent; // inherited from NSObject

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare const enum MTRPumpConfigurationAndControlPumpControlMode {

	ConstantSpeed = 0,

	ConstantPressure = 1,

	ProportionalPressure = 2,

	ConstantFlow = 3,

	ConstantTemperature = 5,

	Automatic = 7
}

declare const enum MTRPumpConfigurationAndControlPumpOperationMode {

	Normal = 0,

	Minimum = 1,

	Maximum = 2,

	Local = 3
}

declare const enum MTRPumpConfigurationAndControlPumpStatus {

	DeviceFault = 1,

	Supplyfault = 2,

	SpeedLow = 4,

	SpeedHigh = 8,

	LocalOverride = 16,

	Running = 32,

	RemotePressure = 64,

	RemoteFlow = 128,

	RemoteTemperature = 256
}

declare class MTRQRCodeSetupPayloadParser extends NSObject {

	static alloc(): MTRQRCodeSetupPayloadParser; // inherited from NSObject

	static new(): MTRQRCodeSetupPayloadParser; // inherited from NSObject

	constructor(o: { base38Representation: string; });

	initWithBase38Representation(base38Representation: string): this;

	populatePayload(): MTRSetupPayload;
}

declare class MTRReadParams extends NSObject implements NSCopying {

	static alloc(): MTRReadParams; // inherited from NSObject

	static new(): MTRReadParams; // inherited from NSObject

	fabricFiltered: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRScenesClusterAddSceneParams extends NSObject implements NSCopying {

	static alloc(): MTRScenesClusterAddSceneParams; // inherited from NSObject

	static new(): MTRScenesClusterAddSceneParams; // inherited from NSObject

	extensionFieldSets: NSArray<any>;

	groupId: number;

	sceneId: number;

	sceneName: string;

	timedInvokeTimeoutMs: number;

	transitionTime: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRScenesClusterAddSceneResponseParams extends NSObject implements NSCopying {

	static alloc(): MTRScenesClusterAddSceneResponseParams; // inherited from NSObject

	static new(): MTRScenesClusterAddSceneResponseParams; // inherited from NSObject

	groupId: number;

	sceneId: number;

	status: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRScenesClusterAttributeValuePair extends NSObject implements NSCopying {

	static alloc(): MTRScenesClusterAttributeValuePair; // inherited from NSObject

	static new(): MTRScenesClusterAttributeValuePair; // inherited from NSObject

	attributeId: number;

	attributeValue: NSArray<any>;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRScenesClusterCopySceneParams extends NSObject implements NSCopying {

	static alloc(): MTRScenesClusterCopySceneParams; // inherited from NSObject

	static new(): MTRScenesClusterCopySceneParams; // inherited from NSObject

	groupIdFrom: number;

	groupIdTo: number;

	mode: number;

	sceneIdFrom: number;

	sceneIdTo: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRScenesClusterCopySceneResponseParams extends NSObject implements NSCopying {

	static alloc(): MTRScenesClusterCopySceneResponseParams; // inherited from NSObject

	static new(): MTRScenesClusterCopySceneResponseParams; // inherited from NSObject

	groupIdFrom: number;

	sceneIdFrom: number;

	status: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRScenesClusterEnhancedAddSceneParams extends NSObject implements NSCopying {

	static alloc(): MTRScenesClusterEnhancedAddSceneParams; // inherited from NSObject

	static new(): MTRScenesClusterEnhancedAddSceneParams; // inherited from NSObject

	extensionFieldSets: NSArray<any>;

	groupId: number;

	sceneId: number;

	sceneName: string;

	timedInvokeTimeoutMs: number;

	transitionTime: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRScenesClusterEnhancedAddSceneResponseParams extends NSObject implements NSCopying {

	static alloc(): MTRScenesClusterEnhancedAddSceneResponseParams; // inherited from NSObject

	static new(): MTRScenesClusterEnhancedAddSceneResponseParams; // inherited from NSObject

	groupId: number;

	sceneId: number;

	status: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRScenesClusterEnhancedViewSceneParams extends NSObject implements NSCopying {

	static alloc(): MTRScenesClusterEnhancedViewSceneParams; // inherited from NSObject

	static new(): MTRScenesClusterEnhancedViewSceneParams; // inherited from NSObject

	groupId: number;

	sceneId: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRScenesClusterEnhancedViewSceneResponseParams extends NSObject implements NSCopying {

	static alloc(): MTRScenesClusterEnhancedViewSceneResponseParams; // inherited from NSObject

	static new(): MTRScenesClusterEnhancedViewSceneResponseParams; // inherited from NSObject

	extensionFieldSets: NSArray<any>;

	groupId: number;

	sceneId: number;

	sceneName: string;

	status: number;

	timedInvokeTimeoutMs: number;

	transitionTime: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRScenesClusterExtensionFieldSet extends NSObject implements NSCopying {

	static alloc(): MTRScenesClusterExtensionFieldSet; // inherited from NSObject

	static new(): MTRScenesClusterExtensionFieldSet; // inherited from NSObject

	attributeValueList: NSArray<any>;

	clusterId: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRScenesClusterGetSceneMembershipParams extends NSObject implements NSCopying {

	static alloc(): MTRScenesClusterGetSceneMembershipParams; // inherited from NSObject

	static new(): MTRScenesClusterGetSceneMembershipParams; // inherited from NSObject

	groupId: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRScenesClusterGetSceneMembershipResponseParams extends NSObject implements NSCopying {

	static alloc(): MTRScenesClusterGetSceneMembershipResponseParams; // inherited from NSObject

	static new(): MTRScenesClusterGetSceneMembershipResponseParams; // inherited from NSObject

	capacity: number;

	groupId: number;

	sceneList: NSArray<any>;

	status: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRScenesClusterRecallSceneParams extends NSObject implements NSCopying {

	static alloc(): MTRScenesClusterRecallSceneParams; // inherited from NSObject

	static new(): MTRScenesClusterRecallSceneParams; // inherited from NSObject

	groupId: number;

	sceneId: number;

	timedInvokeTimeoutMs: number;

	transitionTime: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRScenesClusterRemoveAllScenesParams extends NSObject implements NSCopying {

	static alloc(): MTRScenesClusterRemoveAllScenesParams; // inherited from NSObject

	static new(): MTRScenesClusterRemoveAllScenesParams; // inherited from NSObject

	groupId: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRScenesClusterRemoveAllScenesResponseParams extends NSObject implements NSCopying {

	static alloc(): MTRScenesClusterRemoveAllScenesResponseParams; // inherited from NSObject

	static new(): MTRScenesClusterRemoveAllScenesResponseParams; // inherited from NSObject

	groupId: number;

	status: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRScenesClusterRemoveSceneParams extends NSObject implements NSCopying {

	static alloc(): MTRScenesClusterRemoveSceneParams; // inherited from NSObject

	static new(): MTRScenesClusterRemoveSceneParams; // inherited from NSObject

	groupId: number;

	sceneId: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRScenesClusterRemoveSceneResponseParams extends NSObject implements NSCopying {

	static alloc(): MTRScenesClusterRemoveSceneResponseParams; // inherited from NSObject

	static new(): MTRScenesClusterRemoveSceneResponseParams; // inherited from NSObject

	groupId: number;

	sceneId: number;

	status: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRScenesClusterStoreSceneParams extends NSObject implements NSCopying {

	static alloc(): MTRScenesClusterStoreSceneParams; // inherited from NSObject

	static new(): MTRScenesClusterStoreSceneParams; // inherited from NSObject

	groupId: number;

	sceneId: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRScenesClusterStoreSceneResponseParams extends NSObject implements NSCopying {

	static alloc(): MTRScenesClusterStoreSceneResponseParams; // inherited from NSObject

	static new(): MTRScenesClusterStoreSceneResponseParams; // inherited from NSObject

	groupId: number;

	sceneId: number;

	status: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRScenesClusterViewSceneParams extends NSObject implements NSCopying {

	static alloc(): MTRScenesClusterViewSceneParams; // inherited from NSObject

	static new(): MTRScenesClusterViewSceneParams; // inherited from NSObject

	groupId: number;

	sceneId: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRScenesClusterViewSceneResponseParams extends NSObject implements NSCopying {

	static alloc(): MTRScenesClusterViewSceneResponseParams; // inherited from NSObject

	static new(): MTRScenesClusterViewSceneResponseParams; // inherited from NSObject

	extensionFieldSets: NSArray<any>;

	groupId: number;

	sceneId: number;

	sceneName: string;

	status: number;

	timedInvokeTimeoutMs: number;

	transitionTime: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare const enum MTRScenesCopyMode {

	CopyAllScenes = 1
}

declare class MTRSetupPayload extends NSObject implements NSSecureCoding {

	static alloc(): MTRSetupPayload; // inherited from NSObject

	static generateRandomPIN(): number;

	static generateRandomSetupPasscode(): number;

	static new(): MTRSetupPayload; // inherited from NSObject

	static setupPayloadWithOnboardingPayloadError(onboardingPayload: string): MTRSetupPayload;

	commissioningFlow: MTRCommissioningFlow;

	discriminator: number;

	hasShortDiscriminator: boolean;

	productID: number;

	rendezvousInformation: number;

	serialNumber: string;

	setUpPINCode: number;

	vendorID: number;

	version: number;

	static readonly supportsSecureCoding: boolean; // inherited from NSSecureCoding

	constructor(o: { coder: NSCoder; }); // inherited from NSCoding

	constructor(o: { setupPasscode: number; discriminator: number; });

	encodeWithCoder(coder: NSCoder): void;

	getAllOptionalVendorData(): NSArray<MTROptionalQRCodeInfo>;

	initWithCoder(coder: NSCoder): this;

	initWithSetupPasscodeDiscriminator(setupPasscode: number, discriminator: number): this;

	manualEntryCode(): string;

	qrCodeString(): string;
}

declare var MTRSignedIntegerValueType: string;

declare var MTRSizeThreadExtendedPanId: number;

declare var MTRSizeThreadMasterKey: number;

declare var MTRSizeThreadNetworkName: number;

declare var MTRSizeThreadPSKc: number;

declare class MTRSoftwareDiagnosticsClusterResetWatermarksParams extends NSObject implements NSCopying {

	static alloc(): MTRSoftwareDiagnosticsClusterResetWatermarksParams; // inherited from NSObject

	static new(): MTRSoftwareDiagnosticsClusterResetWatermarksParams; // inherited from NSObject

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRSoftwareDiagnosticsClusterSoftwareFaultEvent extends NSObject implements NSCopying {

	static alloc(): MTRSoftwareDiagnosticsClusterSoftwareFaultEvent; // inherited from NSObject

	static new(): MTRSoftwareDiagnosticsClusterSoftwareFaultEvent; // inherited from NSObject

	faultRecording: NSData;

	id: number;

	name: string;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRSoftwareDiagnosticsClusterThreadMetrics extends NSObject implements NSCopying {

	static alloc(): MTRSoftwareDiagnosticsClusterThreadMetrics; // inherited from NSObject

	static new(): MTRSoftwareDiagnosticsClusterThreadMetrics; // inherited from NSObject

	id: number;

	name: string;

	stackFreeCurrent: number;

	stackFreeMinimum: number;

	stackSize: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare const enum MTRSoftwareDiagnosticsFeature {

	WaterMarks = 1
}

declare var MTRStructureValueType: string;

declare class MTRSubscribeParams extends MTRReadParams {

	static alloc(): MTRSubscribeParams; // inherited from NSObject

	static new(): MTRSubscribeParams; // inherited from NSObject

	autoResubscribe: number;

	keepPreviousSubscriptions: number;
}

declare class MTRSwitchClusterInitialPressEvent extends NSObject implements NSCopying {

	static alloc(): MTRSwitchClusterInitialPressEvent; // inherited from NSObject

	static new(): MTRSwitchClusterInitialPressEvent; // inherited from NSObject

	newPosition: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRSwitchClusterLongPressEvent extends NSObject implements NSCopying {

	static alloc(): MTRSwitchClusterLongPressEvent; // inherited from NSObject

	static new(): MTRSwitchClusterLongPressEvent; // inherited from NSObject

	newPosition: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRSwitchClusterLongReleaseEvent extends NSObject implements NSCopying {

	static alloc(): MTRSwitchClusterLongReleaseEvent; // inherited from NSObject

	static new(): MTRSwitchClusterLongReleaseEvent; // inherited from NSObject

	previousPosition: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRSwitchClusterMultiPressCompleteEvent extends NSObject implements NSCopying {

	static alloc(): MTRSwitchClusterMultiPressCompleteEvent; // inherited from NSObject

	static new(): MTRSwitchClusterMultiPressCompleteEvent; // inherited from NSObject

	newPosition: number;

	totalNumberOfPressesCounted: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRSwitchClusterMultiPressOngoingEvent extends NSObject implements NSCopying {

	static alloc(): MTRSwitchClusterMultiPressOngoingEvent; // inherited from NSObject

	static new(): MTRSwitchClusterMultiPressOngoingEvent; // inherited from NSObject

	currentNumberOfPressesCounted: number;

	newPosition: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRSwitchClusterShortReleaseEvent extends NSObject implements NSCopying {

	static alloc(): MTRSwitchClusterShortReleaseEvent; // inherited from NSObject

	static new(): MTRSwitchClusterShortReleaseEvent; // inherited from NSObject

	previousPosition: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRSwitchClusterSwitchLatchedEvent extends NSObject implements NSCopying {

	static alloc(): MTRSwitchClusterSwitchLatchedEvent; // inherited from NSObject

	static new(): MTRSwitchClusterSwitchLatchedEvent; // inherited from NSObject

	newPosition: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare const enum MTRSwitchFeature {

	LatchingSwitch = 1,

	MomentarySwitch = 2,

	MomentarySwitchRelease = 4,

	MomentarySwitchLongPress = 8,

	MomentarySwitchMultiPress = 16
}

declare class MTRTargetNavigatorClusterNavigateTargetParams extends NSObject implements NSCopying {

	static alloc(): MTRTargetNavigatorClusterNavigateTargetParams; // inherited from NSObject

	static new(): MTRTargetNavigatorClusterNavigateTargetParams; // inherited from NSObject

	data: string;

	target: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRTargetNavigatorClusterNavigateTargetResponseParams extends NSObject implements NSCopying {

	static alloc(): MTRTargetNavigatorClusterNavigateTargetResponseParams; // inherited from NSObject

	static new(): MTRTargetNavigatorClusterNavigateTargetResponseParams; // inherited from NSObject

	data: string;

	status: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRTargetNavigatorClusterTargetInfo extends NSObject implements NSCopying {

	static alloc(): MTRTargetNavigatorClusterTargetInfo; // inherited from NSObject

	static new(): MTRTargetNavigatorClusterTargetInfo; // inherited from NSObject

	identifier: number;

	name: string;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare const enum MTRTargetNavigatorStatus {

	Success = 0,

	TargetNotFound = 1,

	NotAllowed = 2
}

declare const enum MTRTestClusterBitmap16MaskMap {

	MaskVal1 = 1,

	MaskVal2 = 2,

	MaskVal3 = 4,

	MaskVal4 = 16384
}

declare const enum MTRTestClusterBitmap32MaskMap {

	MaskVal1 = 1,

	MaskVal2 = 2,

	MaskVal3 = 4,

	MaskVal4 = 1073741824
}

declare const enum MTRTestClusterBitmap64MaskMap {

	MaskVal1 = 1,

	MaskVal2 = 2,

	MaskVal3 = 4,

	MaskVal4 = 4611686018427387904
}

declare const enum MTRTestClusterBitmap8MaskMap {

	MaskVal1 = 1,

	MaskVal2 = 2,

	MaskVal3 = 4,

	MaskVal4 = 64
}

declare class MTRTestClusterClusterBooleanResponseParams extends NSObject implements NSCopying {

	static alloc(): MTRTestClusterClusterBooleanResponseParams; // inherited from NSObject

	static new(): MTRTestClusterClusterBooleanResponseParams; // inherited from NSObject

	timedInvokeTimeoutMs: number;

	value: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRTestClusterClusterDoubleNestedStructList extends NSObject implements NSCopying {

	static alloc(): MTRTestClusterClusterDoubleNestedStructList; // inherited from NSObject

	static new(): MTRTestClusterClusterDoubleNestedStructList; // inherited from NSObject

	a: NSArray<any>;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRTestClusterClusterNestedStruct extends NSObject implements NSCopying {

	static alloc(): MTRTestClusterClusterNestedStruct; // inherited from NSObject

	static new(): MTRTestClusterClusterNestedStruct; // inherited from NSObject

	a: number;

	b: number;

	c: MTRTestClusterClusterSimpleStruct;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRTestClusterClusterNestedStructList extends NSObject implements NSCopying {

	static alloc(): MTRTestClusterClusterNestedStructList; // inherited from NSObject

	static new(): MTRTestClusterClusterNestedStructList; // inherited from NSObject

	a: number;

	b: number;

	c: MTRTestClusterClusterSimpleStruct;

	d: NSArray<any>;

	e: NSArray<any>;

	f: NSArray<any>;

	g: NSArray<any>;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRTestClusterClusterNullablesAndOptionalsStruct extends NSObject implements NSCopying {

	static alloc(): MTRTestClusterClusterNullablesAndOptionalsStruct; // inherited from NSObject

	static new(): MTRTestClusterClusterNullablesAndOptionalsStruct; // inherited from NSObject

	nullableInt: number;

	nullableList: NSArray<any>;

	nullableOptionalInt: number;

	nullableOptionalList: NSArray<any>;

	nullableOptionalString: string;

	nullableOptionalStruct: MTRTestClusterClusterSimpleStruct;

	nullableString: string;

	nullableStruct: MTRTestClusterClusterSimpleStruct;

	optionalInt: number;

	optionalList: NSArray<any>;

	optionalString: string;

	optionalStruct: MTRTestClusterClusterSimpleStruct;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRTestClusterClusterSimpleStruct extends NSObject implements NSCopying {

	static alloc(): MTRTestClusterClusterSimpleStruct; // inherited from NSObject

	static new(): MTRTestClusterClusterSimpleStruct; // inherited from NSObject

	a: number;

	b: number;

	c: number;

	d: NSData;

	e: string;

	f: number;

	g: number;

	h: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRTestClusterClusterSimpleStructEchoRequestParams extends NSObject implements NSCopying {

	static alloc(): MTRTestClusterClusterSimpleStructEchoRequestParams; // inherited from NSObject

	static new(): MTRTestClusterClusterSimpleStructEchoRequestParams; // inherited from NSObject

	arg1: MTRTestClusterClusterSimpleStruct;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRTestClusterClusterSimpleStructResponseParams extends NSObject implements NSCopying {

	static alloc(): MTRTestClusterClusterSimpleStructResponseParams; // inherited from NSObject

	static new(): MTRTestClusterClusterSimpleStructResponseParams; // inherited from NSObject

	arg1: MTRTestClusterClusterSimpleStruct;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRTestClusterClusterTestAddArgumentsParams extends NSObject implements NSCopying {

	static alloc(): MTRTestClusterClusterTestAddArgumentsParams; // inherited from NSObject

	static new(): MTRTestClusterClusterTestAddArgumentsParams; // inherited from NSObject

	arg1: number;

	arg2: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRTestClusterClusterTestAddArgumentsResponseParams extends NSObject implements NSCopying {

	static alloc(): MTRTestClusterClusterTestAddArgumentsResponseParams; // inherited from NSObject

	static new(): MTRTestClusterClusterTestAddArgumentsResponseParams; // inherited from NSObject

	returnValue: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRTestClusterClusterTestComplexNullableOptionalRequestParams extends NSObject implements NSCopying {

	static alloc(): MTRTestClusterClusterTestComplexNullableOptionalRequestParams; // inherited from NSObject

	static new(): MTRTestClusterClusterTestComplexNullableOptionalRequestParams; // inherited from NSObject

	nullableInt: number;

	nullableList: NSArray<any>;

	nullableOptionalInt: number;

	nullableOptionalList: NSArray<any>;

	nullableOptionalString: string;

	nullableOptionalStruct: MTRTestClusterClusterSimpleStruct;

	nullableString: string;

	nullableStruct: MTRTestClusterClusterSimpleStruct;

	optionalInt: number;

	optionalList: NSArray<any>;

	optionalString: string;

	optionalStruct: MTRTestClusterClusterSimpleStruct;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRTestClusterClusterTestComplexNullableOptionalResponseParams extends NSObject implements NSCopying {

	static alloc(): MTRTestClusterClusterTestComplexNullableOptionalResponseParams; // inherited from NSObject

	static new(): MTRTestClusterClusterTestComplexNullableOptionalResponseParams; // inherited from NSObject

	nullableIntValue: number;

	nullableIntWasNull: number;

	nullableListValue: NSArray<any>;

	nullableListWasNull: number;

	nullableOptionalIntValue: number;

	nullableOptionalIntWasNull: number;

	nullableOptionalIntWasPresent: number;

	nullableOptionalListValue: NSArray<any>;

	nullableOptionalListWasNull: number;

	nullableOptionalListWasPresent: number;

	nullableOptionalStringValue: string;

	nullableOptionalStringWasNull: number;

	nullableOptionalStringWasPresent: number;

	nullableOptionalStructValue: MTRTestClusterClusterSimpleStruct;

	nullableOptionalStructWasNull: number;

	nullableOptionalStructWasPresent: number;

	nullableStringValue: string;

	nullableStringWasNull: number;

	nullableStructValue: MTRTestClusterClusterSimpleStruct;

	nullableStructWasNull: number;

	optionalIntValue: number;

	optionalIntWasPresent: number;

	optionalListValue: NSArray<any>;

	optionalListWasPresent: number;

	optionalStringValue: string;

	optionalStringWasPresent: number;

	optionalStructValue: MTRTestClusterClusterSimpleStruct;

	optionalStructWasPresent: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRTestClusterClusterTestEmitTestEventRequestParams extends NSObject implements NSCopying {

	static alloc(): MTRTestClusterClusterTestEmitTestEventRequestParams; // inherited from NSObject

	static new(): MTRTestClusterClusterTestEmitTestEventRequestParams; // inherited from NSObject

	arg1: number;

	arg2: number;

	arg3: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRTestClusterClusterTestEmitTestEventResponseParams extends NSObject implements NSCopying {

	static alloc(): MTRTestClusterClusterTestEmitTestEventResponseParams; // inherited from NSObject

	static new(): MTRTestClusterClusterTestEmitTestEventResponseParams; // inherited from NSObject

	timedInvokeTimeoutMs: number;

	value: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRTestClusterClusterTestEmitTestFabricScopedEventRequestParams extends NSObject implements NSCopying {

	static alloc(): MTRTestClusterClusterTestEmitTestFabricScopedEventRequestParams; // inherited from NSObject

	static new(): MTRTestClusterClusterTestEmitTestFabricScopedEventRequestParams; // inherited from NSObject

	arg1: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRTestClusterClusterTestEmitTestFabricScopedEventResponseParams extends NSObject implements NSCopying {

	static alloc(): MTRTestClusterClusterTestEmitTestFabricScopedEventResponseParams; // inherited from NSObject

	static new(): MTRTestClusterClusterTestEmitTestFabricScopedEventResponseParams; // inherited from NSObject

	timedInvokeTimeoutMs: number;

	value: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRTestClusterClusterTestEnumsRequestParams extends NSObject implements NSCopying {

	static alloc(): MTRTestClusterClusterTestEnumsRequestParams; // inherited from NSObject

	static new(): MTRTestClusterClusterTestEnumsRequestParams; // inherited from NSObject

	arg1: number;

	arg2: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRTestClusterClusterTestEnumsResponseParams extends NSObject implements NSCopying {

	static alloc(): MTRTestClusterClusterTestEnumsResponseParams; // inherited from NSObject

	static new(): MTRTestClusterClusterTestEnumsResponseParams; // inherited from NSObject

	arg1: number;

	arg2: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRTestClusterClusterTestEventEvent extends NSObject implements NSCopying {

	static alloc(): MTRTestClusterClusterTestEventEvent; // inherited from NSObject

	static new(): MTRTestClusterClusterTestEventEvent; // inherited from NSObject

	arg1: number;

	arg2: number;

	arg3: number;

	arg4: MTRTestClusterClusterSimpleStruct;

	arg5: NSArray<any>;

	arg6: NSArray<any>;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRTestClusterClusterTestFabricScoped extends NSObject implements NSCopying {

	static alloc(): MTRTestClusterClusterTestFabricScoped; // inherited from NSObject

	static new(): MTRTestClusterClusterTestFabricScoped; // inherited from NSObject

	fabricIndex: number;

	fabricSensitiveCharString: string;

	fabricSensitiveInt8u: number;

	fabricSensitiveInt8uList: NSArray<any>;

	fabricSensitiveStruct: MTRTestClusterClusterSimpleStruct;

	nullableFabricSensitiveInt8u: number;

	nullableOptionalFabricSensitiveInt8u: number;

	optionalFabricSensitiveInt8u: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRTestClusterClusterTestFabricScopedEventEvent extends NSObject implements NSCopying {

	static alloc(): MTRTestClusterClusterTestFabricScopedEventEvent; // inherited from NSObject

	static new(): MTRTestClusterClusterTestFabricScopedEventEvent; // inherited from NSObject

	fabricIndex: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRTestClusterClusterTestListInt8UArgumentRequestParams extends NSObject implements NSCopying {

	static alloc(): MTRTestClusterClusterTestListInt8UArgumentRequestParams; // inherited from NSObject

	static new(): MTRTestClusterClusterTestListInt8UArgumentRequestParams; // inherited from NSObject

	arg1: NSArray<any>;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRTestClusterClusterTestListInt8UReverseRequestParams extends NSObject implements NSCopying {

	static alloc(): MTRTestClusterClusterTestListInt8UReverseRequestParams; // inherited from NSObject

	static new(): MTRTestClusterClusterTestListInt8UReverseRequestParams; // inherited from NSObject

	arg1: NSArray<any>;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRTestClusterClusterTestListInt8UReverseResponseParams extends NSObject implements NSCopying {

	static alloc(): MTRTestClusterClusterTestListInt8UReverseResponseParams; // inherited from NSObject

	static new(): MTRTestClusterClusterTestListInt8UReverseResponseParams; // inherited from NSObject

	arg1: NSArray<any>;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRTestClusterClusterTestListNestedStructListArgumentRequestParams extends NSObject implements NSCopying {

	static alloc(): MTRTestClusterClusterTestListNestedStructListArgumentRequestParams; // inherited from NSObject

	static new(): MTRTestClusterClusterTestListNestedStructListArgumentRequestParams; // inherited from NSObject

	arg1: NSArray<any>;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRTestClusterClusterTestListStructArgumentRequestParams extends NSObject implements NSCopying {

	static alloc(): MTRTestClusterClusterTestListStructArgumentRequestParams; // inherited from NSObject

	static new(): MTRTestClusterClusterTestListStructArgumentRequestParams; // inherited from NSObject

	arg1: NSArray<any>;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRTestClusterClusterTestListStructOctet extends NSObject implements NSCopying {

	static alloc(): MTRTestClusterClusterTestListStructOctet; // inherited from NSObject

	static new(): MTRTestClusterClusterTestListStructOctet; // inherited from NSObject

	member1: number;

	member2: NSData;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRTestClusterClusterTestNestedStructArgumentRequestParams extends NSObject implements NSCopying {

	static alloc(): MTRTestClusterClusterTestNestedStructArgumentRequestParams; // inherited from NSObject

	static new(): MTRTestClusterClusterTestNestedStructArgumentRequestParams; // inherited from NSObject

	arg1: MTRTestClusterClusterNestedStruct;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRTestClusterClusterTestNestedStructListArgumentRequestParams extends NSObject implements NSCopying {

	static alloc(): MTRTestClusterClusterTestNestedStructListArgumentRequestParams; // inherited from NSObject

	static new(): MTRTestClusterClusterTestNestedStructListArgumentRequestParams; // inherited from NSObject

	arg1: MTRTestClusterClusterNestedStructList;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRTestClusterClusterTestNotHandledParams extends NSObject implements NSCopying {

	static alloc(): MTRTestClusterClusterTestNotHandledParams; // inherited from NSObject

	static new(): MTRTestClusterClusterTestNotHandledParams; // inherited from NSObject

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRTestClusterClusterTestNullableOptionalRequestParams extends NSObject implements NSCopying {

	static alloc(): MTRTestClusterClusterTestNullableOptionalRequestParams; // inherited from NSObject

	static new(): MTRTestClusterClusterTestNullableOptionalRequestParams; // inherited from NSObject

	arg1: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRTestClusterClusterTestNullableOptionalResponseParams extends NSObject implements NSCopying {

	static alloc(): MTRTestClusterClusterTestNullableOptionalResponseParams; // inherited from NSObject

	static new(): MTRTestClusterClusterTestNullableOptionalResponseParams; // inherited from NSObject

	originalValue: number;

	timedInvokeTimeoutMs: number;

	value: number;

	wasNull: number;

	wasPresent: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRTestClusterClusterTestParams extends NSObject implements NSCopying {

	static alloc(): MTRTestClusterClusterTestParams; // inherited from NSObject

	static new(): MTRTestClusterClusterTestParams; // inherited from NSObject

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRTestClusterClusterTestSimpleArgumentRequestParams extends NSObject implements NSCopying {

	static alloc(): MTRTestClusterClusterTestSimpleArgumentRequestParams; // inherited from NSObject

	static new(): MTRTestClusterClusterTestSimpleArgumentRequestParams; // inherited from NSObject

	arg1: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRTestClusterClusterTestSimpleArgumentResponseParams extends NSObject implements NSCopying {

	static alloc(): MTRTestClusterClusterTestSimpleArgumentResponseParams; // inherited from NSObject

	static new(): MTRTestClusterClusterTestSimpleArgumentResponseParams; // inherited from NSObject

	returnValue: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRTestClusterClusterTestSimpleOptionalArgumentRequestParams extends NSObject implements NSCopying {

	static alloc(): MTRTestClusterClusterTestSimpleOptionalArgumentRequestParams; // inherited from NSObject

	static new(): MTRTestClusterClusterTestSimpleOptionalArgumentRequestParams; // inherited from NSObject

	arg1: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRTestClusterClusterTestSpecificParams extends NSObject implements NSCopying {

	static alloc(): MTRTestClusterClusterTestSpecificParams; // inherited from NSObject

	static new(): MTRTestClusterClusterTestSpecificParams; // inherited from NSObject

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRTestClusterClusterTestSpecificResponseParams extends NSObject implements NSCopying {

	static alloc(): MTRTestClusterClusterTestSpecificResponseParams; // inherited from NSObject

	static new(): MTRTestClusterClusterTestSpecificResponseParams; // inherited from NSObject

	returnValue: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRTestClusterClusterTestStructArgumentRequestParams extends NSObject implements NSCopying {

	static alloc(): MTRTestClusterClusterTestStructArgumentRequestParams; // inherited from NSObject

	static new(): MTRTestClusterClusterTestStructArgumentRequestParams; // inherited from NSObject

	arg1: MTRTestClusterClusterSimpleStruct;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRTestClusterClusterTestStructArrayArgumentRequestParams extends NSObject implements NSCopying {

	static alloc(): MTRTestClusterClusterTestStructArrayArgumentRequestParams; // inherited from NSObject

	static new(): MTRTestClusterClusterTestStructArrayArgumentRequestParams; // inherited from NSObject

	arg1: NSArray<any>;

	arg2: NSArray<any>;

	arg3: NSArray<any>;

	arg4: NSArray<any>;

	arg5: number;

	arg6: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRTestClusterClusterTestStructArrayArgumentResponseParams extends NSObject implements NSCopying {

	static alloc(): MTRTestClusterClusterTestStructArrayArgumentResponseParams; // inherited from NSObject

	static new(): MTRTestClusterClusterTestStructArrayArgumentResponseParams; // inherited from NSObject

	arg1: NSArray<any>;

	arg2: NSArray<any>;

	arg3: NSArray<any>;

	arg4: NSArray<any>;

	arg5: number;

	arg6: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRTestClusterClusterTestUnknownCommandParams extends NSObject implements NSCopying {

	static alloc(): MTRTestClusterClusterTestUnknownCommandParams; // inherited from NSObject

	static new(): MTRTestClusterClusterTestUnknownCommandParams; // inherited from NSObject

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRTestClusterClusterTimedInvokeRequestParams extends NSObject implements NSCopying {

	static alloc(): MTRTestClusterClusterTimedInvokeRequestParams; // inherited from NSObject

	static new(): MTRTestClusterClusterTimedInvokeRequestParams; // inherited from NSObject

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare const enum MTRTestClusterSimple {

	Unspecified = 0,

	ValueA = 1,

	ValueB = 2,

	ValueC = 3
}

declare const enum MTRTestClusterSimpleBitmap {

	ValueA = 1,

	ValueB = 2,

	ValueC = 4
}

declare class MTRThermostatClusterClearWeeklyScheduleParams extends NSObject implements NSCopying {

	static alloc(): MTRThermostatClusterClearWeeklyScheduleParams; // inherited from NSObject

	static new(): MTRThermostatClusterClearWeeklyScheduleParams; // inherited from NSObject

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRThermostatClusterGetWeeklyScheduleParams extends NSObject implements NSCopying {

	static alloc(): MTRThermostatClusterGetWeeklyScheduleParams; // inherited from NSObject

	static new(): MTRThermostatClusterGetWeeklyScheduleParams; // inherited from NSObject

	daysToReturn: number;

	modeToReturn: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRThermostatClusterGetWeeklyScheduleResponseParams extends NSObject implements NSCopying {

	static alloc(): MTRThermostatClusterGetWeeklyScheduleResponseParams; // inherited from NSObject

	static new(): MTRThermostatClusterGetWeeklyScheduleResponseParams; // inherited from NSObject

	dayOfWeekForSequence: number;

	modeForSequence: number;

	numberOfTransitionsForSequence: number;

	timedInvokeTimeoutMs: number;

	transitions: NSArray<any>;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRThermostatClusterSetWeeklyScheduleParams extends NSObject implements NSCopying {

	static alloc(): MTRThermostatClusterSetWeeklyScheduleParams; // inherited from NSObject

	static new(): MTRThermostatClusterSetWeeklyScheduleParams; // inherited from NSObject

	dayOfWeekForSequence: number;

	modeForSequence: number;

	numberOfTransitionsForSequence: number;

	timedInvokeTimeoutMs: number;

	transitions: NSArray<any>;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRThermostatClusterSetpointRaiseLowerParams extends NSObject implements NSCopying {

	static alloc(): MTRThermostatClusterSetpointRaiseLowerParams; // inherited from NSObject

	static new(): MTRThermostatClusterSetpointRaiseLowerParams; // inherited from NSObject

	amount: number;

	mode: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRThermostatClusterThermostatScheduleTransition extends NSObject implements NSCopying {

	static alloc(): MTRThermostatClusterThermostatScheduleTransition; // inherited from NSObject

	static new(): MTRThermostatClusterThermostatScheduleTransition; // inherited from NSObject

	coolSetpoint: number;

	heatSetpoint: number;

	transitionTime: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare const enum MTRThermostatControlSequence {

	CoolingOnly = 0,

	CoolingWithReheat = 1,

	HeatingOnly = 2,

	HeatingWithReheat = 3,

	CoolingAndHeating = 4,

	CoolingAndHeatingWithReheat = 5
}

declare const enum MTRThermostatDayOfWeek {

	Sunday = 1,

	Monday = 2,

	Tuesday = 4,

	Wednesday = 8,

	Thursday = 16,

	Friday = 32,

	Saturday = 64,

	AwayOrVacation = 128
}

declare const enum MTRThermostatFeature {

	Heating = 1,

	Cooling = 2,

	Occupancy = 4,

	Schedule = 8,

	Setback = 16,

	Automode = 32
}

declare const enum MTRThermostatModeForSequence {

	HeatSetpointFieldPresent = 1,

	CoolSetpointFieldPresent = 2
}

declare const enum MTRThermostatRunningMode {

	Off = 0,

	Cool = 3,

	Heat = 4
}

declare const enum MTRThermostatSetpointAdjustMode {

	HeatSetpoint = 0,

	CoolSetpoint = 1,

	HeatAndCoolSetpoints = 2
}

declare const enum MTRThermostatSystemMode {

	Off = 0,

	Auto = 1,

	Cool = 3,

	Heat = 4,

	EmergencyHeating = 5,

	Precooling = 6,

	FanOnly = 7
}

declare class MTRThreadNetworkDiagnosticsClusterConnectionStatusEvent extends NSObject implements NSCopying {

	static alloc(): MTRThreadNetworkDiagnosticsClusterConnectionStatusEvent; // inherited from NSObject

	static new(): MTRThreadNetworkDiagnosticsClusterConnectionStatusEvent; // inherited from NSObject

	connectionStatus: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRThreadNetworkDiagnosticsClusterNeighborTable extends NSObject implements NSCopying {

	static alloc(): MTRThreadNetworkDiagnosticsClusterNeighborTable; // inherited from NSObject

	static new(): MTRThreadNetworkDiagnosticsClusterNeighborTable; // inherited from NSObject

	age: number;

	averageRssi: number;

	extAddress: number;

	frameErrorRate: number;

	fullNetworkData: number;

	fullThreadDevice: number;

	isChild: number;

	lastRssi: number;

	linkFrameCounter: number;

	lqi: number;

	messageErrorRate: number;

	mleFrameCounter: number;

	rloc16: number;

	rxOnWhenIdle: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRThreadNetworkDiagnosticsClusterNetworkFaultChangeEvent extends NSObject implements NSCopying {

	static alloc(): MTRThreadNetworkDiagnosticsClusterNetworkFaultChangeEvent; // inherited from NSObject

	static new(): MTRThreadNetworkDiagnosticsClusterNetworkFaultChangeEvent; // inherited from NSObject

	current: NSArray<any>;

	previous: NSArray<any>;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRThreadNetworkDiagnosticsClusterOperationalDatasetComponents extends NSObject implements NSCopying {

	static alloc(): MTRThreadNetworkDiagnosticsClusterOperationalDatasetComponents; // inherited from NSObject

	static new(): MTRThreadNetworkDiagnosticsClusterOperationalDatasetComponents; // inherited from NSObject

	activeTimestampPresent: number;

	channelMaskPresent: number;

	channelPresent: number;

	delayPresent: number;

	extendedPanIdPresent: number;

	masterKeyPresent: number;

	meshLocalPrefixPresent: number;

	networkNamePresent: number;

	panIdPresent: number;

	pendingTimestampPresent: number;

	pskcPresent: number;

	securityPolicyPresent: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRThreadNetworkDiagnosticsClusterResetCountsParams extends NSObject implements NSCopying {

	static alloc(): MTRThreadNetworkDiagnosticsClusterResetCountsParams; // inherited from NSObject

	static new(): MTRThreadNetworkDiagnosticsClusterResetCountsParams; // inherited from NSObject

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRThreadNetworkDiagnosticsClusterRouteTable extends NSObject implements NSCopying {

	static alloc(): MTRThreadNetworkDiagnosticsClusterRouteTable; // inherited from NSObject

	static new(): MTRThreadNetworkDiagnosticsClusterRouteTable; // inherited from NSObject

	age: number;

	allocated: number;

	extAddress: number;

	linkEstablished: number;

	lqiIn: number;

	lqiOut: number;

	nextHop: number;

	pathCost: number;

	rloc16: number;

	routerId: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRThreadNetworkDiagnosticsClusterSecurityPolicy extends NSObject implements NSCopying {

	static alloc(): MTRThreadNetworkDiagnosticsClusterSecurityPolicy; // inherited from NSObject

	static new(): MTRThreadNetworkDiagnosticsClusterSecurityPolicy; // inherited from NSObject

	flags: number;

	rotationTime: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare const enum MTRThreadNetworkDiagnosticsFeature {

	PacketCounts = 1,

	ErrorCounts = 2,

	MLECounts = 4,

	MACCounts = 8
}

declare const enum MTRThreadNetworkDiagnosticsNetworkFault {

	Unspecified = 0,

	LinkDown = 1,

	HardwareFailure = 2,

	NetworkJammed = 3
}

declare const enum MTRThreadNetworkDiagnosticsRoutingRole {

	Unspecified = 0,

	Unassigned = 1,

	SleepyEndDevice = 2,

	EndDevice = 3,

	REED = 4,

	Router = 5,

	Leader = 6
}

declare const enum MTRThreadNetworkDiagnosticsThreadConnectionStatus {

	Connected = 0,

	NotConnected = 1
}

declare class MTRThreadOperationalDataset extends NSObject {

	static alloc(): MTRThreadOperationalDataset; // inherited from NSObject

	static new(): MTRThreadOperationalDataset; // inherited from NSObject

	readonly PSKc: NSData;

	channel: number;

	readonly extendedPANID: NSData;

	readonly masterKey: NSData;

	readonly networkName: string;

	readonly panID: NSData;

	constructor(o: { data: NSData; });

	constructor(o: { networkName: string; extendedPANID: NSData; masterKey: NSData; PSKc: NSData; channel: number; panID: NSData; });

	data(): NSData;

	initWithData(data: NSData): this;

	initWithNetworkNameExtendedPANIDMasterKeyPSKcChannelPanID(networkName: string, extendedPANID: NSData, masterKey: NSData, PSKc: NSData, channel: number, panID: NSData): this;
}

declare const enum MTRTimeFormatLocalizationCalendarType {

	Buddhist = 0,

	Chinese = 1,

	Coptic = 2,

	Ethiopian = 3,

	Gregorian = 4,

	Hebrew = 5,

	Indian = 6,

	Islamic = 7,

	Japanese = 8,

	Korean = 9,

	Persian = 10,

	Taiwanese = 11
}

declare const enum MTRTimeFormatLocalizationHourFormat {

	Format12hr = 0,

	Format24hr = 1
}

declare class MTRTimeSynchronizationClusterDstOffsetType extends NSObject implements NSCopying {

	static alloc(): MTRTimeSynchronizationClusterDstOffsetType; // inherited from NSObject

	static new(): MTRTimeSynchronizationClusterDstOffsetType; // inherited from NSObject

	offset: number;

	validStarting: number;

	validUntil: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRTimeSynchronizationClusterSetUtcTimeParams extends NSObject implements NSCopying {

	static alloc(): MTRTimeSynchronizationClusterSetUtcTimeParams; // inherited from NSObject

	static new(): MTRTimeSynchronizationClusterSetUtcTimeParams; // inherited from NSObject

	granularity: number;

	timeSource: number;

	timedInvokeTimeoutMs: number;

	utcTime: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRTimeSynchronizationClusterTimeZoneType extends NSObject implements NSCopying {

	static alloc(): MTRTimeSynchronizationClusterTimeZoneType; // inherited from NSObject

	static new(): MTRTimeSynchronizationClusterTimeZoneType; // inherited from NSObject

	name: string;

	offset: number;

	validAt: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare const enum MTRTimeSynchronizationGranularity {

	NoTimeGranularity = 0,

	MinutesGranularity = 1,

	SecondsGranularity = 2,

	MillisecondsGranularity = 3,

	MicrosecondsGranularity = 4
}

declare const enum MTRTimeSynchronizationTimeSource {

	None = 0,

	Unknown = 1,

	Admin = 2,

	NodeTimeCluster = 3,

	NonFabricSntp = 4,

	NonFabricNtp = 5,

	FabricSntp = 6,

	FabricNtp = 7,

	MixedNtp = 8,

	NonFabricSntpNts = 9,

	NonFabricNtpNts = 10,

	FabricSntpNts = 11,

	FabricNtpNts = 12,

	MixedNtpNts = 13,

	CloudSource = 14,

	Ptp = 15,

	Gnss = 16
}

declare var MTRTypeKey: string;

declare var MTRUTF8StringValueType: string;

declare const enum MTRUnitLocalizationFeature {

	TemperatureUnit = 1
}

declare const enum MTRUnitLocalizationTempUnit {

	Fahrenheit = 0,

	Celsius = 1,

	Kelvin = 2
}

declare var MTRUnsignedIntegerValueType: string;

declare class MTRUserLabelClusterLabelStruct extends NSObject implements NSCopying {

	static alloc(): MTRUserLabelClusterLabelStruct; // inherited from NSObject

	static new(): MTRUserLabelClusterLabelStruct; // inherited from NSObject

	label: string;

	value: string;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare var MTRValueKey: string;

declare const enum MTRWiFiNetworkDiagnosticsAssociationFailureCause {

	Unknown = 0,

	AssociationFailed = 1,

	AuthenticationFailed = 2,

	SsidNotFound = 3
}

declare class MTRWiFiNetworkDiagnosticsClusterAssociationFailureEvent extends NSObject implements NSCopying {

	static alloc(): MTRWiFiNetworkDiagnosticsClusterAssociationFailureEvent; // inherited from NSObject

	static new(): MTRWiFiNetworkDiagnosticsClusterAssociationFailureEvent; // inherited from NSObject

	associationFailure: number;

	status: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRWiFiNetworkDiagnosticsClusterConnectionStatusEvent extends NSObject implements NSCopying {

	static alloc(): MTRWiFiNetworkDiagnosticsClusterConnectionStatusEvent; // inherited from NSObject

	static new(): MTRWiFiNetworkDiagnosticsClusterConnectionStatusEvent; // inherited from NSObject

	connectionStatus: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRWiFiNetworkDiagnosticsClusterDisconnectionEvent extends NSObject implements NSCopying {

	static alloc(): MTRWiFiNetworkDiagnosticsClusterDisconnectionEvent; // inherited from NSObject

	static new(): MTRWiFiNetworkDiagnosticsClusterDisconnectionEvent; // inherited from NSObject

	reasonCode: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRWiFiNetworkDiagnosticsClusterResetCountsParams extends NSObject implements NSCopying {

	static alloc(): MTRWiFiNetworkDiagnosticsClusterResetCountsParams; // inherited from NSObject

	static new(): MTRWiFiNetworkDiagnosticsClusterResetCountsParams; // inherited from NSObject

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare const enum MTRWiFiNetworkDiagnosticsSecurityType {

	Unspecified = 0,

	None = 1,

	WEP = 2,

	WPA = 3,

	WPA2 = 4,

	WPA3 = 5
}

declare const enum MTRWiFiNetworkDiagnosticsWiFiConnectionStatus {

	Connected = 0,

	NotConnected = 1
}

declare const enum MTRWiFiNetworkDiagnosticsWiFiVersionType {

	Type80211a = 0,

	Type80211b = 1,

	Type80211g = 2,

	Type80211n = 3,

	Type80211ac = 4,

	Type80211ax = 5
}

declare class MTRWindowCoveringClusterDownOrCloseParams extends NSObject implements NSCopying {

	static alloc(): MTRWindowCoveringClusterDownOrCloseParams; // inherited from NSObject

	static new(): MTRWindowCoveringClusterDownOrCloseParams; // inherited from NSObject

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRWindowCoveringClusterGoToLiftPercentageParams extends NSObject implements NSCopying {

	static alloc(): MTRWindowCoveringClusterGoToLiftPercentageParams; // inherited from NSObject

	static new(): MTRWindowCoveringClusterGoToLiftPercentageParams; // inherited from NSObject

	liftPercent100thsValue: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRWindowCoveringClusterGoToLiftValueParams extends NSObject implements NSCopying {

	static alloc(): MTRWindowCoveringClusterGoToLiftValueParams; // inherited from NSObject

	static new(): MTRWindowCoveringClusterGoToLiftValueParams; // inherited from NSObject

	liftValue: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRWindowCoveringClusterGoToTiltPercentageParams extends NSObject implements NSCopying {

	static alloc(): MTRWindowCoveringClusterGoToTiltPercentageParams; // inherited from NSObject

	static new(): MTRWindowCoveringClusterGoToTiltPercentageParams; // inherited from NSObject

	tiltPercent100thsValue: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRWindowCoveringClusterGoToTiltValueParams extends NSObject implements NSCopying {

	static alloc(): MTRWindowCoveringClusterGoToTiltValueParams; // inherited from NSObject

	static new(): MTRWindowCoveringClusterGoToTiltValueParams; // inherited from NSObject

	tiltValue: number;

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRWindowCoveringClusterStopMotionParams extends NSObject implements NSCopying {

	static alloc(): MTRWindowCoveringClusterStopMotionParams; // inherited from NSObject

	static new(): MTRWindowCoveringClusterStopMotionParams; // inherited from NSObject

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare class MTRWindowCoveringClusterUpOrOpenParams extends NSObject implements NSCopying {

	static alloc(): MTRWindowCoveringClusterUpOrOpenParams; // inherited from NSObject

	static new(): MTRWindowCoveringClusterUpOrOpenParams; // inherited from NSObject

	timedInvokeTimeoutMs: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}

declare const enum MTRWindowCoveringConfigStatus {

	Operational = 1,

	OnlineReserved = 2,

	LiftMovementReversed = 4,

	LiftPositionAware = 8,

	TiltPositionAware = 16,

	LiftEncoderControlled = 32,

	TiltEncoderControlled = 64
}

declare const enum MTRWindowCoveringEndProductType {

	RollerShade = 0,

	RomanShade = 1,

	BalloonShade = 2,

	WovenWood = 3,

	PleatedShade = 4,

	CellularShade = 5,

	LayeredShade = 6,

	LayeredShade2D = 7,

	SheerShade = 8,

	TiltOnlyInteriorBlind = 9,

	InteriorBlind = 10,

	VerticalBlindStripCurtain = 11,

	InteriorVenetianBlind = 12,

	ExteriorVenetianBlind = 13,

	LateralLeftCurtain = 14,

	LateralRightCurtain = 15,

	CentralCurtain = 16,

	RollerShutter = 17,

	ExteriorVerticalScreen = 18,

	AwningTerracePatio = 19,

	AwningVerticalScreen = 20,

	TiltOnlyPergola = 21,

	SwingingShutter = 22,

	SlidingShutter = 23,

	Unknown = 255
}

declare const enum MTRWindowCoveringFeature {

	Lift = 1,

	Tilt = 2,

	PositionAwareLift = 4,

	AbsolutePosition = 8,

	PositionAwareTilt = 16
}

declare const enum MTRWindowCoveringMode {

	MotorDirectionReversed = 1,

	CalibrationMode = 2,

	MaintenanceMode = 4,

	LedFeedback = 8
}

declare const enum MTRWindowCoveringOperationalStatus {

	Global = 3,

	Lift = 12,

	Tilt = 48
}

declare const enum MTRWindowCoveringSafetyStatus {

	RemoteLockout = 1,

	TamperDetection = 2,

	FailedCommunication = 4,

	PositionFailure = 8,

	ThermalProtection = 16,

	ObstacleDetected = 32,

	Power = 64,

	StopInput = 128,

	MotorJammed = 256,

	HardwareFailure = 512,

	ManualOperation = 1024,

	Protection = 2048
}

declare const enum MTRWindowCoveringType {

	RollerShade = 0,

	RollerShade2Motor = 1,

	RollerShadeExterior = 2,

	RollerShadeExterior2Motor = 3,

	Drapery = 4,

	Awning = 5,

	Shutter = 6,

	TiltBlindTiltOnly = 7,

	TiltBlindLiftAndTilt = 8,

	ProjectorScreen = 9,

	Unknown = 255
}

declare class MTRWriteParams extends NSObject implements NSCopying {

	static alloc(): MTRWriteParams; // inherited from NSObject

	static new(): MTRWriteParams; // inherited from NSObject

	dataVersion: number;

	timedWriteTimeout: number;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}
